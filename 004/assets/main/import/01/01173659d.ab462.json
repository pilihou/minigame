[1,["66ACC1IiRERa+uoQb6t0+U","1brw/JvvpFnIvdrxpFCgMZ","cfM9wPDBpOmJ21eVWbpiWm","d7p19gy4hA06rDzxgEUhrg@a41f1","ecNaEms+hHi6dhgCsVYRzL@6c48a","a6ljAcMEdKi4ThbMf6tfvP@abc08","2eVliSDiZL6r10NjQzTUQu@6c48a","064sHHl0lOz6r1Y7Ish5Ok","45UjodU91ON4tNVSXRgJE7@26b70","ceG/wt4htLlq1cUqDSypTo@bb4bf","2eteOV8UdMXb4jtkz9voit","e04sEL+a9PfKmDy4AX+wpa@ef5e1","520YdqjuFNwbeiFVn62KR9","a3E95DVaNLbLWzBitWs8Hr","87RA6TW+BBYKwxH/RI30FT","6c0ERbjMJId65gBU5W63e9","5d4MRJB1dMSrGKPE+db+S4@33561","e3ZOzyroZELr1PJsJwgSzl","72Ksm+YC5Anr9r4f8dwNPu@6c48a","30DdEcAKFMAYrtzBMlufLV@6c48a","7cDuOm4pJOQJX1uHFBUvj7@6c48a","36K6ogFhxFTqAprUEjpJsC","faUKagrUVPy7D5kfsAo8Ao@6c48a","66hIUez/5AWJYKKqG0E7nj@6c48a","2c/WOVol5GkZbOPY6yV+eD@6c48a","6cyTjXb69OI4zXQ5KD+BkE@6c48a","46sDvFk79B0pEnaBvkyCX5@16dc8","a8APqGFxVDm4D6UUTC58vN@3669c","b801+fZZNLV7+VUmEd40Ve@84ef2","15gmddtJhKCbABKy9UADq4@6c48a","fe2Oy/R7pF5764FK/KGbCI@6c48a","dcOx4qCJZOrI2n1XztFNME@6c48a","6bL2c/QC1Ko6ppfL8zcKAS@6c48a","beOFh9wJpDrqCQv4b1s7/6@6c48a","3cLsGbdX5P86zZwhYS4F4n@6c48a","e0oorepUFEo41SKk+qNXy2@6c48a","20Dh30RG5GKbEmvBSqI67K@6c48a","2eXq4LiqtMA5w9r+98kWYM@6c48a","26HZjSj01P8oHIe5Yywl3H@6c48a","1a9n5zuaRMtLJuGlDtX5uE@6c48a","749zek5ANAQoGcnxYG9Olr@6c48a","c3FZrUnFpGH6s6ibhxKyOz@6c48a","21GThD+qtKe4EOhnCdAfI5@6c48a","16Brf/ksFEo4snTgpL2jMy@6c48a","10LwLm0F5A7Jk64hiH4DpB@6c48a","6aRyeZtNBETLpsFfsWWo4+@6c48a","a8dnI7F51BOINyJKZyptYy@6c48a","62sMBRMvBGsK7xy8tAMnks@6c48a","92sEEc3yZK06baTCgBcZPk","15wHZVaMlPOKHu3Fc68beK@96333","a3zQCfCrBCDZJ4uf2rk5u8","6dd5JBUslDE47ykKmQJBOx@cf5ee","dahOTMholGiKQdMIM1btKF@989ed","edCjag9BdGdJV9d7RZEdnt@35de4","e9nG92Q+NFVomIy3H7h2Ol@73d56","20fHIymRJFSrvJDANXP16k@fabc1","aefO9uVBRBfaBnxTdE1zUX@81fe9","a8YSHGCsxPnaKCnaM784sJ@486c5","84C/X2wIBB6bI2AVLfoAhR","7a0m/LVRJCBIo1ET7aRN/w@1f586","7cfQYnmXdLjLGuR1bMVmBw@1f586","4ca0OAh4hMP7yK6i5eQOVX@1f586","d5/jV2ZcZG54X1YoT9aDka@fc7b9","82fTzxON9OaZLJq4R/MT89@d3ca2","1fc7hwag1IA4/Rsa8dxGll@49684","1cqX3dLRZJ+anFcsITXmou@bf5b5","11EsUxjIJF47bF3Z39M2UT@c9dcf","974kXmWORIn47UE9r6crCW","5d4MRJB1dMSrGKPE+db+S4@063bf","5d4MRJB1dMSrGKPE+db+S4@30732","87jBkLyjxKWaeP3JiK641q","5d4MRJB1dMSrGKPE+db+S4@e4394","5d4MRJB1dMSrGKPE+db+S4@f1394","5d4MRJB1dMSrGKPE+db+S4@723f3","5d4MRJB1dMSrGKPE+db+S4@75ee4","db21AmyVxFEr7WvVfrmkdU","5d4MRJB1dMSrGKPE+db+S4@8d28d","5d4MRJB1dMSrGKPE+db+S4@a72ab","5d4MRJB1dMSrGKPE+db+S4@05dde","5d4MRJB1dMSrGKPE+db+S4@2224c","d6HMSdgf1KC5p+rGuXqQUo","5d4MRJB1dMSrGKPE+db+S4@74888","5d4MRJB1dMSrGKPE+db+S4@62756","85MBWCQltAy7juYYhrw5r5","5d4MRJB1dMSrGKPE+db+S4@2b64b","5d4MRJB1dMSrGKPE+db+S4@7d08b","e0T4ppwX5DdLo/Tbyw5tiO","5d4MRJB1dMSrGKPE+db+S4@ac8af","5d4MRJB1dMSrGKPE+db+S4@b5902","5d4MRJB1dMSrGKPE+db+S4@98718","5d4MRJB1dMSrGKPE+db+S4@2d5df","cdWlrONgRE9qD8jNJhkiDj","5d4MRJB1dMSrGKPE+db+S4@c6c44","5d4MRJB1dMSrGKPE+db+S4@8feb8","5d4MRJB1dMSrGKPE+db+S4@80167","5d4MRJB1dMSrGKPE+db+S4@ad32d","5d4MRJB1dMSrGKPE+db+S4@04462","5d4MRJB1dMSrGKPE+db+S4@df8aa","a6MmWiCWxD3pgC9idixK1F","5d4MRJB1dMSrGKPE+db+S4@95b33","0fdUnD6glNDYbA2rT8VPkp","5d4MRJB1dMSrGKPE+db+S4@1692b","adU5Njg9VGup5QtPxigEjh","5d4MRJB1dMSrGKPE+db+S4@3cdea","ceP7s3OKVJHouZNd4hXmlG","5d4MRJB1dMSrGKPE+db+S4@96401","41pELMSUBEV656kJ+/nv3z","5d4MRJB1dMSrGKPE+db+S4@e7137","5d4MRJB1dMSrGKPE+db+S4@52697","5d4MRJB1dMSrGKPE+db+S4@78391","5d4MRJB1dMSrGKPE+db+S4@1f586","5d4MRJB1dMSrGKPE+db+S4@cf5ee","5d4MRJB1dMSrGKPE+db+S4@5b2e9","5d4MRJB1dMSrGKPE+db+S4@79e35","5d4MRJB1dMSrGKPE+db+S4@6b976","5d4MRJB1dMSrGKPE+db+S4@cfd36","5d4MRJB1dMSrGKPE+db+S4@4ffc4","5d4MRJB1dMSrGKPE+db+S4@029b8","5d4MRJB1dMSrGKPE+db+S4@55b61","5d4MRJB1dMSrGKPE+db+S4@fca4c","5d4MRJB1dMSrGKPE+db+S4@3dc3d","5d4MRJB1dMSrGKPE+db+S4@1a3f1","01q9joMoZM1qKFLGYvez2Z","15wHZVaMlPOKHu3Fc68beK@1c233","15wHZVaMlPOKHu3Fc68beK@438fe","15wHZVaMlPOKHu3Fc68beK@1f586","15wHZVaMlPOKHu3Fc68beK@989ed","15wHZVaMlPOKHu3Fc68beK@79e35","15wHZVaMlPOKHu3Fc68beK@5b2e9","15wHZVaMlPOKHu3Fc68beK@cf5ee","15wHZVaMlPOKHu3Fc68beK@84d36","15wHZVaMlPOKHu3Fc68beK@b863a","d81m8eiqJGjJuy9wJIkgq0","6dd5JBUslDE47ykKmQJBOx@2dce4","6dd5JBUslDE47ykKmQJBOx@438fe","6dd5JBUslDE47ykKmQJBOx@1f586","6dd5JBUslDE47ykKmQJBOx@989ed","6dd5JBUslDE47ykKmQJBOx@79e35","6dd5JBUslDE47ykKmQJBOx@5b2e9","dahOTMholGiKQdMIM1btKF@7ff8b","dahOTMholGiKQdMIM1btKF@438fe","dahOTMholGiKQdMIM1btKF@cf5ee","dahOTMholGiKQdMIM1btKF@79e35","dahOTMholGiKQdMIM1btKF@5b2e9","dahOTMholGiKQdMIM1btKF@1f586","0dKO8bCC9Beb/YnFVMjwMC","d1XKuRVGhBOqCkVHIV586P@5c3c1","15OYLtHs9N/JIWl6A4ZOUj","17KbQ2w+hF+o7AH3YZiOWW@c4bfb","d3x4IMKphEKYvHuEU7yaxB","12Y9dMgWdJKJGmTiZyQR9H@a804a","f36TSeltNC4rNtyFl9bxC1@90f43","71OTgRjoBICI7WZKloUBra@c9e48","d8RuQ7h+pE0qDnqAXrIoeO@93155","2cypx5UF1JI4EaUovEaprW","2fwIs3XtNE7pvQbwnCVS6Q@f20e8","60CcYKtClHLbz5mS8/aRtE@dd3d1","bd+3M3GRhM5KkhJeWEBCmR","7a0m/LVRJCBIo1ET7aRN/w@6b424","7a0m/LVRJCBIo1ET7aRN/w@438fe","7a0m/LVRJCBIo1ET7aRN/w@989ed","7a0m/LVRJCBIo1ET7aRN/w@5b2e9","7a0m/LVRJCBIo1ET7aRN/w@cf5ee","7a0m/LVRJCBIo1ET7aRN/w@79e35","d9ZWquMjJHz6+kkgmUqxMm","7cfQYnmXdLjLGuR1bMVmBw@812a2","7cfQYnmXdLjLGuR1bMVmBw@438fe","7cfQYnmXdLjLGuR1bMVmBw@79e35","7cfQYnmXdLjLGuR1bMVmBw@989ed","7cfQYnmXdLjLGuR1bMVmBw@5b2e9","7cfQYnmXdLjLGuR1bMVmBw@cf5ee","1c0OC0smtAo4i4VAMbKxSo@41e65","5aY0/e9+tMxojzpNbrHEm3","4ca0OAh4hMP7yK6i5eQOVX@83756","4ca0OAh4hMP7yK6i5eQOVX@438fe","4ca0OAh4hMP7yK6i5eQOVX@79e35","4ca0OAh4hMP7yK6i5eQOVX@989ed","4ca0OAh4hMP7yK6i5eQOVX@5b2e9","19kVd/hQZFE5VZlxrlj4Rt@2cb7e","c4ggiL3hBFipuskwv5m/Mr","617CcqRnVPL5ehGClDDXRM","4a3RQ991tMBoZXng5zFb3T","86yQ59CbVJvrSWYreulK3h@2c493","7d7lkZ4AVIEJYCq6D2nnLX","6deodC5QhJNrkcLgL33HbK","efHPVelKZOwbOLLpj/qclH","8exzIrcZVH5qbYJMWwF7Dl@6ae66","59NPuWTW1Dippxph7q+qXp","6dfyRJQqpEFYDEi2iy3+oO","79QacMkdhDBoLvhBDHVxoj","33c6xEPL9Cr7exXAfMo3h4@e7c80","33c6xEPL9Cr7exXAfMo3h4@30732","33c6xEPL9Cr7exXAfMo3h4@7c652","33c6xEPL9Cr7exXAfMo3h4@f1394","33c6xEPL9Cr7exXAfMo3h4@af529","33c6xEPL9Cr7exXAfMo3h4@75ee4","33c6xEPL9Cr7exXAfMo3h4@1f586","33c6xEPL9Cr7exXAfMo3h4@79e35","33c6xEPL9Cr7exXAfMo3h4@989ed","33c6xEPL9Cr7exXAfMo3h4@5b2e9","25nySgNx1IWoNrtUJWPq6b","2cdjEDL9BLJatihZ6hk74K"],["_parent","node","_mesh","root","_effectAsset","_skeleton","mainTexture","occlusionMap","emissiveMap","asset","targetInfo","data","_defaultClip","value","target","scene"],[["cc.Node",["_name","_objFlags","_id","_active","__editorExtras__","_parent","_lpos","_children","_components","_lrot","_euler","_prefab","_lscale"],-2,1,5,2,9,5,5,4,5],["cc.Node",["_name","_objFlags","_children","_prefab","_lpos","_lrot","_euler","_parent","_components","_lscale","__editorExtras__"],1,12,4,5,5,5,1,9,5,11],["cc.MeshRenderer",["_shadowReceivingMode","_enabled","_shadowCastingMode","_name","node","_materials","lightmapSettings","_mesh","__prefab"],-1,1,3,4,6,4],["cc.Node",["_name","_children","_parent","_lpos","_lrot","_euler","_prefab"],2,9,1,5,5,5,4],["cc.SkeletalAnimation",["_useBakedAnimation","node","_clips","_defaultClip","__prefab","_sockets"],2,1,3,6,4,9],["cc.Material",["_defines","_states","_techIdx","_props"],0,12],["cc.SkinnedMeshRenderer",["_shadowCastingMode","_shadowReceivingMode","node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton","__prefab"],1,1,3,4,1,6,6,4],["cc.BoxCollider",["node","_center","_size","__prefab"],3,1,5,5,4],["cc.PrefabInstance",["fileId","propertyOverrides","prefabRootNode"],2,9,1],["95d4e59uMBN3KjIOCg8OQgv",["moveType","node"],2,1],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.ModelLightmapSettings",[],3],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["cc.SceneAsset",["_name"],2],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["38bbdzZyqVAXo6lB18DB+W7",["mapNameSave","mapNameLoad","node"],1,1],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",["_skyIllum","_skyColor","_groundAlbedo"],2,5,5],["cc.ShadowsInfo",["_enabled","_invisibleOcclusionRange","_saturation","_shadowColor"],0,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_type","_enabled","_fogDensity","_fogAtten","_fogColor"],-1,5],["0ed82OXEedEBo/PZgiXYkFT",["node"],3,1],["cc.DirectionalLight",["_illuminance","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",["_castShadow"],2],["cc.Camera",["_fov","_visibility","node","_color"],1,1,5]],[[12,0,1,2,2],[14,1],[0,0,5,7,11,6,9,10,2],[0,0,5,7,6,9,10,2],[11,0,2],[0,0,5,11,6,9,10,2],[15,0,1,2,3],[3,0,2,1,6,3,4,5,2],[2,2,4,8,5,6,7,2],[20,0,1,2,2],[3,0,2,1,3,4,5,2],[0,0,5,8,11,6,9,12,10,2],[0,0,5,6,9,10,2],[0,0,5,11,6,2],[5,1,0,3,3],[6,0,1,2,3,4,5,6,7,3],[18,0,2],[0,0,5,8,11,6,9,10,2],[16,0,1,2,3,4],[19,0,1,2,3],[0,0,5,6,2],[2,4,5,6,7,1],[0,0,3,5,8,9,10,3],[13,0,1,2,3,2],[0,1,4,5,11,3],[2,4,8,5,6,7,1],[0,0,5,6,9,12,10,2],[7,0,1,2,1],[8,0,2,1,2],[10,0,2],[2,2,0,4,5,6,7,3],[0,0,5,8,6,2],[23,0,1,2,2],[0,0,7,11,6,9,10,2],[1,0,2,3,4,5,6,2],[1,0,2,4,5,6,2],[0,0,7,6,9,10,2],[0,0,5,8,6,9,10,2],[0,0,3,5,8,6,9,10,3],[0,0,3,5,8,6,9,12,10,3],[4,1,4,2,3,1],[6,2,8,3,4,5,6,7,1],[0,0,5,8,11,6,12,2],[0,0,5,7,8,2],[0,0,5,7,8,6,12,2],[0,0,5,8,6,12,2],[1,0,7,2,3,4,5,6,2],[7,0,3,1,2,1],[0,0,5,8,11,9,10,2],[0,0,7,8,2],[0,0,5,8,9,10,2],[1,0,7,2,4,5,6,2],[21,0,1,2,2],[9,1,1],[0,0,7,8,11,6,2],[0,0,5,7,6,2],[0,0,5,8,9,12,10,2],[2,1,2,4,8,5,6,7,3],[8,0,1,2],[0,0,5,11,9,10,2],[0,0,7,11,2],[0,0,5,7,11,6,12,2],[0,0,7,8,9,10,2],[0,0,7,6,2],[0,0,1,3,5,7,8,6,12,4],[0,0,5,8,2],[0,0,5,7,9,10,2],[1,0,2,8,3,2],[1,1,7,3,10,2],[3,0,2,1,3,2],[4,0,1,2,5,3,2],[5,2,1,0,3,4],[17,0,1,2,4],[22,0,1,2,3],[25,0,1,2],[33,0,1],[0,0,7,8,11,2],[0,0,5,7,11,9,10,2],[0,0,8,11,2],[0,0,5,7,11,6,2],[0,0,5,7,11,2],[0,0,5,7,11,6,9,12,10,2],[0,0,5,8,11,12,2],[0,0,8,11,6,2],[0,0,2,7,6,3],[0,0,1,2,7,6,4],[0,0,1,2,7,8,4],[0,0,2,5,7,3],[0,0,5,7,8,6,2],[0,0,5,7,6,9,12,10,2],[0,0,5,8,12,2],[1,0,7,2,3,4,9,2],[1,0,2,8,9,2],[3,0,1,6,3,4,5,2],[3,0,2,1,4,5,2],[4,1,2,1],[5,0,2],[2,0,4,8,5,6,7,2],[2,1,0,4,8,5,6,7,3],[2,3,1,4,8,5,6,7,3],[24,0,2],[26,0,1,2,3],[27,0,1,2,2],[28,0,1,2,3,1],[29,0,1,2,2],[30,0,1,2,3,4],[31,1],[32,0,1,2,3,4,5],[9,0,1,2],[34,0,1,2,2],[35,0,2],[36,0,1,2,3,3]],[[[[29,"boss6"],[76,"boss6",[-3,-4],[[40,-2,[4,"78EAofv+5YXJiSWDbn6Tya"],[6,7,8,9,10,11,12,13],14]],[0,"245Yv8agVeYq9cWl0ZBUPZ",-1,0]],[34,"Bip001 Head",[[-5,-6,-7,-8,-9,-10,[5,"Bone007",-11,[0,"dcmwlMtTVZVbc6T+PccMIg",1,0],[1,0.0956023633480072,0.12942540645599365,-9.5367431640625e-7],[3,0.6642478003136091,0.7475124479083683,6.432043062815209e-7,-3.9601723583416683e-7],[1,-0.0007251375086017797,-179.99929492648727,83.24928906684539]],[5,"Bone005",-12,[0,"b95DAr8V9SwqTN5mKmjcqL",1,0],[1,-0.0930052399635315,0.10958009958267212,-0.003370940685272217],[3,0.00247570588927285,0.007111087792706792,0.7645808931373531,0.6444837943346922],[1,-177.39983988905027,178.17946959202948,80.24970939211052]]],1,1,1,1,1,1,4,4],[0,"78h1xKQdRbnbxLVS2g/XjQ",1,0],[1,0.16335639357566833,0.17583587765693665,3.739465341823234e-7],[3,-1.4175854443872373e-12,0.0000017235588460672598,-0.6214162682430924,0.7834805814823099],[1,0.0005390500370127272,0.0006796336376706798,-76.83926360817195]],[46,"Bip001",1,[[[5,"Bip001 Footsteps",-13,[0,"266uUBTDZY3oX0r6u+3pV/",1,0],[1,0.4574396014213562,2.6514157980273012e-8,0.06755730509757996],[3,0.5352802354667735,0.5352808315132299,-0.4620329805038509,-0.4620335765503073],[1,0,261.59902737165976,90]],-14,-15],4,1,1],[0,"af8xzQc8lSnIeGf7qHP0SX",1,0],[1,1.5570623679295181e-9,0.46309894323349,-0.37241342663764954],[3,0.051792989042485416,0.05179428544347489,-0.7052073887689745,0.7052073291643313],[1,89.99998030412306,90.00008563244148,-81.59895818802698]],[33,"Bip001 Spine",[-16,-17,-18],[0,"86eczDFshWEIbsb8RFPUbw",1,0],[1,0.14668461680412292,-0.013152211904525757,3.3799219067986996e-7],[3,-0.0000021155107689024903,-7.308525859648163e-7,0.055557338928777365,0.9984554983003215],[1,-0.0002388669400668429,-0.00007058774859317801,6.369681749232537]],[33,"Bip001 Neck",[-19,-20,2],[0,"e6mUJTVZxWjY6bJ+311lKK",1,0],[1,0.30649664998054504,-0.00008565187454223633,-2.375486474193167e-10],[3,1.1286258459356208e-13,2.0348812411334897e-7,-0.07336608191833469,0.9973050777088778],[1,0.0000017293818444764087,0.00002350825226859191,-8.41469404778058]],[77,"Bip001 Pelvis",3,[4],[0,"84cXrPr+tUOrnOFNi/Z6O8",1,0],[3,-0.511529265823001,-0.48819780253218104,-0.48819783233450337,0.511530636729828],[1,-89.99992130877622,-87.32609176256011,-0.00007844004225240557]],[2,"Bip001 Spine1",4,[5],[0,"7b8iS5sr1VUps/q+baYzow",1,0],[1,0.21191680431365967,-0.00022965669631958008,-6.369305083353538e-10],[3,-1.8509951574581006e-14,4.752658296781009e-7,-0.1713533827261281,0.98520963161557],[1,0.00000991436267515794,0.00005700341344059086,-19.733033816830623]],[2,"Bip001 L Clavicle",5,[-21],[0,"29sirZ2qhYBK178TefVDWk",1,0],[1,-0.1328164041042328,-0.01816803216934204,0.20773044228553772],[3,0.7594443592128258,0.27307552216023084,0.393846334711378,0.4399535078745831],[1,135.66239403203843,-33.506833096504295,49.580659071182936]],[2,"Bip001 L UpperArm",8,[-22],[0,"11hBmUavtdeYL+dFcVrTIV",1,0],[1,0.11807142198085785,5.551115123125783e-17,-5.551115123125783e-17],[3,-0.5581935721874898,0.3567414631449781,0.29753360566542325,0.6874803400399768],[1,-78.47478832743603,55.357655134097875,0.6208362975304413]],[2,"Bip001 L Forearm",9,[-23],[0,"7crmOw0ghdII0VCctnfSW/",1,0],[1,0.20234543085098267,7.450580596923828e-9,-5.960464477539063e-8],[3,4.1105820865388645e-17,-2.5876146911705188e-17,-0.532735170870198,0.846282008386035],[1,5.565969617135596e-15,-2.849632967861876e-22,-64.38089252342168]],[7,"Bip001 L Hand",10,[[5,"Bip001 L Finger0",-24,[0,"14tWRjcsNcsbK+jme8FYxi",1,0],[1,0.13357096910476685,0,0],[3,-0.0003981590774791899,9.314810961498381e-10,-3.979878293060286e-10,0.9999999207346713],[1,-0.045625670634271066,1.0672170408930317e-7,-4.564854166721077e-8]]],[0,"9do5gvr8Nf8KJuZlkHCkLL",1,0],[1,0.20090362429618835,7.450580596923828e-9,2.9802322387695312e-8],[3,0.811427361257593,-0.23936222683768146,0.23529224284615657,-0.47846517346853057],[1,-122.78404165556542,-11.157297408786155,-37.850874170336354]],[2,"Bip001 R Clavicle",5,[-25],[0,"0a6N5WsN9ZhY8mapexjQhV",1,0],[1,-0.1328164041042328,-0.01816686987876892,-0.20773053169250488],[3,0.7594431166182719,0.2730766281193706,-0.3938455943741074,-0.43995562911296743],[1,-135.66198384871691,33.506523088347244,49.58083763097152]],[2,"Bip001 R UpperArm",12,[-26],[0,"3ck0+8Zd9Rup3TcAO1RvB0",1,0],[1,0.11807137727737427,5.551115123125783e-17,5.551115123125783e-17],[3,0.5581939284326489,-0.35674092581947686,0.29753262145174614,0.6874807555695224],[1,78.47476644000193,-55.35752047944453,0.6207927330441062]],[2,"Bip001 R Forearm",13,[-27],[0,"bbgWCOaHVbXKFpCMGUWY+S",1,0],[1,0.20234538614749908,2.2351741790771484e-8,-5.551115123125783e-17],[3,2.8304297311570027e-18,-3.457883050462242e-17,-0.5327347645613908,0.8462822641576033],[1,-4.247221074652421e-15,-7.355801580301129e-15,-64.38083750682891]],[7,"Bip001 R Hand",14,[[5,"Bip001 R Finger0",-28,[0,"fc7frKPJBQV7o0Ji41A5Fv",1,0],[1,0.13357096910476685,2.9802322387695312e-8,0],[3,0.00039815901927153937,-8.61871321241976e-14,-2.1645972088842764e-10,0.9999999207346946],[1,0.04562566396416517,-1.9882916862475588e-16,-2.4804458849185554e-8]]],[0,"c7NeP0BlNa1ray2TWnnyI0",1,0],[1,0.20090365409851074,-2.9802322387695312e-8,-2.9802322387695312e-8],[3,0.8114273168966605,-0.2393617992007247,-0.23529196414435583,0.4784655996896431],[1,122.78397821222961,11.157268898356646,-37.850817473636816]],[2,"Bone017",2,[-29],[0,"63uErD+Gxe2oUY7nPHOFgy",1,0],[1,0.09354469180107117,0.17936384677886963,0.16122904419898987],[3,0.32323616942219435,0.714442555537385,0.5918265617590828,-0.186632083016023],[1,-84.64838701279989,-138.01107676021047,13.943189652836999]],[2,"Bone018",16,[-30],[0,"25XSqyejpXGJR55sN5CLmH",1,0],[1,0.0894061028957367,-5.960464477539063e-8,5.960464477539063e-8],[3,-0.005953594484820655,0.04717167766714888,0.1250760237969503,0.9910072531570703],[1,-1.3956919095069988,5.6257515487363365,14.320210721377876]],[2,"Bone019",17,[-31],[0,"25P19DJ/5TorNFwYhXq83c",1,0],[1,0.08542737364768982,0,5.960464477539063e-8],[3,-0.02863369861057258,0.10418748778999357,0.26345130607529615,0.9586023617846503],[1,-7.279196867448414,14.354844059560362,29.942030938980942]],[2,"Bone020",18,[-32],[0,"62+IVFpjBQFqd10zpiHj68",1,0],[1,0.09185284376144409,1.4901161193847656e-8,0],[3,-0.010291009160686659,0.0720803957700279,0.14096289805506723,0.9873337698306524],[1,-2.4241126918029634,8.693276463426965,16.073562460976376]],[2,"Bone021",19,[-33],[0,"62f2NBnAlQQKb6d/uvcjhJ",1,0],[1,0.13862258195877075,2.980232238769531e-7,-5.960464477539063e-8],[3,-0.023773081266758353,0.12647828282093082,0.1831908200282895,0.9746174675425818],[1,-5.680359651787899,15.818846578434213,20.55267649504616]],[2,"Bone022",20,[-34],[0,"2fXXiuKOtfJJ3h8JBf0n1+",1,0],[1,0.10976824164390564,1.4901161193847656e-7,2.220446049250313e-16],[3,-3.3101074831424456e-8,4.23599940618883e-8,0.406236660212956,0.9137679004534031],[1,-0.000008116995702380664,0.000008920776250669513,47.93729174686282]],[2,"Bone023",21,[-35],[0,"b7n6p6hP5TYKUntholRd/4",1,0],[1,0.11620354652404785,5.960464477539063e-8,0],[3,-1.5264778028489758e-8,-6.674001857888186e-9,-0.05145303580456597,0.9986754152909211],[1,-0.0000017957564268615277,-8.583183128792745e-7,-5.898688256956295]],[7,"Bone024",22,[[13,"Bone025",-36,[0,"820gB0IphWfKP4tz6zVVUb",1,0],[1,0.18311381340026855,5.551115123125783e-17,-5.960464477539063e-8]]],[0,"c1g0xk6AJfw5ovHiFh8Jlp",1,0],[1,0.1324220597743988,-7.450580596923828e-8,5.960464477539063e-8],[3,-5.032572992920989e-9,9.25718962251241e-9,-0.28350916324274456,0.9589695273351488],[1,-3.0060726762267984e-7,0.0000010173116541535162,-32.93950938970954]],[2,"Bone026",2,[-37],[0,"d8GiX/ld9cN7eqm4qjDnuA",1,0],[1,0.09931075572967529,0.2027861475944519,-0.1573445200920105],[3,-0.22136716734420972,0.639513498067204,0.7005626023274961,0.22634288862691354],[1,-94.56722971905008,143.12947991791944,1.9484402257689042]],[2,"Bone027",24,[-38],[0,"5cbPxD5MpTSprBteZpGcD7",1,0],[1,0.08830928802490234,-5.551115123125783e-17,0],[3,-4.830234725321974e-8,-2.2966895700497602e-7,-0.20581050320345318,0.9785918642473411],[1,-0.000011835770976462813,-0.000029383086937570945,-23.753898486441795]],[2,"Bone028",25,[-39],[0,"a1aug4lRlSmaEfIliU1jAi",1,0],[1,0.1135212630033493,2.9802322387695312e-8,-1.1102230246251565e-16],[3,0.017142263731491143,0.05895200592631368,-0.2786915230589894,0.9584163180823271],[1,4.451937253241868,8.323241378919644,-32.15312889177981]],[2,"Bone029",26,[-40],[0,"e0dg4D009QiZIX0Sz90tPh",1,0],[1,0.12703776359558105,1.4901161193847656e-8,-1.1102230246251565e-16],[3,0.025641634600589616,0.17525469942596816,-0.1424804304327266,0.9738211457181593],[1,5.951659749635303,21.218889377277403,-15.575817374579646]],[2,"Bone030",27,[-41],[0,"79hGJus2lQ24ZCdc34aJii",1,0],[1,0.13340122997760773,-1.2665987014770508e-7,5.960464477539063e-8],[3,0.017550781711122596,0.05263558877727887,-0.31583127994700083,0.947191674088427],[1,4.75217038602087,7.93452672948979,-36.616634275042586]],[2,"Bone031",28,[-42],[0,"a0V2g3k19Tg6vMvCg575eX",1,0],[1,0.14577534794807434,-2.9802322387695312e-8,-1.1102230246251565e-16],[3,0.005296626998646042,0.010879782834656881,-0.3011106814076704,0.953512419221751],[1,1.1653990422470393,1.6753356981560867,-35.037349481800014]],[2,"Bone032",29,[-43],[0,"beM4nHcQxUJ6WvKMhXYQSC",1,0],[1,0.10098545253276825,-5.551115123125783e-17,-2.220446049250313e-16],[3,-2.7016276701550944e-17,-6.363422785917445e-18,0.22926640829502423,0.9733637110697619],[1,-3.180555457708791e-15,-1.1926547435736466e-23,26.507771990206926]],[7,"Bone033",30,[[13,"Bone034",-44,[0,"9dhKLGBWxd0qeCk/BC/WZQ",1,0],[1,0.16186827421188354,-1.7881393432617188e-7,0]]],[0,"d1tNFPC2tTg43iZiakdfiB",1,0],[1,0.11342853307723999,-2.9802322387695312e-8,0],[3,-8.851206789123249e-9,-2.5363373367332993e-8,0.24957409248933168,0.9683557054915957],[1,-2.933525990645299e-7,-0.0000029258001698829904,28.90462122614092]],[7,"Bone009",2,[[13,"Bone010",-45,[0,"70fKDUotZSXYv7O0aTS68x",1,0],[1,0.17895835638046265,2.9802322387695312e-8,-2.9802322387695312e-8]]],[0,"159i0no2NUxaNLa0Xl6ipT",1,0],[1,0.22022360563278198,0.005319476127624512,-0.17666734755039215],[3,0.7611089404897601,0.6486240673194303,4.6041774110714924e-7,-5.847235272441729e-7],[1,-179.9994625901816,-0.000527305498108972,80.87588519928477]],[7,"Bone011",2,[[13,"Bone012",-46,[0,"49bETlyoxYYLZ/G64g0xKV",1,0],[1,0.17895829677581787,5.960464477539063e-8,-2.9802322387695312e-8]]],[0,"36lFPJ8Jhc9KTs3jDG2431",1,0],[1,0.2319616973400116,0.006875097751617432,0.1875065714120865],[3,0.7611089404897601,0.6486240673194303,4.6041774110714924e-7,-5.847235272441729e-7],[1,-179.9994625901816,-0.000527305498108972,80.87588519928477]],[7,"Bone015",2,[[13,"Bone016",-47,[0,"b4nEJHJeZWPYCp0ptGkS+6",1,0],[1,0.17351189255714417,2.9802322387695312e-8,1.1920928955078125e-7]]],[0,"71dNYdHo1ZDI6w+DRRKP17",1,0],[1,0.3795022666454315,0.14456093311309814,0.08320260047912598],[3,0.5818556519152173,0.3296541555746321,0.5771169634690979,-0.46873035801290025],[1,-110.33891725204025,-83.22335488297229,-9.056143497394824]],[7,"Bone013",2,[[13,"Bone014",-48,[0,"6afxUghH5d1rwY3F/NaI2P",1,0],[1,0.17351192235946655,-2.9802322387695312e-8,0]]],[0,"a8HC+xy0lQ5qwtH34hcTIs",1,0],[1,0.3720783293247223,0.12988996505737305,-0.0706491470336914],[3,-0.4649944379133652,0.5643185466580161,0.34206283634757473,0.5901845191101428],[1,-70.36558908555739,82.52859443304158,-6.952681239467075]],[2,"Bip001 L Thigh",4,[-49],[0,"6cwwMBlARXA5MB+hgSKG+b",1,0],[1,-0.14431995153427124,0.029343903064727783,0.2683071196079254],[3,0.856678122191703,0.49455383070683007,0.0961088754899028,-0.1108250312130068],[1,-149.63045511713804,-29.1215870066513,55.69451623509838]],[2,"Bip001 L Calf",36,[-50],[0,"8dY1F++29bdppv5Fdd0sP/",1,0],[1,0.2427184283733368,-5.960464477539063e-8,5.960464477539063e-8],[3,-8.4569597479239e-18,3.7906123959601296e-17,-0.2898767887045215,0.9570639724544824],[1,3.986536570402512e-16,4.6593356467506035e-15,-33.701159374156944]],[7,"Bip001 L Foot",37,[[5,"Bip001 L Toe0",-51,[0,"a1Mew1fupaTJt4rb6Xlxl9",1,0],[1,0.059639252722263336,0.1332966685295105,-2.9802322387695312e-8],[3,4.67167484104505e-7,-4.1839222238581423e-7,0.7071067513840863,0.7071068109887295],[1,0,0.0000757077283062851,90]]],[0,"15ihgIMQVcO7ZVza0vfhzN",1,0],[1,0.19707894325256348,2.9802322387695312e-8,-2.9802322387695312e-8],[3,0.009562570580686552,-0.1463804837824634,0.18693599063799296,0.9713579394927976],[1,4.507230321753258,-17.98037905067554,21.122550342107672]],[2,"Bip001 R Thigh",4,[-52],[0,"80n080AoRYJ7LcaPALt4wr",1,0],[1,-0.14431989192962646,0.02934536337852478,-0.2683071792125702],[3,0.8566774641397714,0.49455564726248774,-0.09610776508405912,0.11082297454219452],[1,149.63070485578353,29.121418576528693,55.69483168215153]],[2,"Bip001 R Calf",39,[-53],[0,"bcm9PYOKxRNqbusyhbBU2J",1,0],[1,0.24271848797798157,-2.9802322387695312e-8,2.9802322387695312e-8],[3,-4.885191431370684e-18,3.7730517196202576e-17,-0.2898732152825272,0.9570650547699302],[1,8.624693672339755e-16,4.778782313850775e-15,-33.70073152003471]],[7,"Bip001 R Foot",40,[[5,"Bip001 R Toe0",-54,[0,"beUqbyOdlUR5j0lBSaZYBK",1,0],[1,0.059639252722263336,0.1332966387271881,-2.9802322387695312e-8],[3,4.985738627344497e-7,-3.869935833628038e-7,0.7071067215817584,0.70710684079105],[1,0,0.00008079734620656956,90]]],[0,"d7NLj69vRdRKl1UT/iE3JZ",1,0],[1,0.19707903265953064,0,2.9802322387695312e-8],[3,-0.00956253076264824,0.14638100882601607,0.18693422187316922,0.9713582011560741],[1,-4.5071998122357435,17.98042102411691,21.122345389320657]],[2,"Bone001",3,[-55],[0,"ees7eKxmZbo4WU1jeJJVsD",1,0],[1,-0.13027825951576233,1.4901158351676713e-7,-0.11454129219055176],[3,0.3957594361186745,0.5859821477445576,-0.5859815516981058,0.3957587804675776],[1,89.99998971053643,111.93156683099862,0.00007105713194520409]],[2,"Bone002",42,[-56],[0,"95toe8OgVe4pGsmyuv+XHL",1,0],[1,0.14326822757720947,2.086162567138672e-7,-1.1533273891473073e-8],[3,1.6801978259388326e-8,1.3109239036896888e-7,-0.12712904647615197,0.9918861857804285],[1,0.000003947069154315532,0.000015650856670209398,-14.607444408343593]],[7,"Bone003",43,[[13,"Bone004",-57,[0,"178XpjMM5cX5E/JEzuWM4K",1,0],[1,0.15342426300048828,8.940696716308594e-8,2.168164314753085e-8]]],[0,"a06ouXw2hd8o6cIfagTSPQ",1,0],[1,0.15200144052505493,0,2.842170943040401e-14],[3,1.8537198792125914e-14,2.5809179787853055e-14,-0.15854386670571585,0.987351934383075],[1,2.7020746859673954e-12,3.4292853439672187e-12,-18.244774282948935]],[17,"boss6_monster_nian",1,[[41,-58,[4,"45h0SuguNbOpbzpdAy0J/E"],[0,1,2,3],[1],1,4,5]],[0,"8dKCuLa4NWXKs5hHbS8u+G",1,0],[1,0,0,-0.07273124158382416],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,1,1,0,-1,3,0,-2,45,0,-1,16,0,-2,24,0,-3,32,0,-4,33,0,-5,34,0,-6,35,0,0,2,0,0,2,0,0,3,0,-2,6,0,-3,42,0,-1,7,0,-2,36,0,-3,39,0,-1,8,0,-2,12,0,-1,9,0,-1,10,0,-1,11,0,0,11,0,-1,13,0,-1,14,0,-1,15,0,0,15,0,-1,17,0,-1,18,0,-1,19,0,-1,20,0,-1,21,0,-1,22,0,-1,23,0,0,23,0,-1,25,0,-1,26,0,-1,27,0,-1,28,0,-1,29,0,-1,30,0,-1,31,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,-1,37,0,-1,38,0,0,38,0,-1,40,0,-1,41,0,0,41,0,-1,43,0,-1,44,0,0,44,0,1,45,0,11,1,2,0,5,4,0,6,5,0,7,58],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,2,5,-1,-2,-3,-4,-5,-6,-7,-8,12],[10,10,10,10,123,124,49,125,126,127,128,129,130,131,49]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[18,18,18,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":0.6,"metallic":0.1},"emissive",8,[4,4286479998],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[19,19,19,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[20,20,20,1]],[[[6,".bin",4005007383,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.08205167949199677,-1.3367921880558242e-8,-0.0820518359541893],"maxPosition",8,[1,0.08205167949199677,0.7300921082496643,0.08205171674489975]]],-1],0,0,[],[],[]],[[[6,".bin",4094896171,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[71,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{},"tilingOffset",8,[2,1,4,0,0],"mainColor",8,[4,4289526271],"mainTexture",6,0]],11]]],0,0,[0,0],[6,4],[4,50]],[[[6,".bin",2075526639,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":55152,"length":7014,"count":3507,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":127614,"length":7998,"count":3999,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":231012,"length":11688,"count":5844,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[3],"indexView":{"offset":256452,"length":1656,"count":828,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":55152,"count":766,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":62166,"length":65448,"count":909,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":135612,"length":95400,"count":1325,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":242700,"length":13752,"count":191,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,19,20,21,22,23,25,29],[0,1,2,3,6,7,9,12,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],[0,1,2,3,4,5,7,8,11,13,21,22,23,25,26,27,34,35,36,41,42,43,44,45,46,47,48],[0,1,3,12,29,40,49,50,51,52,53,54,55]]},"minPosition",8,[1,-0.7951596975326538,-0.8466548919677734,-0.004192620515823364],"maxPosition",8,[1,0.7951596975326538,0.7305346727371216,1.2167668342590332]]],-1],0,0,[],[],[]],[[[18,"Skin-0",1101573469,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone011","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone009","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone015/Bone016","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone015","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone005","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone007","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Footsteps","Bip001/Bone001","Bip001/Bone001/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone009/Bone010","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013/Bone014","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bone001/Bone002/Bone003","Bip001/Bone001/Bone002/Bone003/Bone004","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone011/Bone012","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019/Bone020/Bone021/Bone022/Bone023/Bone024","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019/Bone020/Bone021/Bone022/Bone023/Bone024/Bone025","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019/Bone020/Bone021/Bone022/Bone023","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019/Bone020/Bone021/Bone022","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019/Bone020/Bone021","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019/Bone020","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018/Bone019","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone017/Bone018","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028/Bone029/Bone030/Bone031/Bone032/Bone033","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028/Bone029/Bone030/Bone031/Bone032/Bone033/Bone034","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028/Bone029/Bone030/Bone031/Bone032","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028/Bone029/Bone030/Bone031","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028/Bone029/Bone030","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028/Bone029","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone026/Bone027/Bone028"],[[[7,0.00000121008474707196,-0.000002406707153568277,1,0,-0.9498758912086487,-0.31262701749801636,3.9702871390545624e-7,0,0.31262701749801636,-0.9498759508132935,-0.0000026643785986379953,0,-0.5276891589164734,0.32123228907585144,4.462129652438307e-7,1],[7,-1.9057640088249173e-7,-0.0000011093304692622041,1,0,0.13142666220664978,-0.9913260340690613,-0.000001074660985977971,0,0.9913260340690613,0.13142666220664978,3.347188339830609e-7,0,-0.2707807421684265,-0.6521978378295898,-0.0000018986502254847437,1],[7,-1.56068566070644e-7,-1.1616867112707041e-7,-1,0,-0.9579420685768127,0.28696179389953613,1.1616867112707041e-7,0,0.28696179389953613,0.9579420685768127,-1.56068566070644e-7,0,-0.7304556965827942,-0.3918696939945221,0.18750779330730438,1],[7,-1.56068566070644e-7,-1.1616867112707041e-7,-1,0,-0.9579420685768127,0.28696179389953613,1.1616867112707041e-7,0,0.28696179389953613,0.9579420685768127,-1.56068566070644e-7,0,-0.7270578742027283,-0.38052693009376526,-0.17666609585285187,1],[7,0.9806356430053711,-0.1649683713912964,0.10554264485836029,0,0.17135021090507507,0.4617864191532135,-0.8702829480171204,0,0.09483100473880768,0.871515154838562,0.4811115860939026,0,-0.20547032356262207,-0.3140760362148285,-0.9823186993598938,1],[7,0.9806356430053711,-0.1649683713912964,0.10554264485836029,0,0.17135021090507507,0.4617864191532135,-0.8702829480171204,0,0.09483100473880768,0.871515154838562,0.4811115860939026,0,-0.031958404928445816,-0.3140760660171509,-0.9823187589645386,1],[7,0.0000012786906609107973,-0.000002910769126174273,1,0,-0.9965001940727234,0.08359060436487198,0.0000015175284033830394,0,-0.08359060436487198,-0.9965001940727234,-0.00000279369555755693,0,0.15077313780784607,0.43410468101501465,7.643604362783663e-7,1],[7,0.0000012659500043810112,-0.0000026272546165273525,1,0,-0.9904271364212036,-0.1380361020565033,8.911753184293048e-7,0,0.1380361020565033,-0.9904271364212036,-0.00000277685148830642,0,-0.1553734689950943,0.4101886451244354,6.969063974793244e-7,1],[7,0.3338143527507782,0.16848701238632202,0.9274590015411377,0,-0.0338580422103405,0.9854045510292053,-0.16682744026184082,0,-0.9420306086540222,0.024287443608045578,0.3346468508243561,0,0.275762677192688,0.3082655072212219,-0.41944554448127747,1],[7,-1.0669555905451489e-7,0.0000012747298114845762,1,0,-0.9979443550109863,0.06408664584159851,-1.8816938052168553e-7,0,-0.06408664584159851,-0.9979443550109863,0.0000012652716350203264,0,0.2889239490032196,0.42381706833839417,-5.109823746352049e-7,1],[7,0.298186331987381,-0.06523064523935318,-0.9522761702537537,0,-0.22633224725723267,-0.9740412831306458,-0.004149867221713066,0,-0.9272857308387756,0.21676820516586304,-0.30520957708358765,0,0.38846689462661743,0.1761966347694397,0.3913247287273407,1],[7,0.6492751836776733,0.7249994277954102,-0.2298208624124527,0,-0.3336781859397888,-2.475276801305881e-7,-0.9426870346069336,0,-0.6834475994110107,0.6887495517730713,0.24191632866859436,0,-0.04224151372909546,-0.44091713428497314,-0.808721661567688,1],[7,-0.00538150267675519,0.014065600000321865,0.9998865723609924,0,-0.9992528557777405,0.03819378465414047,-0.005915370769798756,0,-0.03827265650033951,-0.9991713166236877,0.013849550858139992,0,-0.7207003235816956,0.30412015318870544,-0.004786642733961344,1],[7,-1.629047545748108e-7,-4.143291576497177e-8,-1,0,-0.9999021887779236,0.013985177502036095,1.623093766056627e-7,0,0.013985177502036095,0.9999021887779236,-4.370711437218233e-8,0,-0.7331357598304749,-0.4557226002216339,1.0972774333595225e-7,1],[7,0.31586766242980957,0.8833412528038025,-0.3463175594806671,0,-0.8143261075019836,0.06507252901792526,-0.5767481327056885,0,-0.486929714679718,0.46419161558151245,0.7398820519447327,0,-0.06487268209457397,-0.37499669194221497,-0.41583186388015747,1],[7,0.25136393308639526,0.1731654405593872,-0.9522761702537537,0,0.5565993189811707,-0.8307706713676453,-0.00414980947971344,0,-0.7918416857719421,-0.5289931893348694,-0.30520957708358765,0,-0.02907649613916874,0.22680923342704773,0.3913247287273407,1],[7,3.6815308135373925e-8,0.000005910971594857983,-1,0,-0.011269748210906982,-0.9999365210533142,-0.0000059110107031301595,0,-0.9999365210533142,0.011269748210906982,2.9802187384575518e-8,0,0.06389382481575012,0.3152260184288025,0.3902229070663452,1],[7,0.0000012809709915018175,5.907837064000887e-8,-1,0,-0.9999365210533142,0.01126977801322937,-0.0000012802237279174733,0,0.01126977801322937,0.9999365210533142,7.351087560891756e-8,0,0.18193121254444122,-0.004254620522260666,0.3902214467525482,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-1.5570623679295181e-9,-0.2611690163612366,-0.0006979666650295258,1],[7,-1.5004462738943403e-7,-7.540526070215492e-8,-1,0,0.9209673404693604,0.3896397650241852,-1.6756709442233841e-7,0,0.3896397650241852,-0.9209673404693604,1.0982425635575055e-8,0,-0.5674499869346619,0.38287922739982605,7.57735136858173e-8,1],[7,1.3815170518682862e-7,-1.108084219936245e-7,-1,0,0.7929332852363586,0.6093087196350098,4.202853176593635e-8,0,0.6093087196350098,-0.7929332852363586,1.72040671486684e-7,0,-0.7843055129051208,0.19126342236995697,-1.2000823801372462e-7,1],[7,0.30351129174232483,0.21840502321720123,0.9274590611457825,0,-0.1868661493062973,0.9681165218353271,-0.16682738065719604,0,-0.9343243837356567,-0.12267667800188065,0.3346468210220337,0,0.02452707663178444,0.31593695282936096,-0.4194455146789551,1],[7,-0.019154444336891174,-0.9998143911361694,0.0020655393600463867,0,-0.9996225237846375,0.019191384315490723,0.019659586250782013,0,-0.019695578143000603,-0.0016881913179531693,-0.9998045563697815,0,-0.4012059271335602,0.38134878873825073,0.02159367874264717,1],[7,-0.019154444336891174,-0.9998157620429993,0.001269368571229279,0,-0.9996225237846375,0.01917572319507599,0.019674861803650856,0,-0.019695578143000603,-0.0008920284453779459,-0.9998056292533875,0,-0.5347768664360046,0.38133150339126587,0.021897345781326294,1],[7,-1.56068566070644e-7,-1.1616867112707041e-7,-1,0,-0.9579420685768127,0.28696179389953613,1.1616867112707041e-7,0,0.28696179389953613,0.9579420685768127,-1.56068566070644e-7,0,-0.9060162305831909,-0.38052693009376526,-0.17666608095169067,1],[7,-0.9842185974121094,-0.16280071437358856,-0.0693521499633789,0,0.13696512579917908,-0.45269131660461426,-0.881085216999054,0,0.11204618215560913,-0.8766793012619019,0.46784520149230957,0,-0.05783785879611969,0.32457640767097473,-0.9598044753074646,1],[7,-0.9842185974121094,-0.16280071437358856,-0.0693521499633789,0,0.13696512579917908,-0.45269131660461426,-0.881085216999054,0,0.11204618215560913,-0.8766793012619019,0.46784520149230957,0,-0.23134978115558624,0.3245764374732971,-0.9598044753074646,1],[7,-0.33381423354148865,-0.16848964989185333,0.9274584650993347,0,-0.03385892137885094,0.9854041337966919,0.166829913854599,0,-0.942030668258667,0.024287452921271324,-0.3346467912197113,0,0.27576300501823425,0.30826565623283386,0.4194447100162506,1],[7,-0.29818567633628845,0.06523346900939941,-0.9522761702537537,0,-0.22633308172225952,-0.9740411639213562,0.004147105850279331,0,-0.9272857308387756,0.21676819026470184,0.30520957708358765,0,0.38846713304519653,0.17619667947292328,-0.3913240134716034,1],[7,-0.5996618866920471,0.7958288192749023,0.08403666317462921,0,-0.13878393173217773,-2.2678985800439477e-8,-0.9903226494789124,0,-0.7881273031234741,-0.6055217385292053,0.11044825613498688,0,0.17247770726680756,0.4154141843318939,-0.8309056162834167,1],[7,-0.31586557626724243,-0.883341372013092,-0.3463190495967865,0,-0.8143268823623657,0.0650702565908432,0.5767472982406616,0,-0.48692968487739563,0.46419158577919006,-0.7398821115493774,0,-0.06487239897251129,-0.3749958574771881,0.4158322215080261,1],[7,-0.25136545300483704,-0.1731632649898529,-0.9522761702537537,0,0.5565986633300781,-0.8307711482048035,0.004147308878600597,0,-0.7918417453765869,-0.5289931297302246,0.30520960688591003,0,-0.029076306149363518,0.2268093228340149,-0.39132407307624817,1],[7,3.6815308135373925e-8,0.000005910971594857983,-1,0,-0.011269748210906982,-0.9999365210533142,-0.0000059110107031301595,0,-0.9999365210533142,0.011269748210906982,2.9802187384575518e-8,0,0.06389383971691132,0.315229594707489,-0.3902193009853363,1],[7,0.0000012809709915018175,-2.8344407709823827e-8,-1,0,-0.9999365210533142,0.01126977801322937,-0.0000012812090517400065,0,0.01126977801322937,0.9999365210533142,-1.3906348961256754e-8,0,0.18193115293979645,-0.004254596307873726,-0.3902207612991333,1],[7,-0.30351078510284424,-0.21840770542621613,0.9274584650993347,0,-0.18686695396900177,0.9681159853935242,0.1668299287557602,0,-0.9343244433403015,-0.12267665565013885,-0.3346467614173889,0,0.02452738769352436,0.3159371018409729,0.4194447100162506,1],[7,0.019156992435455322,0.9998143315315247,0.0020656492561101913,0,-0.9996224641799927,0.01919393241405487,-0.019659588113427162,0,-0.0196955855935812,-0.001688250806182623,0.9998045563697815,0,-0.40120595693588257,0.3813478648662567,-0.021593689918518066,1],[7,0.019156992435455322,0.9998156428337097,0.0012694784672930837,0,-0.9996224641799927,0.019178271293640137,-0.019674865528941154,0,-0.0196955855935812,-0.0008920879336073995,0.9998056292533875,0,-0.5347769260406494,0.38133054971694946,-0.02189735881984234,1],[7,1.6589802953603794e-7,-6.198565216664065e-8,-1,0,0.5623098015785217,0.8269264101982117,4.202853176593635e-8,0,0.8269264101982117,-0.5623098015785217,1.72040671486684e-7,0,-0.9491164684295654,-0.11148816347122192,-1.2000826643543405e-7,1],[7,1.6589802953603794e-7,-6.198565216664065e-8,-1,0,0.5623098015785217,0.8269264101982117,4.202853176593635e-8,0,0.8269264101982117,-0.5623098015785217,1.72040671486684e-7,0,-1.1025406122207642,-0.11148817837238312,-1.4168996642638376e-7,1],[7,-1.56068566070644e-7,-1.1616867112707041e-7,-1,0,-0.9579420685768127,0.28696179389953613,1.1616867112707041e-7,0,0.28696179389953613,0.9579420685768127,-1.56068566070644e-7,0,-0.9094140529632568,-0.3918697237968445,0.18750782310962677,1],[7,-0.8694278001785278,0.4868602156639099,0.08403707295656204,0,-0.12702716886997223,-0.05590342357754707,-0.9903225898742676,0,-0.47745072841644287,-0.871688961982727,0.11044848710298538,0,-0.09029490500688553,0.4141256809234619,-0.8309056162834167,1],[7,0.6209304928779602,-0.6736570000648499,0.40078920125961304,0,0.5285274982452393,-0.017788035795092583,-0.8487299680709839,0,0.578882098197937,0.7388303875923157,0.3450010120868683,0,-0.43712756037712097,-0.08217376470565796,-1.0072400569915771,1],[7,0.6209304332733154,-0.6736570596694946,0.40078920125961304,0,0.5285274386405945,-0.017788169905543327,-0.8487299680709839,0,0.5788821578025818,0.7388303279876709,0.34500086307525635,0,-0.6202414035797119,-0.08217383921146393,-1.0072399377822876,1],[7,0.1548096090555191,-0.9029960632324219,0.4007892608642578,0,0.43389174342155457,-0.3023170530796051,-0.8487299084663391,0,0.8875651359558105,0.30529066920280457,0.3450010120868683,0,-0.2791171967983246,0.16872546076774597,-1.0072400569915771,1],[7,0.06118923798203468,-0.9141247272491455,0.4007892906665802,0,0.40052539110183716,-0.3453073501586914,-0.8487299084663391,0,0.9142404198646545,0.21245938539505005,0.3450010120868683,0,-0.14409594237804413,0.19651687145233154,-1.0072400569915771,1],[7,0.7196505665779114,-0.566984236240387,0.40078920125961304,0,0.5246896147727966,0.06601837277412415,-0.8487299680709839,0,0.45475706458091736,0.8210787773132324,0.3450009226799011,0,-0.13266445696353912,0.0246767345815897,-1.0072400569915771,1],[7,0.9495124220848083,-0.23849740624427795,0.2038256824016571,0,0.24686600267887115,0.16705551743507385,-0.9545416235923767,0,0.19360549747943878,0.9566667079925537,0.21749825775623322,0,-0.22940096259117126,-0.11693107336759567,-0.9400142431259155,1],[7,0.9970723390579224,0.04220801964402199,0.06376098096370697,0,0.05464642867445946,0.18993623554706573,-0.980274498462677,0,-0.05348596349358559,0.9808889031410217,0.18707361817359924,0,-0.2243955135345459,-0.2139785885810852,-0.8967300057411194,1],[7,0.8272222876548767,0.5409424304962158,-0.1519346982240677,0,-0.23221267759799957,0.0829068273305893,-0.9691252708435059,0,-0.5116445422172546,0.8369631171226501,0.1941961646080017,0,-0.15918368101119995,-0.3943805694580078,-0.8275833129882812,1],[7,-0.6904721260070801,-0.5955719947814941,-0.410538911819458,0,0.5283089876174927,-0.027531549334526062,-0.8486056923866272,0,0.49410298466682434,-0.8028299808502197,0.33365583419799805,0,-0.4669172763824463,0.15864522755146027,-1.0103249549865723,1],[7,-0.6904721856117249,-0.5955720543861389,-0.410538911819458,0,0.5283090472221375,-0.027531571686267853,-0.8486056923866272,0,0.49410301446914673,-0.8028301000595093,0.33365583419799805,0,-0.6287855505943298,0.15864534676074982,-1.0103249549865723,1],[7,-0.31658557057380676,-0.8551208972930908,-0.41053900122642517,0,0.47580277919769287,0.23125799000263214,-0.8486056327819824,0,0.8206007480621338,-0.4639919400215149,0.33365583419799805,0,-0.3720044195652008,-0.08680371940135956,-1.0103249549865723,1],[7,0.09835265576839447,-0.9065233469009399,-0.41053879261016846,0,0.3225685656070709,0.4193063974380493,-0.8486056923866272,0,0.9414223432540894,-0.04896429181098938,0.3336558938026428,0,-0.1931692659854889,-0.24371114373207092,-1.0103248357772827,1],[7,-0.4473671615123749,-0.7917165756225586,-0.41599008440971375,0,0.48992395401000977,0.17218972742557526,-0.854590654373169,0,0.7482227683067322,-0.5861194133758545,0.31084880232810974,0,-0.1700325608253479,-0.07177865505218506,-1.0062698125839233,1],[7,-0.8676578402519226,-0.3387850821018219,-0.3638613224029541,0,0.41707152128219604,-0.0976603776216507,-0.9036116003990173,0,0.2705953121185303,-0.9357818365097046,0.2260332703590393,0,-0.1340276598930359,0.1109151765704155,-0.9812349081039429,1],[7,-0.9977281093597412,-0.055263735353946686,-0.03853089362382889,0,0.044708721339702606,-0.1153019517660141,-0.9923238158226013,0,0.050396837294101715,-0.9917920231819153,0.11751075834035873,0,-0.28929778933525085,0.24026137590408325,-0.8729413151741028,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",1197879249,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1.0331604016755591e-7,-1],"maxPosition",8,[1,0.5,5.960464477539063e-8,0]]],-1],0,0,[],[],[]],[[[6,".bin",3458892269,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.20346546173095703,-3.5762786865234375e-7,-1],"maxPosition",8,[1,0.20346546173095703,0.7300922870635986,0]]],-1],0,0,[],[],[]],[[[72,"builtin-standard",[{"hash":3247695832,"name":"builtin-standard|standard-vs|standard-fs","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(location = 0) in float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse) * s.occlusion;\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse) * s.occlusion;\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 miscParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nvarying float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowWHPBInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse) * s.occlusion;\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, s.position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, s.position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, s.position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(s.position, s.roughness);\n    gl_FragData[2] = vec4(s.normal, s.metallic);\n    gl_FragData[3] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":220,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":63}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":1,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},{"hash":1783225275,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":63}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":3,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"deferred","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","blendState":{"targets":[{"blend":false},{"blend":false},{"blend":false},{"blend":false}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[6,".bin",1897687969,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2064,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2064,"count":43,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.17319728434085846,-0.17319728434085846,-0.17319728434085846],"maxPosition",8,[1,0.17319728434085846,0.17319728434085846,0.17319728434085846]]],-1],0,0,[],[],[]],[[[6,".bin",1551619621,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22944,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22944,"count":478,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23767006397247314,-3.87213709984735e-8,-0.23767006397247314],"maxPosition",8,[1,0.23767006397247314,0.044349487870931625,0.23767006397247314]]],-1],0,0,[],[],[]],[[[6,".bin",981553015,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2064,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2064,"count":43,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.17319728434085846,-0.17319728434085846,-0.17319728434085846],"maxPosition",8,[1,0.17319728434085846,0.17319728434085846,0.17319728434085846]]],-1],0,0,[],[],[]],[[[6,".bin",3731110781,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8304,"length":1764,"count":441,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8304,"count":173,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.278875470161438,-0.7656680345535278,-1.0442454367876053e-7],"maxPosition",8,[1,0.8392024040222168,0.8329827785491943,2.957465648651123]]],-1],0,0,[],[],[]],[[[29,"boss3"],[67,"boss3",[[-3,[59,"Bone001",-5,[0,"b1E3woQ/5TwrqixZqniqPp",-4,0],[3,8.145879545741971e-8,5.028041438178087e-10,0.006172379162356378,0.9999809506862966],[1,0.000009334668186885964,-6.793603957806527e-16,0.7073070423586464]],-6],1,4,1],[[40,-2,[4,"305MJ1wYBWDa0GqyCksu9+"],[3,4,5,6,7],8]],[0,"e4VdEIGxlVvKNcU74A69uk",-1,0]],[34,"Bone005",[[-7,-8,-9,[5,"Bone014(mirrored)",-10,[0,"6dViIcfO9SD5FxmbbGk027",1,0],[1,0.26787954568862915,0.1979166865348816,0.3281248211860657],[3,0.938273382253793,0.3458945795383342,-5.800730991939444e-8,-1.5331181853408227e-7],[1,-179.99998135356785,2.1043788141955576e-7,40.472827575500304]],[5,"Bone014",-11,[0,"dcbs7myZ5Xb5u55QUPOKCm",1,0],[1,0.26787954568862915,-0.18761184811592102,0.32812485098838806],[3,-1.103391580284696e-9,2.3919497059694863e-9,-0.34589465824838017,0.938273353237337],[1,-3.132046679561443e-8,2.805831188239853e-7,-40.47283718837715]],-12],1,1,1,4,4,1],[0,"f283AgVYVSLrpfA0Hk6BaT",1,0],[1,0.182817280292511,-2.0954757928848267e-9,-1.1013412404281553e-13],[3,0.00002580881862418292,0.009224236068862118,0.003071009666196932,0.9999527397344742],[1,-0.000288789840030935,1.0570404541585574,0.3519246472651212]],[46,"Bone002",1,[[[5,"Bone003",-13,[0,"41IZ0+Yd5aRb4Sii2InIBt",1,0],[1,0.0034619951620697975,0.011312752962112427,-6.617444900424222e-24],[3,0.0000020500197089968877,-0.000002025644341416679,-0.7028651856023383,0.7113230847230284],[1,0.0003302497810647608,-9.411357855748987e-10,-89.31466530235511]],-14,[5,"Bone015(mirrored)",-15,[0,"d71bFGupZUtLqqwR6Ik+Nv",1,0],[1,0.4510888159275055,-0.011724382638931274,0.25323283672332764],[3,0.002372779167276258,-0.7071027107014938,0.0023727782359536905,0.7071028895154268],[1,0.3845259699844013,-89.99998551080922,-2.6843634620994934e-8]],[5,"Bone015",-16,[0,"6c9PapUXFXxZm5Xo5NvXHS",1,0],[1,-0.45069649815559387,-0.017776697874069214,0.25323283672332764],[3,0.0023729055928911184,-0.7071027102772445,0.002372904661568551,0.7071028890911774],[1,0.38454645824764944,-89.99998551080925,-2.68410440343588e-8]]],4,1,4,4],[0,"e7kFO8QxxUH768lSgOARRj",1,0],[1,0,0.3414798676967621,0],[3,8.145949468669916e-8,-1.5693784728964438e-10,-0.0033556834337930843,0.9999943696784925],[1,0.000009334667817350772,1.3340512674890347e-8,-0.3845337179597146]],[48,"boss3",1,[[41,-17,[4,"b8D3fLSvhbkJay/AxbOheP"],[0],[1],1,1,2]],[0,"2fqM21TgdcM4DNaIgpBXWl",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[2,"Bone016",3,[-18],[0,"cfZeCuuAdfpI3mhlXljFRd",1,0],[1,0.011588034220039845,0.06767851114273071,-6.617444900424222e-24],[3,7.1050607358098495e-15,9.111752635037563e-17,0.005011248969152711,0.9999874436130533],[1,8.141583308736604e-13,6.361429179345771e-15,0.5742492355440167]],[2,"Bone004",5,[2],[0,"a4UILlPgFSzIamSbV17Usd",1,0],[1,-0.008448498323559761,-0.04860478639602661,5.215884613107846e-9],[3,0.0000016806560662411574,0.0000016644843408428273,0.7036801622784153,0.7105168746836544],[1,0.00027105621263597885,-1.4413490146103777e-9,89.44602950678171]],[7,"Bone006",2,[[13,"Bone007",-19,[0,"a4ai9sYXhcdrHooeRhm2At",1,0],[1,0.26980096101760864,0,-7.450580596923828e-9]]],[0,"d5NM6GYFRdG4p0eLLDZZ7g",1,0],[1,0.26980096101760864,-4.656612873077393e-10,4.6566128730773926e-9],[3,0.00009763242507036754,0.01563344375097776,-0.00014333364727999096,0.9998777752104805],[1,0.011443261498679148,1.7915353234090408,-0.01624791414776183]],[2,"Bone008",2,[-20],[0,"36ZP9PZPJeWYwTJmQmvjes",1,0],[1,0.24667036533355713,-0.31133219599723816,-0.19924938678741455],[3,0.024602072378498107,0.07353524883169325,-0.3965758989809588,0.9147211933487649],[1,8.587754810453841,12.86194133274618,-46.211117850150835]],[7,"Bone009",8,[[13,"Bone010",-21,[0,"21cak2z71SpYSDHDSczxUc",1,0],[1,0.18313288688659668,2.9802322387695312e-8,1.4901161193847656e-8]]],[0,"03a3qqRoBQgbhOI4D93Jzf",1,0],[1,0.28157544136047363,1.1920928955078125e-7,0],[3,-0.0027963635344824527,0.021427828690689987,0.0073102991591758966,0.999739760155006],[1,-0.3383438490086303,2.45816408375383,0.8306433456033119]],[2,"Bone008(mirrored)",2,[-22],[0,"a4+dGQOihYbY7pg+CvfFtE",1,0],[1,0.24667036533355713,0.3209167420864105,-0.19924932718276978],[3,0.9147269781300299,0.3965775692683268,-0.07346528813114235,0.024569055214584537],[1,171.42169740428312,12.849240925347774,46.21243744404695]],[7,"Bone009(mirrored)",10,[[13,"Bone010(mirrored)",-23,[0,"faA1ncZSBcLb5Y58yHp1U3",1,0],[1,0.18313264846801758,5.960464477539063e-8,2.9802322387695312e-8]]],[0,"4fH4NBCmBeqZtYNO/Ub6rd",1,0],[1,0.2815753221511841,8.940696716308594e-8,7.450580596923828e-8],[3,0.0027507813470993244,-0.021247824517729656,0.007224905723941701,0.9997443492676137],[1,0.33276312727453705,-2.437461609622981,0.8210319912359321]],[2,"Bone011",2,[-24],[0,"7fJ3GpOXFZrbl8Hxwn7Lrr",1,0],[1,0.16439944505691528,0.004916726611554623,0.29411035776138306],[3,0.448715797891186,0.5465039512013193,0.5465132495257361,-0.44867675684956426],[1,-90.00258967576444,-101.22641629811797,0.0019668657298428554]],[7,"Bone012",12,[[13,"Bone013",-25,[0,"1fqTf6nTZW96ZSrQr8lK+w",1,0],[1,0.1723962128162384,5.960464477539063e-8,5.3551048040390015e-9]]],[0,"c3716i7q9dxZLAe41UPnUm",1,0],[1,0.19545719027519226,0,-2.2861058823764324e-8],[3,0.0004418811573812111,0.000001146697396925214,0.01753130550230228,0.9998462172089829],[1,0.050656905214117844,-0.0007567961308925766,2.009042412142306]]],0,[0,3,1,0,1,1,0,-1,4,0,3,1,0,0,1,0,-3,3,0,-1,7,0,-2,8,0,-3,10,0,0,2,0,0,2,0,-6,12,0,0,3,0,-2,5,0,0,3,0,0,3,0,1,4,0,-1,6,0,0,7,0,-1,9,0,0,9,0,-1,11,0,0,11,0,-1,13,0,0,13,0,11,1,2,0,6,25],[0,0,0,0,0,0,0,0,0],[-1,2,5,-1,-2,-3,-4,-5,12],[132,133,134,51,135,136,137,138,51]],[[[29,"boss1"],[54,"boss1",[-3,-4],[[40,-2,[4,"aa50aSUp1bAJkL+V8zhqAz"],[5,6,7,8,9],10]],[0,"dbMe+tZgBVI7rMjDzUZIuA",-1,0],[1,5.699,0,0]],[46,"Bone001",1,[[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,[5,"Bone038",-16,[0,"06IZRuL8hcGKEPJYtiwK9E",1,0],[1,0.2803526520729065,0.06156086176633835,0.35993027687072754],[3,-0.3888302719195838,-0.3838539993675973,-0.6213948687917273,0.5615474546712459],[1,-94.66996362959898,-94.18791521954475,-23.539256511748004]],[5,"Bone038(mirrored)",-17,[0,"aa7rzEWPpdXbIrU5MvLAVU",1,0],[1,0.2687884569168091,-0.0699818953871727,0.35993024706840515],[3,0.6146501895881697,0.5689220425797481,0.35960200412090604,-0.41136267761956974],[1,-90.89030476345441,-84.10150127882225,23.798565967700128]],[5,"Bone036",-18,[0,"f5YCIyetVQ/4xh+I1Tw5OS",1,0],[1,0.34581905603408813,-0.0046710362657904625,0.3689689040184021],[3,0.3669213945904674,0.6044574372129978,0.6096366636047902,-0.3582499618681085],[1,-90.720606887615,-118.29830625949835,0.388016211976604]]],1,1,1,1,1,1,1,1,1,1,1,4,4,4],[0,"f4pyoszehYr4UViUhHZCVb",1,0],[1,0.00026906750281341374,0.6093563437461853,2.66358100020625e-8],[3,-0.000004331000445842575,-0.00000452066555548551,0.712138988013378,0.7020385044369629],[1,179.99856548228175,-179.9992827375149,89.18156632687656]],[33,"Bone022",[-19,-20],[0,"f6zzaWY4FYrpFAYCvRyPEF",1,0],[1,0.3007272481918335,1.1920928955078125e-7,-5.960464477539063e-8],[3,0.24578459472226177,0.20428794548742543,-0.024001134472949378,0.9472488130738151],[1,28.4351709063377,23.542222899207726,3.150079622796948]],[33,"Bone022(mirrored)",[-21,-22],[0,"93ViaX5W1Us7/6qnQjJ+Vi",1,0],[1,0.3007274866104126,1.1920928955078125e-7,1.4901161193847656e-8],[3,-0.24578525230377093,-0.20428817060933982,-0.024001600322745686,0.9472485820950106],[1,-28.435257075021763,-23.542259319528714,3.1500513832495454]],[17,"boss1",1,[[41,-23,[4,"f1L7KqXYpS1792DrosYZo4"],[0,1,2],[1],1,3,4]],[0,"c5Uq7wFZVbnaeqZP1qBZpZ",1,0],[1,0,0.013894438743591309,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[7,"Bone002",2,[[13,"Bone003",-24,[0,"b3RtNigWxbarSWLWbJ4RV9",1,0],[1,0.4273664951324463,1.6763806343078613e-8,3.0332842015923234e-8]]],[0,"64z7b2W3FeX5VsuPJl3pPS",1,0],[1,0.39832431077957153,-2.514570951461792e-8,5.2010449280714965e-9],[3,3.7806814768296625e-8,-3.2595779792383617e-10,-0.00862134738503379,0.9999628354940324],[1,0.000004332502861440762,-2.5695148317049927e-17,-0.9879458766276366]],[2,"Bone030",2,[-25],[0,"64F69IImdYR5WsBYf466+S",1,0],[1,0.18260711431503296,-0.19807837903499603,-0.1690978854894638],[3,-0.4485200058413333,0.824072959045293,0.20318350245354858,0.280089319434237],[1,-48.690785075645444,124.39258652806191,-38.71209276750152]],[2,"Bone031",7,[-26],[0,"70r4RuoGpYyrMieiWkUusY",1,0],[1,0.29812026023864746,5.364418029785156e-7,4.470348358154297e-8],[3,0.003809011493141365,-0.03336758496886733,0.282197740085812,0.9587682364342547],[1,1.7806891434295742,-4.509629933053466,32.742901166274386]],[2,"Bone032",8,[-27],[0,"45nnPOuotUXZOcR+IS3ZfM",1,0],[1,0.22767624258995056,9.5367431640625e-7,-2.7755575615628914e-17],[3,0.033920561042555496,-0.1483455791555156,0.4074052991631545,0.9004798203720912],[1,15.28695430157766,-25.286945342156436,46.357204787462734]],[7,"Bone033",9,[[5,"Bone034",-28,[0,"87OBgAYfJUmpIAxFwO61/1",1,0],[1,0.27803999185562134,-1.7881393432617188e-7,-2.9802322387695312e-8],[3,0.001675062897023232,0.04422458176087686,-0.014266743981283334,0.9989183352749808],[1,0.26414807468251544,5.073686257965479,-1.624809021556199]]],[0,"11dn+F5BRfyIWTxKl31HGd",1,0],[1,0.26872897148132324,1.7881393432617188e-7,-2.9802322387695312e-8],[3,-0.016572928261724164,0.17397912062475746,0.10415110866294922,0.9790858747830786],[1,-4.018749472327789,20.554420604605617,11.430496263751518]],[2,"Bone020",2,[-29],[0,"29RC9Tx0dcUojwJsW9VHcK",1,0],[1,0.08181440830230713,-0.21177823841571808,-0.032033029943704605],[3,0.4996463671479606,-0.04291842890795976,-0.5439433471856003,0.6727831383948645],[1,98.27973943277814,50.21347646162135,-50.78689421620875]],[2,"Bone021",11,[3],[0,"9djRoxKPZTMZ7a3KQXNQpv",1,0],[1,0.26265749335289,-5.960464477539063e-8,5.960464477539063e-8],[3,-0.002741239749777507,0.060141351461127424,0.24178546822743224,0.9684602680560027],[1,-2.230336362401457,7.661169741945802,27.903870553935924]],[7,"Bone023",3,[[5,"Bone024",-30,[0,"adJ+tHuOpaAr+tYKosCjZ/",1,0],[1,0.24055753648281097,1.1920928955078125e-7,-2.9802322387695312e-8],[3,-0.008060787597814421,0.024916208641850256,-0.0002647737206080841,0.9996570092512209],[1,-0.9226656970079719,2.85514605873037,-0.05334549203277793]]],[0,"63vy/N2edWVJ90TiyAwbD4",1,0],[1,0.2619011402130127,-5.662441253662109e-7,2.9802322387695312e-8],[3,0.21882453223413556,0.2653889019098912,-0.5125660817266349,0.7867404697223721],[1,58.42783930136658,62.532799046251185,-43.65906853437415]],[2,"Bone025",3,[-31],[0,"8eeSW7rR9V2aWtdLmcgK9m",1,0],[1,0.04562675952911377,-0.017825186252593994,-0.03815308213233948],[3,0.914796744570904,-0.08189441039440297,-0.3846701874310457,-0.09202754245547116],[1,-166.5790435995584,46.146928971165465,-4.532983343408369]],[2,"Bone026",14,[-32],[0,"b0yUxCehxVs4/sJA9o0Ck+",1,0],[1,0.24213647842407227,-1.1920928955078125e-7,0],[3,0.029172049919911555,-0.03079512351739984,0.05115888282589536,0.9977892666184702],[1,3.5360758357620026,-3.713387160076323,5.756149762449739]],[2,"Bone027",15,[-33],[0,"adgB6eKXddZYo61HlYRfMO",1,0],[1,0.20384728908538818,0.00000858306884765625,5.960464477539063e-8],[3,0.18281716539895335,-0.09647847939794957,0.5063293695768802,0.837197919582001],[1,43.8455978049955,-36.49174718904253,54.34287266651735]],[7,"Bone028",16,[[5,"Bone029",-34,[0,"f3eeUgzTRYu6RgLTpgpmZr",1,0],[1,0.14830663800239563,-2.220446049250313e-16,0],[3,0.018856169124456576,0.07072842666833742,-0.10181635331239706,0.9921065289298003],[1,3.031141607175813,8.460842181508992,-11.499419338011934]]],[0,"95oYPviuBcaIGSGULFCohd",1,0],[1,0.21870963275432587,2.220446049250313e-16,1.1102230246251565e-16],[3,0.016855284792165595,0.03805215334012016,0.012893700209565344,0.9990503918700301],[1,1.8744367043603694,4.337136867594252,1.5497918508858626]],[2,"Bone015",2,[-35],[0,"6ca4F9Q6hXN6ZYV0VCbSlS",1,0],[1,0.14670294523239136,-0.1640913188457489,0.03900146484375],[3,-0.0348908381988682,-0.02511075341969179,-0.8109031373415073,0.5835993328664594],[1,-165.61470740090695,-164.8110539029593,-70.86219298634448]],[2,"Bone016",18,[-36],[0,"00Wz7WdIFdjbmrW7dZGt5j",1,0],[1,0.17906448245048523,1.1102230246251565e-16,-3.725290298461914e-9],[3,-0.022371694804541365,0.06098247789829191,0.09963125895369641,0.9929019372023897],[1,-3.307004639936684,7.355054833599632,11.25170904663782]],[2,"Bone017",19,[-37],[0,"efd32V2eBXy7JerxwSxen2",1,0],[1,0.19424280524253845,2.384185791015625e-7,7.450580596923828e-9],[3,0.15327477055594294,0.3761359951199508,0.2846895978149843,0.8683204424531822],[1,3.7629663513361504,45.56198563149987,37.56838608015354]],[7,"Bone018",20,[[5,"Bone019",-38,[0,"c5GZshdo5eZ5yob/yZMcMi",1,0],[1,0.16650548577308655,-1.4901161193847656e-7,1.1920928955078125e-7],[3,-0.6934693600005463,-0.02130810774500958,-0.005501076227908759,0.7201499492779921],[1,-87.81369881331644,-2.1966101240358378,1.239395206703652]]],[0,"5fA51hZktZ9JMrwkWCP3n7",1,0],[1,0.2293502688407898,2.9802322387695312e-8,-2.9802322387695312e-8],[3,0.04562482288940074,0.369214449489732,0.11398948111709398,0.9211978419530523],[1,-0.006743652627461096,43.682483765925916,14.105281654921065]],[2,"Bone008",2,[-39],[0,"3baEu56RxaYqajpP0eATKD",1,0],[1,0.2222062349319458,-0.15210962295532227,0.2130885124206543],[3,-0.6479312735189461,0.7306705069490474,-0.15036885342112644,-0.15393142301607704],[1,74.64094748394216,-105.06292675946625,-64.23118961154034]],[2,"Bone009",22,[-40],[0,"32KrnKwHtTfa00PGb+ClrZ",1,0],[1,0.237789124250412,5.960464477539063e-8,-2.9802322387695312e-8],[3,0.0651945700394512,-0.12743169169240176,0.4015295835040553,0.9045909714124077],[1,18.224144665282754,-23.680347277796738,45.22062684019737]],[2,"Bone010",23,[-41],[0,"68LvtJgBVWW5F8VPNJj8Q0",1,0],[1,0.18549221754074097,-5.960464477539063e-8,-1.043081283569336e-7],[3,-0.002202545318307533,-0.03291215785896233,0.1270621284728137,0.9913461323711037],[1,0.23664230734685401,-3.8332959647262568,14.60004275147695]],[2,"Bone011",24,[-42],[0,"83ze0hgQ5V9oN3FZXJwdLH",1,0],[1,0.15094247460365295,-2.384185791015625e-7,5.960464477539063e-8],[3,-0.13822850486747032,-0.2784501890420645,-0.22082212410394644,0.9244435959920775],[1,-23.653337821726282,-37.61398039867037,-19.347437494244254]],[2,"Bone012",25,[-43],[0,"22euA9Qq9dZrl63FrvuCrr",1,0],[1,0.13501162827014923,0,-2.9802322387695312e-8],[3,-0.24162885873009787,-0.19823412864899317,-0.41325226984231594,0.8553018685456841],[1,-46.8171527217822,-42.89872990520044,-37.67000231018201]],[7,"Bone013",26,[[5,"Bone014",-44,[0,"88PReVAJRa1YyronYxQPdc",1,0],[1,0.1414957046508789,2.9802322387695312e-8,0],[3,-0.7058498373913475,-0.17027037112371649,0.38822591912841614,0.5675073950962194],[1,-114.00385882587666,28.980923003290634,42.922836627806404]]],[0,"1aSrcuWfhYcKn6++GDpUqt",1,0],[1,0.11164993047714233,4.470348358154297e-8,-1.1102230246251565e-16],[3,0.9932421602190151,-0.10339939757027027,0.026502391740614292,-0.045565326484033455],[1,-175.0128649764276,-2.53263697019636,-11.9944219698348]],[2,"Bone004",2,[-45],[0,"96saOTl/BflpgGtVYRssj/",1,0],[1,0.22818994522094727,-0.07227267324924469,0.2822923958301544],[3,0.31628936719089035,0.5776466761944042,0.6398953237811851,-0.3960042023596662],[1,-91.10031311722284,-119.4207078081467,-8.128604197933932]],[2,"Bone005",28,[-46],[0,"3apTJNj2pYMptVa1d6nlKC",1,0],[1,0.2167035937309265,0,-3.725290298461914e-8],[3,-0.0676106135796772,0.22993692612156102,-0.1694650639445194,0.9559494793342519],[1,-3.1477268490951302,26.471326023332065,-20.799109466155507]],[2,"Bone006",29,[-47],[0,"88MXfu4HtU1K/qKIuEP9iI",1,0],[1,0.1999753713607788,5.960464477539063e-8,2.9802322387695312e-8],[3,-0.026486946716576126,0.2440345626503016,0.09673075541078999,0.9645666046693546],[1,-5.729108100134849,28.897459880933695,10.001796246360149]],[7,"Bone007",30,[[5,"Bone035",-48,[0,"e7gOuKL05TUJL3EjBK15ux",1,0],[1,0.21135103702545166,-5.960464477539063e-8,-2.9802322387695312e-8],[3,0.021458238197150897,0.07768230080072841,0.0371056643236159,0.9960563105722903],[1,2.125769820298509,8.836684159775402,4.430657408390682]]],[0,"ccKSgTzxxf06RJ7oce3K/6",1,0],[1,0.20517630875110626,0,-4.470348358154297e-8],[3,0.07457018491271884,-0.4274620922496809,0.05514681971657867,0.8992631847722643],[1,10.449957600463568,-51.03357883490949,2.0304806250746315]],[2,"Bone004(mirrored)",2,[-49],[0,"9a1spVVRpUZ6Fuo5bu8DZg",1,0],[1,0.2301650047302246,0.06598808616399765,0.2822924256324768],[3,0.40510410930209634,0.6341733471045208,0.582105648951252,-0.3080062335535532],[1,-90.34292877731188,-119.20661114880045,8.930026753213946]],[2,"Bone005(mirrored)",32,[-50],[0,"c6ikSTbS5c1YrieNV4xM9Z",1,0],[1,0.2167035937309265,-5.960464477539063e-8,9.685754776000977e-8],[3,0.06933137160600188,-0.22793087794540345,-0.17072348619690103,0.9560827197743116],[1,3.3614207283552306,-26.19553260368015,-20.980921942825013]],[2,"Bone006(mirrored)",33,[-51],[0,"a3tWEXX9heNbSu9ds2or/m",1,0],[1,0.1999754011631012,5.960464477539063e-8,7.450580596923828e-8],[3,0.02813114920204332,-0.23932541475349697,0.09213257414888139,0.9661488358831366],[1,5.728686770268624,-28.300444305359697,9.471823675919037]],[7,"Bone007(mirrored)",34,[[5,"Bone035(mirrored)",-52,[0,"35iv7ZyDlV3pXZyHMN7TVw",1,0],[1,0.2113509476184845,1.1920928955078125e-7,5.551115123125783e-17],[3,-0.018678339633167874,-0.06799940178186588,0.032422785470874606,0.9969834321432658],[1,-1.8858814843414984,-7.740214665627996,3.852616913924453]]],[0,"bdL/jdtgRaWKs/EU5ZqJeo",1,0],[1,0.20517630875110626,1.1920928955078125e-7,-1.043081283569336e-7],[3,-0.0746970560949441,0.43543491450890015,0.04755434841047892,0.8958545467790128],[1,-10.095222694032786,51.946630964748344,1.1547110802533402]],[2,"Bone008(mirrored)",2,[-53],[0,"ffi2a1RDZW1Ze91cPHZLys",1,0],[1,0.22646552324295044,0.1460491567850113,0.21308855712413788],[3,0.15176815904211355,-0.15255261575233808,0.7213411150354413,0.6583016945804662],[1,101.6706024814729,-101.73575855455158,64.61063541056636]],[2,"Bone009(mirrored)",36,[-54],[0,"470SZ3u+RTcr3H+z7LEcAR",1,0],[1,0.2377891093492508,1.1920928955078125e-7,1.043081283569336e-7],[3,-0.0647440915636674,0.12703878989126807,0.4003753900742743,0.90518997757014],[1,-18.070382341135236,23.533943805914998,45.103386597398185]],[2,"Bone010(mirrored)",37,[-55],[0,"e9FmhLSNBZxIgybhrL7cOp",1,0],[1,0.18549224734306335,-5.960464477539063e-8,4.470348358154297e-8],[3,0.0029233929643374835,0.030429963447044805,0.12301037632195902,0.9919344325182575],[1,-0.0996627547090903,3.5266248702948544,14.135410387710575]],[2,"Bone011(mirrored)",38,[-56],[0,"ceATZgPfVZ37KpwZVgiigI",1,0],[1,0.15094223618507385,-1.1920928955078125e-7,-1.1920928955078125e-7],[3,0.1377192764719347,0.2741248367429888,-0.22589625894640014,0.9245863155826489],[1,23.755661884764887,37.278938596159946,-20.01198088858298]],[2,"Bone012(mirrored)",39,[-57],[0,"b26kyqEF1T043dc2L3bFAJ",1,0],[1,0.13501153886318207,-1.1920928955078125e-7,1.6391277313232422e-7],[3,0.23985347348564107,0.1945149616466434,-0.4154761169669365,0.8555780719388232],[1,46.66721675313153,42.58146728450438,-38.14358590227226]],[7,"Bone013(mirrored)",40,[[5,"Bone014(mirrored)",-58,[0,"17hBC/U4BXzreAif3vCm7V",1,0],[1,0.14149564504623413,1.043081283569336e-7,-5.960464477539063e-8],[3,0.7011370037658137,0.1692829871061094,0.39506813741957,0.568921206339298],[1,113.978399434334,-29.818411931490264,43.38572097139112]]],[0,"0cAdqpfxVSK6MPUd6qfLCz",1,0],[1,0.11165010929107666,8.940696716308594e-8,-1.1920928955078125e-7],[3,0.9928581097686084,-0.10573765613234844,-0.027954952732493845,0.04765335832936994],[1,174.79092173100068,2.665004213983234,-12.276479052153167]],[2,"Bone015(mirrored)",2,[-59],[0,"d7Sa8P3nBTRK1wueK29yF7",1,0],[1,0.15133452415466309,0.1601237803697586,0.03900149092078209],[3,0.5951226805359779,0.8024843140529345,0.025606536616741456,-0.03452862715427158],[1,-15.806471186468245,-163.46200530221464,72.43684506952323]],[2,"Bone016(mirrored)",42,[-60],[0,"05Zng0CoBfk5LHdUJm2CZz",1,0],[1,0.17906449735164642,1.1102230246251565e-16,3.725290298461914e-9],[3,0.0223563540333065,-0.060983748152636845,0.09963037222077441,0.9929022936959826],[1,3.305231520960887,-7.355023770124148,11.251716313766657]],[2,"Bone017(mirrored)",43,[-61],[0,"betGKFz/dUYLptMTrdgZFN",1,0],[1,0.194242924451828,1.7881393432617188e-7,-2.9802322387695312e-8],[3,-0.1532658605757679,-0.376139603443939,0.28468524837372294,0.8683218781427757],[1,-3.7619204119506455,-45.562706220671814,37.56749460814922]],[7,"Bone018(mirrored)",44,[[5,"Bone019(mirrored)",-62,[0,"1dprkY0CJZv4F3wG3EGKGu",1,0],[1,0.16650554537773132,-1.1920928955078125e-7,-5.960464477539063e-8],[3,0.6934688842918946,0.021307053522507207,-0.005502550986190927,0.7201504272870969],[1,87.81362516778357,2.1966410445871474,1.2391882191862642]]],[0,"d46DcW6jlYKKIkA4foFlrn",1,0],[1,0.22935009002685547,5.551115123125783e-17,2.9802322387695312e-8],[3,-0.045622044155542954,-0.36921787944966783,0.11398039223995896,0.921197729462348],[1,0.006696370641874629,-43.68285029677144,14.104188149481116]],[2,"Bone020(mirrored)",2,[-63],[0,"e8F1nrD0pTV4ExJ1Bjy+s4",1,0],[1,0.08784008026123047,0.2100357711315155,-0.03203300014138222],[3,0.6804840224487213,0.5342780552483284,0.03577729449058783,0.5002083966418456],[1,83.66598347992961,48.71729345583064,49.72296988567764]],[2,"Bone021(mirrored)",46,[4],[0,"31eeDBqm1fXIPS5a3tun9B",1,0],[1,0.2626575231552124,-5.551115123125783e-17,-8.940696716308594e-8],[3,0.0027428363077098613,-0.06014056998771685,0.2417858292225717,0.9684602219387717],[1,2.2305159425422967,-7.661123253819835,27.903902268434237]],[7,"Bone023(mirrored)",4,[[5,"Bone024(mirrored)",-64,[0,"7czbArHstXkKLD4J9ameUn",1,0],[1,0.24055765569210052,1.1920928955078125e-7,-2.9802322387695312e-8],[3,0.008051857342116744,-0.024891916631107205,-0.0002537140968785864,0.9996576892661454],[1,0.9216754789298472,-2.8523722679350416,-0.05203069522762961]]],[0,"db7YsfdZJa/I7kgIgVBYRS",1,0],[1,0.2619009017944336,-6.556510925292969e-7,5.551115123125783e-17],[3,-0.21882578830699592,-0.2653837812167685,-0.512565793951976,0.7867420351737237],[1,-58.42776003467222,-62.53215407319227,-43.6592844545841]],[2,"Bone025(mirrored)",4,[-65],[0,"e19IXhBRxXPaDuQXNWl+UD",1,0],[1,0.04562664031982422,-0.017825275659561157,0.038153111934661865],[3,0.9147964718193311,-0.08189357074116341,0.3846703172670137,0.09203045817478547],[1,166.57877244740862,-46.146939816995335,-4.532762178877339]],[2,"Bone026(mirrored)",49,[-66],[0,"8awucd+jZXtoHVE6lRWraq",1,0],[1,0.24213659763336182,0,-5.960464477539063e-8],[3,-0.029157393059730568,0.030796481696816046,0.05115576154937912,0.9977898131397019],[1,-3.53438513896584,3.7134464496424133,5.755841715868791]],[2,"Bone027(mirrored)",50,[-67],[0,"c65oMVnrZWK7KZKpmFbulA",1,0],[1,0.20384728908538818,0.00000858306884765625,0],[3,-0.1828164557696565,0.0964726556000837,0.5063272577271039,0.8372000228761582],[1,-43.8447946019923,36.490509537893,54.34295720846419]],[7,"Bone028(mirrored)",51,[[5,"Bone029(mirrored)",-68,[0,"57G4pDqpVQ2JIVqSVBits/",1,0],[1,0.14830678701400757,0,5.960464477539063e-8],[3,-0.01888521369828483,-0.0708213665162484,-0.10193603386804585,0.9920870565366701],[1,-3.036716210023603,-8.472597759075173,-11.512626898136565]]],[0,"eaW0K0ihZZL7fd8LXtsRMX",1,0],[1,0.21870972216129303,2.220446049250313e-16,-1.1920928955078125e-7],[3,-0.016868474358922726,-0.03807608872851256,0.012864988599981596,0.9990496274501397],[1,-1.876033735845307,-4.339912184712112,1.546606356569768]],[2,"Bone030(mirrored)",2,[-69],[0,"91l1N78t5bwoP/pnrzxfS4",1,0],[1,0.1882023811340332,0.1936005800962448,-0.169097900390625],[3,-0.27715846729227867,0.20716331774383298,0.8175824235307246,0.4602450700694029],[1,-129.55560869900006,123.28493005660066,39.62368301904694]],[2,"Bone031(mirrored)",53,[-70],[0,"a3HhMoo49b6LsFFwplALE0",1,0],[1,0.2981201410293579,4.172325134277344e-7,-8.940696716308594e-8],[3,-0.0050451316212733474,0.03397168112070522,0.285471102542998,0.9577717479345703],[1,-1.9885605376582172,4.654283045853512,33.12651182012663]],[2,"Bone032(mirrored)",54,[-71],[0,"d4Fvmk8hlVYJkSUk/pT/sI",1,0],[1,0.2276763617992401,8.940696716308594e-7,-2.9802322387695312e-8],[3,-0.035319377305435155,0.15087290351072455,0.41292674014091807,0.8974861647120776],[1,-15.979940257400086,26.058669290005756,46.93123008063047]],[7,"Bone033(mirrored)",55,[[5,"Bone034(mirrored)",-72,[0,"f2I6GY3ntU5IG1d+XrY/eY",1,0],[1,0.27803993225097656,-8.940696716308594e-8,8.940696716308594e-8],[3,-0.0014120079611994675,-0.034139622087524996,-0.010718546834353826,0.9993585968965285],[1,-0.20367932789560025,-3.915273811528129,-1.222035901673602]]],[0,"07UmQNhQZbxZg+lqOA4c+3",1,0],[1,0.26872915029525757,5.551115123125783e-17,-2.9802322387695312e-8],[3,0.015093920579344248,-0.16597437668280846,0.11120914540336066,0.9797230250560368],[1,3.9020840667155836,-19.650667181132413,12.292231609446501]]],0,[0,3,1,0,1,1,0,-1,5,0,-2,2,0,-1,6,0,-2,7,0,-3,11,0,-4,18,0,-5,22,0,-6,28,0,-7,32,0,-8,36,0,-9,42,0,-10,46,0,-11,53,0,0,2,0,0,2,0,0,2,0,-1,13,0,-2,14,0,-1,48,0,-2,49,0,1,5,0,0,6,0,-1,8,0,-1,9,0,-1,10,0,0,10,0,-1,12,0,0,13,0,-1,15,0,-1,16,0,-1,17,0,0,17,0,-1,19,0,-1,20,0,-1,21,0,0,21,0,-1,23,0,-1,24,0,-1,25,0,-1,26,0,-1,27,0,0,27,0,-1,29,0,-1,30,0,-1,31,0,0,31,0,-1,33,0,-1,34,0,-1,35,0,0,35,0,-1,37,0,-1,38,0,-1,39,0,-1,40,0,-1,41,0,0,41,0,-1,43,0,-1,44,0,-1,45,0,0,45,0,-1,47,0,0,48,0,-1,50,0,-1,51,0,-1,52,0,0,52,0,-1,54,0,-1,55,0,-1,56,0,0,56,0,11,1,3,0,12,4,0,47,72],[0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,2,5,-1,-2,-3,-4,-5,12],[21,21,21,139,140,52,141,142,143,144,52]],[[[29,"floor001"],[78,"floor001",[[97,0,-2,[4,"38x1YyagJMeY9TvHPcgBeo"],[0],[1],1]],[0,"b6knkowZ1OGYspNXoBnI8j",-1,0]]],0,[0,3,1,0,1,1,0,11,1,2],[0,0],[-1,2],[145,146]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":0.914,"metallic":0.36,"SpecularIntensity":0},"albedoScale",8,[1,1.2,1.2,1.2],"emissive",8,[4,4289835441],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[22,22,22,1]],[[[6,".bin",2723602646,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.421884298324585,-0.15071816742420197,-0.006505131721496582],"maxPosition",8,[1,2.421884059906006,0.4796850383281708,1.948569893836975]]],-1],0,0,[],[],[]],[[[18,"Skin-0",2953999992,["Bone020/Bone002/Bone008","Bone020/Bone002/Bone004","Bone020/Bone002/Bone008(mirrored)/Bone009(mirrored)","Bone020/Bone002/Bone008(mirrored)/Bone009(mirrored)/Bone010(mirrored)","Bone020/Bone002/Bone008/Bone009","Bone020/Bone002/Bone008/Bone009/Bone010","Bone020/Bone002/Bone004/Bone005/Bone006","Bone020/Bone002/Bone004/Bone005","Bone020/Bone002/Bone008/Bone012(mirrored)","Bone020/Bone017","Bone020/Bone016","Bone020/Bone002/Bone008(mirrored)","Bone020/Bone002/Bone008(mirrored)/Bone012/Bone013","Bone020/Bone002/Bone008(mirrored)/Bone012/Bone013/Bone014","Bone020/Bone002/Bone008(mirrored)/Bone012","Bone020/Bone002/Bone004/Bone005/Bone019","Bone020/Bone002/Bone004/Bone005/Bone018","Bone020/Bone002/Bone004/Bone005/Bone018(mirrored)","Bone020/Bone002/Bone004/Bone005/Bone019(mirrored)"],[[[7,0.7288228869438171,-99.9973373413086,0.0012204707600176334,0,0.00001947132477653213,-0.0012203612131997943,-100,0,99.9973373413086,0.7288228869438171,0.000010576536624284927,0,-25.25266456604004,30.058629989624023,-0.00037282033008523285,1],[7,0.7288229465484619,-99.99735260009766,0.00122012326028198,0,-0.00002821238558681216,-0.0012203613296151161,-100,0,99.99735260009766,0.7288229465484619,-0.00003710590681293979,0,-25.029354095458984,-0.5821812152862549,0.000013097519513394218,1],[7,-1.8746780157089233,99.9823989868164,-0.0005938380490988493,0,-0.000036823774280492216,0.0005932518397457898,100,0,99.98241424560547,1.8746777772903442,0.00002569574280641973,0,-50.727901458740234,29.479360580444336,-0.0001892327709356323,1],[7,-0.5207976698875427,99.99864196777344,-0.0038687975611537695,0,-0.00001368852099403739,0.00386877846904099,100,0,99.99864959716797,0.520797610282898,-0.000006460173153755022,0,-73.77418518066406,30.481021881103516,-0.0011840012157335877,1],[7,1.8747023344039917,-99.98242950439453,-0.000019033137505175546,0,0.00003637384361354634,0.000019718503608601168,-100,0,99.98242950439453,1.8747023344039917,0.00003673711034934968,0,-50.7279052734375,29.479246139526367,-0.000007651757186977193,1],[7,0.520827054977417,-99.99864196777344,2.867176078780176e-7,0,0.00003663748429971747,-9.590094407485594e-8,-100,0,99.99864196777344,0.520827054977417,0.000036636491131503135,0,-73.77418518066406,30.480897903442383,-0.00001354077994619729,1],[7,0.5208269953727722,-99.99864959716797,-6.100854932356015e-8,0,-0.000011046128747693729,3.47738171591061e-9,-100,0,99.99864959716797,0.5208269953727722,-0.0000110459604911739,0,-73.6146011352539,-0.16031165421009064,-0.0000015071694861035212,1],[7,1.8747024536132812,-99.9824447631836,-0.000019379922377993353,0,-0.00001130673354055034,0.000019171327949152328,-100,0,99.9824447631836,1.8747024536132812,-0.000010945339454337955,0,-50.153480529785156,-1.1569961309432983,-0.0000015380668401121511,1],[7,-0.00000799991721578408,0.0000337278179358691,-99.99998474121094,0,-99.9867935180664,-1.625868320465088,0.000007450488283211598,0,-1.625868558883667,99.98677825927734,0.00003385342643014155,0,-35.706295013427734,-29.206825256347656,34.87699890136719,1],[7,99.98681640625,1.623368501663208,-3.548442251144479e-8,0,4.225192355988838e-7,-0.000028209735319251195,-100,0,-1.623368501663208,99.98681640625,-0.000028212878532940522,0,33.805606842041016,-3.3793458938598633,9.870075245999033e-7,1],[7,99.99987030029297,-0.15806256234645844,-3.548447935486365e-8,0,-8.007842922097552e-8,-0.00002821278576448094,-100,0,0.15806256234645844,99.99987030029297,-0.000028212878532940522,0,33.7227668762207,-14.911623001098633,0.0000040864483707991894,1],[7,-0.7287901639938354,99.9973373413086,0.000011008085493813269,0,-0.000028211863536853343,-0.000011213987818337046,100,0,99.9973373413086,0.7287901639938354,0.0000282928431261098,0,-25.25266456604004,30.058759689331055,-0.0000026954560325975763,1],[7,-23.774822235107422,-5.761330604553223,-96.96167755126953,0,-23.550918579101562,97.18722534179688,-0.00008853778126649559,0,94.23433685302734,22.835346221923828,-24.46293830871582,0,-51.19900894165039,30.00861930847168,-25.957487106323242,1],[7,-24.033130645751953,-4.565701961517334,-96.961669921875,0,-18.663558959960938,98.24293518066406,-0.00004163109406363219,0,95.2579574584961,18.09648895263672,-24.462976455688477,0,-83.97264862060547,34.24884033203125,-25.957435607910156,1],[7,-0.000018003995137405582,-0.0003252218011766672,-100.00001525878906,0,-99.98678588867188,-1.6258087158203125,0.000023289103410206735,0,-1.625808835029602,99.98677825927734,-0.00032488617580384016,0,-35.70631790161133,-29.2069034576416,-34.87726593017578,1],[7,85.31363677978516,52.16877746582031,-0.000010146060049009975,0,-3.1944189538701687e-15,-0.000019448527382337488,-100,0,-52.16877746582031,85.31363677978516,-0.000016592248357483186,0,20.90753173828125,-51.79561996459961,-31.149959564208984,1],[7,85.77265930175781,-51.39141082763672,-1.4033968448638916,0,-1.635977029800415,-0.000024310391381732188,-99.98661804199219,0,51.38453674316406,85.78413391113281,-0.8407728672027588,0,-37.761783599853516,-43.97746658325195,-30.549392700195312,1],[7,-85.77265167236328,51.39143753051758,-1.4034156799316406,0,-1.6359914541244507,-0.000011124598131573293,99.98662567138672,0,51.38456726074219,85.78411865234375,0.8407694697380066,0,-37.761878967285156,-43.9774055480957,30.549394607543945,1],[7,-85.31364440917969,-52.168785095214844,0.000011503329915285576,0,0.00002224442141596228,-0.000014326948985399213,100,0,-52.16878890991211,85.31363677978516,0.000023827487893868238,0,20.907684326171875,-51.795536041259766,31.14995765686035,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[18,"Skin-2",1590801115,["Bone001/Bone021"],[[[7,77.9760513305664,62.60779571533203,-3.833621567845549e-15,0,-62.60779571533203,77.9760513305664,1.3485780959825167e-15,0,3.833621567845549e-15,1.3485780959825167e-15,100,0,11.077852249145508,69.65873718261719,-80.03092193603516,1]],8]]],0,0,[],[],[]],[[[6,".bin",1582898670,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9360,"length":2688,"count":672,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9360,"count":130,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6230913400650024,-0.6653638482093811,0.6228384375572205],"maxPosition",8,[1,-0.3415747284889221,-0.38682353496551514,0.9013786911964417]]],-1],0,0,[],[],[]],[[[6,".bin",1582898670,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9360,"length":2688,"count":672,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9360,"count":130,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6230913400650024,-0.6653638482093811,0.6228384375572205],"maxPosition",8,[1,-0.3415747284889221,-0.38682353496551514,0.9013786911964417]]],-1],0,0,[],[],[]],[[[6,".bin",3774150026,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":93096,"length":19116,"count":4779,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":93096,"count":1293,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]]},"minPosition",8,[1,-0.5471389293670654,-0.5805123448371887,0.0028850315138697624],"maxPosition",8,[1,0.5134339332580566,0.42634886503219604,1.0904645919799805]]],-1],0,0,[],[],[]],[[[18,"Skin-1",1342229331,["Bone020/Bone002/Bone008(mirrored)/Bone012/Bone013/Bone014"],[[[7,-24.25782012939453,-4.617063045501709,-96.9032974243164,0,-18.825326919555664,98.2120590209961,0.03312604874372482,0,95.1691665649414,18.250389099121094,-24.693283081054688,0,-80.96394348144531,34.780521392822266,-26.674646377563477,1]],8]]],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"metallic":0.373,"SpecularIntensity":0},"mainColor",8,[4,4282466625],"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[23,23,23,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[24,24,24,1]],[[[6,".bin",1979629610,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.15000000596046448,-1.0331604016755591e-7,-1],"maxPosition",8,[1,0.15000000596046448,0.30000007152557373,0]]],-1],0,0,[],[],[]],[[[6,".bin",251298959,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42048,"length":4848,"count":1212,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":42048,"count":876,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0353645086288452,-1.3974494934082031,0],"maxPosition",8,[1,1.0353645086288452,1.397448182106018,2.1015000343322754]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"mainColor",8,[4,4278190296],"emissive",8,[4,4279571901],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[4,4,4,1]],[[[18,"Skin-0",3649658825,["Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Bone012","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Bone012/Bone013","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Bone012/Bone013/Bone014","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010","Bone002/Bone019/Bone021/Bone004","Bone002/Bone019/Bone005","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone016/Bone017","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone016","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Bone012(mirrored)","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Bone012(mirrored)/Bone013(mirrored)","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Bone012(mirrored)/Bone013(mirrored)/Bone014(mirrored)","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone016(mirrored)/Bone017(mirrored)","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone016(mirrored)","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008","Bone002/Bone019/Bone021/Bone003/Bone006","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007","Bone002/Bone019/Bone021/Bone003/Bone006/Bone007/Bone008/Bone010/Dummy001","Bone002/Bone019/Bone021/Bone003/Bone020(mirrored)","Bone002/Bone019/Bone021/Bone003/Bone020"],[[[7,0.090421661734581,0.995903730392456,6.141315793684043e-7,0,9.497163944161002e-8,6.080348953219072e-7,-1,0,-0.995903730392456,0.090421661734581,-3.960306571570982e-8,0,1.0086729526519775,-0.5043247938156128,1.2456932552140643e-7,1],[7,0.14785028994083405,0.9890100955963135,6.268992365221493e-7,0,2.1632278901506652e-7,6.015270059833711e-7,-1,0,-0.9890100955963135,0.14785028994083405,-1.250093930593721e-7,0,0.692970335483551,-0.5453023314476013,1.8830672843250795e-7,1],[7,0.2670503854751587,0.9636828303337097,6.268990091484739e-7,0,2.878830400732113e-7,5.707479999728093e-7,-1,0,-0.9636828303337097,0.2670503854751587,-1.250093930593721e-7,0,0.41420748829841614,-0.600140392780304,1.8830725423413242e-7,1],[7,-0.019743261858820915,-0.9998052716255188,0.0000037958466236887034,0,8.651993255170964e-8,-0.0000037982956655469025,-1,0,0.9998052716255188,-0.019743261858820915,1.614937730209931e-7,0,-0.6838311553001404,0.01716616190969944,-8.316193600421684e-8,1],[7,0.001971919322386384,0.999998152256012,-8.643940674346595e-8,0,-4.370865624991893e-8,-8.635338843987483e-8,-1,0,-0.999998152256012,0.001971919322386384,4.353828586545205e-8,0,0.26085540652275085,0.0009149936959147453,3.8612963493278585e-8,1],[7,-0.0028518515173345804,0.9999960064888,-3.480709054315412e-8,0,4.373612227936974e-8,-3.468250397986594e-8,-1,0,-0.9999960064888,-0.0028518515173345804,-4.363703354215431e-8,0,0.10756581276655197,0.0014339040499180555,6.145401698631758e-8,1],[7,0.7772843241691589,-0.6214958429336548,0.0978342592716217,0,0.0765220895409584,-0.06095849722623825,-0.9952026605606079,0,0.6244781613349915,0.7810419201850891,0.00017607538029551506,0,-0.6043577790260315,-0.3228533864021301,-0.3260597884654999,1],[7,0.878836452960968,-0.4669848382472992,0.0978342741727829,0,0.08647780865430832,-0.045751117169857025,-0.9952026605606079,0,0.4692206084728241,0.8830808997154236,0.00017607356130611151,0,-0.33466213941574097,-0.4290778934955597,-0.3260597884654999,1],[7,-0.08683313429355621,-0.9962230324745178,-8.275029586002347e-7,0,-1.3310439328506618e-7,-8.190388030016038e-7,1,0,-0.9962230324745178,0.08683313429355621,-6.148192710497824e-8,0,1.008668065071106,-0.5043804049491882,1.369344886370527e-7,1],[7,-0.14428626000881195,-0.9895361065864563,-2.565335535109625e-7,0,-9.28131171917812e-8,-2.4571306767029455e-7,1,0,-0.9895361065864563,0.14428626000881195,-5.6388898883596994e-8,0,0.6929620504379272,-0.5453575253486633,3.84077196713406e-7,1],[7,-0.2635766863822937,-0.9646385312080383,-1.4915967483375425e-7,0,-3.458841746351027e-8,-1.4517665647417743e-7,1,0,-0.9646385312080383,0.2635766863822937,4.899860073237505e-9,0,0.41419270634651184,-0.6001940965652466,3.407332656024664e-7,1],[7,-0.7795289158821106,0.6186780333518982,0.09783423691987991,0,0.07652218639850616,-0.0609583742916584,0.9952024817466736,0,0.6216738820075989,0.7832757830619812,0.000176221044966951,0,-0.6046648025512695,-0.32260867953300476,0.32609838247299194,1],[7,-0.8805211782455444,0.46380022168159485,0.09783424437046051,0,0.0864778682589531,-0.0457509383559227,0.9952026009559631,0,0.46605125069618225,0.8847575187683105,0.0001762158062774688,0,-0.3350089490413666,-0.4288943409919739,0.3260984420776367,1],[7,-0.039041657000780106,-0.9992374777793884,-4.022693289584822e-8,0,-1.25573676457158e-10,4.0262527534196124e-8,-1,0,0.9992374777793884,-0.039041657000780106,-1.6973942251752305e-9,0,-0.5695791840553284,0.024463411420583725,4.251358376450298e-8,1],[7,0.038982558995485306,-0.9992398619651794,-0.000001427390657227079,0,-4.362469141483416e-8,0.0000014267745882534655,-1,0,0.9992398619651794,0.038982558995485306,1.2027793871993708e-8,0,-0.24960651993751526,-0.01567920856177807,3.90762160407121e-8,1],[7,0.009893933311104774,-0.9999510645866394,-4.0225355490974835e-8,0,-2.0952981572008866e-9,4.020659361003709e-8,-1,0,0.9999510645866394,0.009893933311104774,-1.697394114152928e-9,0,-0.42095643281936646,-0.0034332626964896917,4.302090061969466e-8,1],[7,0.000002874609435821185,0.027270112186670303,-0.9996282458305359,0,-1,7.839091864525471e-8,-0.0000028735407795466017,0,6.123234924670329e-17,0.9996282458305359,0.027270112186670303,0,-0.39393848180770874,-0.9551770091056824,-0.027780165895819664,1],[7,-9.42236795253848e-8,4.435311211636872e-7,-1,0,-0.998052716255188,0.06237853690981865,1.2170698937552515e-7,0,0.062378544360399246,0.9980525970458984,4.3678983274730854e-7,0,-0.2873927056789398,-0.24258218705654144,0.3729998469352722,1],[7,-9.423821012433109e-8,4.4352881900522334e-7,-1,0,-0.9980525970458984,0.06237852945923805,1.2172135654964222e-7,0,0.06237853318452835,0.9980525374412537,4.3678664951585233e-7,0,-0.2873927354812622,-0.24258184432983398,-0.37349337339401245,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",220796524,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":240264,"length":41856,"count":10464,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240264,"count":3337,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]]},"minPosition",8,[1,-0.6119892597198486,-0.49906229972839355,0.0009720325469970703],"maxPosition",8,[1,0.6119892597198486,0.40279898047447205,1.0829079151153564]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[25,25,25,1]],[[[29,"map_ground"],[60,"map_ground",[-2,-3,-4,-5,-6,-7,-8],[0,"27KQVO/tVKSJ8POIqo2maP",-1,0]],[33,"track_all1",[-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[0,"c5XAWKMtBGUpt/J+Dc2nhb",1,0],[1,0,2.8,-25.887],[3,0,-0.043619387365336,0,0.9990482215818578],[1,0,-5,0]],[61,"bgGround",1,[2,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39],[0,"5eV/xj2T5NGK+ADw7vVuRb",1,0],[1,0,4.872,-30.741],[1,0.755,0.755,0.755]],[79,"track_all2",3,[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[0,"d9BzfXLq9DKaumPlXC1Lob",1,0],[1,0,-2.369,-25.887]],[61,"stalagnate_all",3,[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59],[0,"cdPGD3o1lGQZjTWDcxesnx",1,0],[1,0,0.783,-70.787],[1,1.465,1.465,1.898]],[80,"cactus_all",3,[-60,-61,-62,-63,-64,-65,-66],[0,"d0BYi6GxpFTYLioBVdSjPm",1,0]],[16,["b6knkowZ1OGYspNXoBnI8j"]],[42,"Plane",1,[[98,false,0,-67,[4,"22oDjCacxJeL4Lck+ga1UQ"],[0],[1],1],[47,-68,[4,"e4CCSDIstCp7+9qJzlD8Mh"],[1,0,-0.25,-0.5],[1,0.75,0.5,1]]],[0,"82Gklv41NC17FASbzTN7Io",1,0],[1,0,0,22.576],[1,500,200,800]],[42,"leftPlane",1,[[57,false,1,-69,[4,"18JgWdxARLi655yJ8Ny0TD"],[2],[1],3],[47,-70,[4,"49/S8UOktGcrVbrvn8XdTs"],[1,-0.8,0.14999998410476678,-0.5],[1,2,0.3000001748416139,1]]],[0,"1f+MbQ4NlH2I8PpMvnBEqi",1,0],[1,-10,0,22.576],[1,4,7,64]],[42,"rightPlane",1,[[57,false,1,-71,[4,"14+eWslvZDwaO6DcqXzOdX"],[4],[1],5],[47,-72,[4,"2049wsR6FLFqeLiF259CkM"],[1,0.8,0.14999998410476678,-0.5],[1,2,0.3000001748416139,1]]],[0,"03c9tdhZlDRKRqob+rn07i",1,0],[1,10,0,22.576],[1,4,7,64]],[11,"endPlane",1,[[57,false,1,-73,[4,"8bF5Q6DWlJ55BHMi99NiC8"],[6],[1],7],[47,-74,[4,"51oXZ4BKVPCoI6NhYlxNlW"],[1,0.8,0.14999998410476678,-0.5],[1,2,0.3000001748416139,1]]],[0,"c5gjVXtidOi52f7e+dk8cx",1,0],[1,10,0,-41.317],[3,0,0.7071067811865474,0,0.7071067811865477],[1,4,7,20],[1,0,89.99999999999997,0]],[42,"playerPlane",1,[[47,-75,[4,"498ZK21cFFrKJoGL4oCS3h"],[1,0,2,1],[1,25,4,2]]],[0,"d32fllbYdO94uZC6+ELaf3",1,0],[1,0,0,-0.6239999999999988],[1,1,1,2]],[42,"Cube",1,[[99,"Cube<ModelComponent>",false,-76,[4,"7bbLio2s5Da576q9zX/FKz"],[8],[1],9]],[0,"0b6YSCo35PtLndTxvjqSza",1,0],[1,0,0,-40.972],[1,5,1,1]],[17,"pitcat",2,[[8,1,-77,[4,"46dkudG1NJkYJzazLnM/xl"],[10],[1],11]],[0,"4aRrVMp6BN64E40mYaaxAD",1,0],[1,-9,0.5,2.968],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[17,"pitcat-001",2,[[8,1,-78,[4,"bajZjR2ERM7ow26RwZGxMP"],[12],[1],13]],[0,"23RgpMoEhOSbtp3nPgEo8k",1,0],[1,5.056,0.5,-5],[3,-0.4999999999999999,0.5000000000000001,0.4999999999999999,0.5000000000000001],[1,-89.99999999999997,90,0]],[17,"track_a",2,[[8,1,-79,[4,"92fKfhC2xH6Jd1ZbGCgmlk"],[14],[1],15]],[0,"71ixos/jBNZ6d8BD9dDyFb",1,0],[1,-9,0,0],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[17,"track_a-001",2,[[8,1,-80,[4,"b7vAUkRkhJGpFLB4tlMX+0"],[16],[1],17]],[0,"4azsKDFq9Dd4HtVsxDKnrB",1,0],[1,-14,-4.440892098500626e-16,10],[3,-0.4999999999999999,-0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-002",2,[[8,1,-81,[4,"b3qHUAtJJLpKLUzSilZkiT"],[18],[1],19]],[0,"bc+OMT9OFD5YWoP6bJkxzy",1,0],[1,1,0,-5],[3,-0.5,-0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,-89.99999999999999,-90,0]],[17,"track_a-003",2,[[8,1,-82,[4,"f5lITmD9lIC6X24hjZCT99"],[20],[1],21]],[0,"56lg/cyiBPOYO508LCp8Wh",1,0],[1,6,0,-5],[3,-0.5,-0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,-89.99999999999999,-90,0]],[17,"track_a-004",2,[[8,1,-83,[4,"4aVxKObpZESbACI6hdED0p"],[22],[1],23]],[0,"4fQhiDI7VOSrZoB0xErxrm",1,0],[1,11,0,-5],[3,-0.5,-0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,-89.99999999999999,-90,0]],[17,"track_a-005",2,[[8,1,-84,[4,"94y9V/7BBFEIgOEOoBFiPA"],[24],[1],25]],[0,"44iVGDpgtDObhMA0K3o7nG",1,0],[1,26,0,-15],[3,-0.5,-0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,-89.99999999999999,-90,0]],[17,"track_b",2,[[8,1,-85,[4,"31n54ZxA9KkpzZoQWobCOA"],[26],[1],27]],[0,"65VMQJ24lGAJSYQuU4ayfY",1,0],[1,-4,0,0],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[17,"track_b-001",2,[[8,1,-86,[4,"91RAnnUx1B4JMdr/SX7bqi"],[28],[1],29]],[0,"a8HwONGWVLi790h4vQ83qy",1,0],[1,-14,0,5],[3,-4.329780281177466e-17,0.7071067811865477,0.7071067811865475,4.3297802811774677e-17],[1,-89.99999999999999,180,0]],[17,"track_b-002",2,[[8,1,-87,[4,"64iUg2lB9MrIW3E6yozmxn"],[30],[1],31]],[0,"df+76uy65BUZvhQOzQZCN3",1,0],[1,11,0,-10],[3,-4.329780281177466e-17,0.7071067811865477,0.7071067811865475,4.3297802811774677e-17],[1,-89.99999999999999,180,0]],[17,"track_b-003",2,[[8,1,-88,[4,"c8LJtMbjZJfLKlrYFBIXc0"],[32],[1],33]],[0,"a1s4oisqtJfLrVomiEUz7G",1,0],[1,21,0,-10],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[11,"track_c",2,[[25,-89,[4,"896Dw+6E9ESZ/D2V/4rnOn"],[34],[1],35]],[0,"35u5hZppJI7JaBnpsyzlna",1,0],[1,-9,0,1.457],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,1,1,15],[1,-89.99999999999999,0,0]],[11,"track_c-001",2,[[25,-90,[4,"c9nZH0O6BC3YVP/sYtVgAj"],[36],[1],37]],[0,"05FA9D6QBFfJFSM2NqNXla",1,0],[1,-10.458,0,8.568],[3,-0.6532814824381882,-0.27059805007309856,-0.27059805007309845,0.6532814824381884],[1,1,1,15],[1,-89.99999999999999,-45,0]],[11,"track_c-002",2,[[25,-91,[4,"84bpWFNkZDwr+mqirWk/Oo"],[38],[1],39]],[0,"02KqGkiRtPjqF493u9XqBz",1,0],[1,-17.502,0,10],[3,-0.5,0.5000000000000001,0.4999999999999999,0.5000000000000001],[1,1,1,15],[1,-89.99999999999999,90,0]],[11,"track_c-003",2,[[25,-92,[4,"74g9LrfeBG+5MzBSA3pto1"],[40],[1],41]],[0,"22bbNCeeBHXJy0t2H+4Uns",1,0],[1,-5.226,0,-4.681],[3,-0.4146428651068862,0.5727750818741617,0.5727750818741616,0.41464286510688625],[1,1,1,15],[1,-90,108.197,0]],[11,"track_c-004",2,[[25,-93,[4,"05DD2g2kFM/6FpuEFY/Z3q"],[42],[1],43]],[0,"40x7eb0ARJdZ+cAR9OMW26",1,0],[1,3.503,0,-5],[3,-0.5,0.5000000000000001,0.4999999999999999,0.5000000000000001],[1,1,1,15],[1,-89.99999999999999,90,0]],[11,"track_c-005",2,[[25,-94,[4,"5acSbocPdP1q5nEWgaebjF"],[44],[1],45]],[0,"6cKoyGTTpFs5CuXwxYawe7",1,0],[1,12.306,0,-5.104],[3,-0.42659643701732614,0.5639286124361155,0.5639286124361154,0.4265964370173262],[1,1,1,15],[1,-90,105.787,0]],[11,"track_c-006",2,[[25,-95,[4,"d7Ky8BfR5E3IOrrOf5fEHp"],[46],[1],47]],[0,"f0NFybQGJOAoVTSGekm4d1",1,0],[1,16.979,0,-12.723],[3,-0.21130067073922226,0.6747977671459463,0.6747977671459462,0.2113006707392223],[1,1,1,15],[1,-90,145.226,0]],[11,"track_c-007",2,[[25,-96,[4,"a2orXR931LXIg9qbGggstq"],[48],[1],49]],[0,"d7Z3zDKYhImaGrcdQWHgiV",1,0],[1,22.456,0,-14.918],[3,-0.5000436313273857,0.49995636486489653,0.5000436313273856,0.49995636486489664],[1,1,1,15],[1,-90.01,90,0]],[17,"pitcat-002",4,[[25,-97,[4,"4diDqmQFFFI5mVk6YwFi9T"],[50],[1],51]],[0,"7baXdawMZKb6eA9PVHA0lo",1,0],[1,11.255,-0.008,-6.365],[3,-0.4058931207817347,-0.2589602871095308,0.5790084407865432,0.6579814356804831],[1,-89.9999999999999,33.48599999999991,76.45199999999998]],[17,"track_a-006",4,[[8,1,-98,[4,"01YRirVFlPGaGjksBTg5H+"],[52],[1],53]],[0,"b2Fd4W7mtI5L4vtzbfTLTC",1,0],[1,-3.316,0,-11.845],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-007",4,[[8,1,-99,[4,"39Oear3s5Jk68g4tan0AK+"],[54],[1],55]],[0,"caPXRdbFxH7ZIfD7wPP8GP",1,0],[1,-8.316,0,-11.845],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-008",4,[[8,1,-100,[4,"e3c/zFFPBPo6Xe3UZWHA32"],[56],[1],57]],[0,"93XD9aMRhCSqllTesY+TFy",1,0],[1,-13.316,0,-11.845],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-009",4,[[8,1,-101,[4,"573j5wcAVEzZxLVGhbZ+Fw"],[58],[1],59]],[0,"8fpiBVrLlDUqJIUy8h+Sla",1,0],[1,-18.316,0,-11.845],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-010",4,[[8,1,-102,[4,"efHVvZSaxDzZyb4L2idtB/"],[60],[1],61]],[0,"441z9nDZlCWpYop5/JebYQ",1,0],[1,11.463,0,-11.845],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-011",4,[[8,1,-103,[4,"d5QniF/4dKbqUx7RVkyXYP"],[62],[1],63]],[0,"1e7DhA3OlP6rmGzNnBfL/D",1,0],[1,6.463,0,-11.845],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[17,"track_a-012",4,[[8,1,-104,[4,"d4CJvP9YpBFIykfWXxHXHA"],[64],[1],65]],[0,"122+kOsq1MZIn2PE29CajO",1,0],[1,16.456,0,-6.858],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[17,"track_a-013",4,[[8,1,-105,[4,"56kCFc5VFALZG9Y6YLE3fJ"],[66],[1],67]],[0,"70t8e1RWhC2K836sZ79SaK",1,0],[1,2.086,-0.129,-6.076],[3,-0.3485563793496643,-0.6037139820716739,-0.620911502149303,0.3584784299850013],[1,-90.805,-120.01,-1.393]],[17,"track_b-004",4,[[8,1,-106,[4,"b4VV9fhKJPzZrXlRg9cqn9"],[68],[1],69]],[0,"69u0VFQt1Jg5ULBpQT6AuF",1,0],[1,11.463,0,-6.858],[3,-0.4999999999999999,-0.5000000000000001,-0.49999999999999983,0.5000000000000001],[1,-89.99999999999997,-90,0]],[11,"cactus1",6,[[8,1,-107,[4,"076B6CSUdAEqvj+Oatgc97"],[70],[1],71]],[0,"2e9pLnLDRML6IVTbiPZp2C",1,0],[1,-15.14,-2.338,-19.934],[3,-0.7013108129515873,0.09035011697382403,0.090350116973824,0.7013108129515875],[1,2.305,2.3049999999999997,2.3049999999999997],[1,-89.99999999999999,14.681999999999997,0]],[11,"cactus2",6,[[8,1,-108,[4,"929F/zL1pInY9qRkd2oFrx"],[72],[1],73]],[0,"a7oSu8kTJPn7YpJBQddKAN",1,0],[1,2.677,-2.338,-28.749],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,2,2,2],[1,-89.99999999999999,0,0]],[11,"cactus3",6,[[8,1,-109,[4,"f5DxcAp4xKC51pMZrXTDHO"],[74],[1],75]],[0,"5bLq15OjtKrr8ZXuk/69aj",1,0],[1,-17.256,-2.338,0.017],[3,-0.23241562814595504,-0.6678195682918563,-0.6678195682918561,0.23241562814595518],[1,2.485,2.485,2.485],[1,-89.99999999999999,-141.622,-6.3611093629270335e-15]],[11,"cactus4",6,[[8,1,-110,[4,"a8clXH+aNFAYsWYiguJadF"],[76],[1],77]],[0,"4cSW0k5LZMvbStfUlFrvIP",1,0],[1,-6.658,-2.338,-25.582],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,2,2,2],[1,-89.99999999999999,0,0]],[11,"cactus5",6,[[8,1,-111,[4,"095YJuJB1Kc4twlrA4jyri"],[78],[1],79]],[0,"1c8tMCMzZOEL/h31pxv2pZ",1,0],[1,18.278,-2.381,-17.73],[3,-0.7071067811865477,2.9439233600320786e-17,-2.9439233600320774e-17,0.7071067811865474],[1,2.425,2.425,2.4250000000000003],[1,-90.00000000000003,0,-4.770832022195275e-15]],[11,"cactus6",6,[[8,1,-112,[4,"a40YKZfwdBqqZIqfRiQK63"],[80],[1],81]],[0,"9f0SNHbw1GTpkgv1eQ1HYx",1,0],[1,-11.135,-6.711,-12.744],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,2,2,2],[1,-89.99999999999999,0,0]],[11,"cactus7",6,[[8,1,-113,[4,"fe9bt3OZ9Bsat5pAU8s+pg"],[82],[1],83]],[0,"9ctAZnngdKW4CQkTz0AZmJ",1,0],[1,11.074,-6.73,-12.535],[3,-0.6814489598365517,-0.1887519937316734,-0.18875199373167337,0.6814489598365518],[1,2.425,2.425,2.4250000000000003],[1,-90,-30.964,0]],[11,"stalagnate1",5,[[8,1,-114,[4,"3dTILL9QJEm47sDX9mHz1w"],[84],[1],85]],[0,"87QSueD2VNeKKJleGwacKy",1,0],[1,-18.777,-2.062,-2.49],[3,-0.6208493796612475,0.10207715542766149,0.17994311887321915,0.7561393893219819],[1,1.935085132633037,1.6238664515664734,1.2959999999999998],[1,-80.439,22.449,8.359]],[11,"stalagnate2",5,[[8,1,-115,[4,"a4kIifBTBB5LBX16C+zAaR"],[86],[1],87]],[0,"abOXvixcVJRJ64wl5T+7DR",1,0],[1,-5.838,-2.522,-6.313],[3,0.1100649717573405,0.563738729504572,0.8034178655916498,-0.15685687774778853],[1,2.095,2.446,2.55],[1,-108.53,200.894,-7.351]],[11,"stalagnate3",5,[[8,1,-116,[4,"60L4q0AqRIZJt+oQPC/cth"],[88],[1],89]],[0,"75dJaJ545OLJt9RAP4gafK",1,0],[1,12.521,-2.338,-5.59],[3,-0.49175003949742435,-0.13060184471607103,-0.22098906261178547,0.8320389960915325],[1,2,1.54320987654321,2],[1,-64.455,-26.595,-13.845]],[11,"stalagnate4",5,[[8,1,-117,[4,"7e1G+7JIRONbORnnRAihDS"],[90],[1],91]],[0,"e86ORI8bBDBpmmMgULF/TY",1,0],[1,9.985,-2.522,-3.14],[3,-0.5664062369248328,0,0,0.8241261886220157],[1,2,1.54320987654321,2],[1,-69,0,0]],[11,"stalagnate5",5,[[8,1,-118,[4,"f3J+qeYFJO76TQe6AK9Bur"],[92],[1],93]],[0,"a2omStVu9PL6mip8DvnTrQ",1,0],[1,-7.987,-2.338,-2.775],[3,-0.5603452984743544,-0.1262045002847152,-0.17986723012730396,0.7985820872721248],[1,2,1.54320987654321,2],[1,-71.902,-24.048,-8.386]],[11,"stalagnate6",5,[[8,1,-119,[4,"23JL5eck9MVpeyX86hOT4I"],[94],[1],95]],[0,"799WXN+XpKtKoPXXL/Wnmp",1,0],[1,1.532,-2.148,-8.211],[3,-0.635591093378934,-0.042633195691886165,-0.08590186245546738,0.7660465016362586],[1,2.59,2.034,1.69],[1,-79.757,-10.081,-4.44]],[11,"stalagnate7",5,[[8,1,-120,[4,"78JaTmhRpHdKwMctfQk1Zp"],[96],[1],97]],[0,"9c7PjXCtdKSIegHZyXpEbc",1,0],[1,16.809,-1.77,-8.418],[3,-0.0583770357466156,0.5714063467661649,0.8143500070774874,0.08319239475865443],[1,2.974,2.609,3.132],[1,-109.508,169.012,3.944]],[11,"stalagnate8",5,[[8,1,-121,[4,"12xEsMB0pKaqwF8zlxOxxb"],[98],[1],99]],[0,"17TeBDOThPT7y56LUmFIGT",1,0],[1,-23.229,-2.338,0.6558641975308674],[3,-0.5309970848531473,0.1880898092891236,0.29807919278077527,0.7705927032811833],[1,1.4259290575743224,1.4016265312944634,1.583],[1,-74.481,38.901,15.049]],[11,"stalagnate9",5,[[8,1,-122,[4,"88rZjkYZlGYrckdXcGsuLt"],[100],[1],101]],[0,"aeKxo2mMBHxrOfldcs1/+Z",1,0],[1,-25.693,-2.338,-1.198],[3,0.0253158840768229,0.5538016258374873,0.8313958000892414,-0.03799853717098835],[1,1.776,1.37,1.776],[1,-112.579,184.832,-2.014]],[11,"stalagnate10",5,[[8,1,-123,[4,"58gwBCF0hNdItJcjzD1H2Y"],[102],[1],103]],[0,"78NDyr5fFObr9FaIvGVQtz",1,0],[1,25.952,-1.555,-1.657],[3,-0.6041397448925735,-0.03913175286180848,-0.08755233529273862,0.7910868872278736],[1,1.602,1.258,0.878],[1,-75.181,-9.695,-5.235]],[11,"RoadSign",3,[[8,1,-124,[4,"81GzNpTUlGmra9AEfZBA0s"],[104],[1],105]],[0,"a6gBD6NXpLUYC5IptgUG2l",1,0],[1,-16.784,-2.834,-44.114],[3,-0.6830127018922193,0.18301270189221935,0.1830127018922193,0.6830127018922193],[1,1.871,1.871,1.871],[1,-90,30.000000000000004,-6.3611093629270335e-15]],[11,"skeleton",3,[[8,1,-125,[4,"51PPifOr5EHY65d06eDZ76"],[106],[1],107]],[0,"4d23gCJQxFoaMdPtNAw5dd",1,0],[1,17.714,-2.392,1.842],[3,-0.6095236061020706,-0.35844242718228503,-0.35844242718228503,0.6095236061020708],[1,1.3149999999999997,1.3149999999999995,1.3149999999999997],[1,-89.99999999999997,-60.91699999999999,-9.54166404439055e-15]],[11,"grass1",3,[[8,1,-126,[4,"3eB6fm1IxEwbYSHWT6DozZ"],[108],[1],109]],[0,"d6YkqjsC5MuLoGQhtNX7Hd",1,0],[1,5.908,-2.045,-23.534],[3,-0.6150937993718225,-0.34879738814150557,-0.3487973881415055,0.6150937993718226],[1,1.177,1.177,1.177],[1,-89.99999999999999,-59.111999999999995,0]],[11,"grass2",3,[[8,1,-127,[4,"f9adlYRZVJlLWM2G5pcoyN"],[110],[1],111]],[0,"02+1nkrNtB26BvilEeZf/1",1,0],[1,-15.838,-2.045,-10.011],[3,-0.6299386760424265,0.32121217975960203,0.32121217975960187,0.6299386760424265],[1,1.2,1.2000000000000002,1.2],[1,-90,54.035,-1.2722218725854067e-14]],[81,"dj9_ground",3,[-128],[0,"067K9/4NFAha3LE3jYZwm5",1,0],[1,0,-2.803,27.138],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,2.445,3.597,2.577],[1,-89.99999999999999,0,0]],[24,0,null,65,[23,"b6knkowZ1OGYspNXoBnI8j",-129,[28,"9b78EUf4VPgpUmJooXlfVf",1,[[19,"floor",["_name"],7],[9,["_lpos"],7,[1,0,-4.440892098500626e-16,0]],[9,["_lrot"],7,[3,0,0,0,1]],[9,["_euler"],7,[1,0,0,0]],[19,true,["_active"],7]]],112]],[11,"grass3",3,[[8,1,-130,[4,"41tvP1/FtL0aYo1iCVMs/K"],[113],[1],114]],[0,"6b4NA9fJNGRpo66Ltcw6pm",1,0],[1,-4.498,-2.045,-69.464],[3,-0.6299386760424265,0.32121217975960203,0.32121217975960187,0.6299386760424265],[1,1.595,1.595,1.595],[1,-90,54.035,-1.2722218725854067e-14]],[11,"grass4",3,[[8,1,-131,[4,"c564ZcAbxAb72AfATW/jzX"],[115],[1],116]],[0,"f7uWKcC4tBGL9tO2Tl79oe",1,0],[1,6.751,-2.045,-74.138],[3,-0.6299386760424265,0.32121217975960203,0.32121217975960187,0.6299386760424265],[1,1.595,1.595,1.595],[1,-90,54.035,-1.2722218725854067e-14]],[11,"dj9_b_gate",3,[[25,-132,[4,"b2nBJUuUNMHotqPCK81rxR"],[117],[1],118]],[0,"119dIT99tLEZx4h9nmg8f7",1,0],[1,0,-6.592052980132452,-12.372185430463581],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,1.3245033112582782,1.3245033112582782,1.3245033112582782],[1,-89.99999999999999,0,0]]],0,[0,3,1,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,3,0,-1,14,0,-2,15,0,-3,16,0,-4,17,0,-5,18,0,-6,19,0,-7,20,0,-8,21,0,-9,22,0,-10,23,0,-11,24,0,-12,25,0,-13,26,0,-14,27,0,-15,28,0,-16,29,0,-17,30,0,-18,31,0,-19,32,0,-20,33,0,-2,4,0,-3,6,0,-4,5,0,-5,61,0,-6,62,0,-7,63,0,-8,64,0,-9,65,0,-10,67,0,-11,68,0,-12,69,0,-1,34,0,-2,35,0,-3,36,0,-4,37,0,-5,38,0,-6,39,0,-7,40,0,-8,41,0,-9,42,0,-10,43,0,-1,51,0,-2,52,0,-3,53,0,-4,54,0,-5,55,0,-6,56,0,-7,57,0,-8,58,0,-9,59,0,-10,60,0,-1,44,0,-2,45,0,-3,46,0,-4,47,0,-5,48,0,-6,49,0,-7,50,0,1,8,0,1,8,0,1,9,0,1,9,0,1,10,0,1,10,0,1,11,0,1,11,0,1,12,0,1,13,0,1,14,0,1,15,0,1,16,0,1,17,0,1,18,0,1,19,0,1,20,0,1,21,0,1,22,0,1,23,0,1,24,0,1,25,0,1,26,0,1,27,0,1,28,0,1,29,0,1,30,0,1,31,0,1,32,0,1,33,0,1,34,0,1,35,0,1,36,0,1,37,0,1,38,0,1,39,0,1,40,0,1,41,0,1,42,0,1,43,0,1,44,0,1,45,0,1,46,0,1,47,0,1,48,0,1,49,0,1,50,0,1,51,0,1,52,0,1,53,0,1,54,0,1,55,0,1,56,0,1,57,0,1,58,0,1,59,0,1,60,0,1,61,0,1,62,0,1,63,0,1,64,0,-1,66,0,3,66,0,1,67,0,1,68,0,1,69,0,11,1,2,0,3,132],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,9,-1,2,-1,2,-1,2],[147,148,2,8,2,8,2,8,149,150,0,26,0,26,0,3,0,3,0,3,0,3,0,3,0,3,0,9,0,9,0,9,0,9,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,26,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,9,0,27,0,53,0,53,0,54,0,27,0,54,0,27,0,28,0,55,0,151,0,56,0,57,0,28,0,57,0,55,0,56,0,28,0,152,0,153,0,11,0,11,154,0,11,0,11,2,155]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"metallic":0,"SpecularIntensity":0},"mainColor",8,[4,4286611584],"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[29,29,29,1]],[[[6,".bin",3638699621,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":34704,"length":4350,"count":2175,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":82686,"length":5694,"count":2847,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":34704,"count":482,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":39054,"length":43632,"count":606,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31],[0,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,41]]},"minPosition",8,[1,-0.4986000061035156,-0.3737502992153168,0.5198000073432922],"maxPosition",8,[1,0.4985998868942261,0.35904961824417114,1.7999000549316406]]],-1],0,0,[],[],[]],[[[6,".bin",2334676334,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":160920,"length":16968,"count":8484,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":269976,"length":8484,"count":4242,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":160920,"count":2235,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":177888,"length":92088,"count":1279,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29],[0,1,2,3,5,6,7,8,11,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]]},"minPosition",8,[1,-0.5028993487358093,-0.19907136261463165,-0.0005301535129547119],"maxPosition",8,[1,0.5028993487358093,0.18578872084617615,1.0404194593429565]]],-1],0,0,[],[],[]],[[[6,".bin",2357942386,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":83304,"length":20832,"count":5208,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":83304,"count":1157,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,10,11,15,16,17]]},"minPosition",8,[1,-0.2400171309709549,-0.17893320322036743,0.011097908020019531],"maxPosition",8,[1,0.2400171011686325,0.1379806101322174,1.0428295135498047]]],-1],0,0,[],[],[]],[[[6,".bin",3279106338,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":83952,"length":20736,"count":5184,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":83952,"count":1749,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0096638202667236,-0.2667398154735565,-0.30096766352653503],"maxPosition",8,[1,0.41438794136047363,0.2667401134967804,0.3333384692668915]]],-1],0,0,[],[],[]],[[[18,"Skin-4",297628094,["Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31/Bip001 R Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21/Bip001 R Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11/Bip001 R Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0"],[[[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-0.5912127494812012,2.2610207976725416e-12,8.198938985515269e-7,1],[7,-0.09136133641004562,0.01644708402454853,-0.9956820607185364,0,0.0413360521197319,-0.9989392161369324,-0.020293783396482468,0,-0.9949594736099243,-0.0430116280913353,0.09058456867933273,0,0.5795159339904785,0.026998084038496017,-0.14855283498764038,1],[7,0.09136105328798294,-0.016444426029920578,-0.9956821203231812,0,0.0413363054394722,-0.9989392757415771,0.020291127264499664,0,-0.9949595332145691,-0.04301163926720619,-0.09058438986539841,0,0.5795159935951233,0.026998097077012062,0.14855273067951202,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.779286801815033,0.0007972195162437856,2.211166583165891e-9,1],[7,0.9877861738204956,-0.0000013777178082818864,0.15581563115119934,0,0.0000013609737834485713,1,2.141426165280791e-7,0,-0.15581564605236053,5.338804953680665e-10,0.9877861142158508,0,0.09451815485954285,0.013598349876701832,-0.9579079151153564,1],[7,-0.9877861738204956,-0.0000013640960787597578,0.15581563115119934,0,-0.0000013473520539264427,1,2.1307485553734296e-7,0,-0.15581564605236053,5.338806619015202e-10,-0.9877861142158508,0,0.09451815485954285,0.013598348945379257,0.9579079151153564,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.6517610549926758,0.0006205273675732315,1.721093267903484e-9,1],[7,0.09278407692909241,-0.002894019242376089,-0.9956821203231812,0,0.18711382150650024,-0.9821286797523499,0.020291099324822426,0,-0.9779465794563293,-0.1881885677576065,-0.090584397315979,0,0.2693028450012207,0.06714131683111191,0.14855273067951202,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065994128584862,0.05631287023425102,0.1448259800672531,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.0011852979660034,0.043884966522455215,2.4582378355120227e-9,1],[7,0.679435133934021,-0.009396422654390335,0.733675479888916,0,0.030187129974365234,0.9994293451309204,-0.015155382454395294,0,-0.73311448097229,0.03244464844465256,0.6793310642242432,0,0.5823630690574646,-0.015518228523433208,-0.7606297135353088,1],[7,0.6527173519134521,0.18889236450195312,0.733675479888916,0,-0.262199342250824,0.9648948311805725,-0.015155388973653316,0,-0.7107822895050049,-0.18247707188129425,0.6793310642242432,0,0.3644840121269226,0.0947427898645401,-0.7606297135353088,1],[7,0.6527173519134521,-0.7335247993469238,0.18947650492191315,0,-0.262199342250824,0.01592371240258217,0.9648824334144592,0,-0.7107822895050049,-0.6794760823249817,-0.18193607032299042,0,0.21019066870212555,0.7607048749923706,0.09413708001375198,1],[7,0.4313969910144806,-0.8821657299995422,0.18889226019382477,0,-0.24846728146076202,0.08510086685419083,0.9648948311805725,0,-0.8672718405723572,-0.4631862938404083,-0.18247708678245544,0,0.3132701814174652,0.6917825937271118,0.049049828201532364,1],[7,0.21573065221309662,-0.9580084085464478,0.18889214098453522,0,-0.22205688059329987,0.14024567604064941,0.9648948907852173,0,-0.9508684277534485,-0.2501021921634674,-0.18247710168361664,0,0.43911993503570557,0.6066890954971313,0.049049898982048035,1],[7,0.41265609860420227,-0.8910863399505615,0.18889230489730835,0,-0.24661323428153992,0.0903332531452179,0.9648948311805725,0,-0.8768676519393921,-0.44475308060646057,-0.18247711658477783,0,0.3246106207370758,0.6913455128669739,0.08480937778949738,1],[7,-0.011627820320427418,-0.9819290637969971,0.18889184296131134,0,-0.18361148238182068,0.18778927624225616,0.9648949503898621,0,-0.9829300045967102,-0.023463087156414986,-0.18247707188129425,0,0.5418837666511536,0.4948022961616516,0.04905002564191818,1],[7,0.045211464166641235,-0.9809566140174866,0.18889205157756805,0,-0.19417043030261993,0.1768500655889511,0.9648948907852173,0,-0.9799253940582275,-0.08030156046152115,-0.18247711658477783,0,0.5035908222198486,0.5338056087493896,0.08480949699878693,1],[7,0.19543495774269104,-0.9623539447784424,0.1888922154903412,0,-0.21904322504997253,0.144907608628273,0.9648948311805725,0,-0.9559420347213745,-0.22994975745677948,-0.18247710168361664,0,0.4449288249015808,0.6048593521118164,0.08480942249298096,1],[7,-0.011072846129536629,0.009306480176746845,0.9998953938484192,0,-0.6375018954277039,0.7703174352645874,-0.014229390770196915,0,-0.770369291305542,-0.6375927925109863,-0.0025967066176235676,0,0.43724310398101807,0.4854069948196411,-0.3945971429347992,1],[7,0.3621976673603058,-0.9127609133720398,0.18889228999614716,0,-0.24117779731750488,0.10397803783416748,0.9648948311805725,0,-0.9003587365150452,-0.39503929018974304,-0.18247711658477783,0,0.36743295192718506,0.6647297739982605,0.12062196433544159,1],[7,0.20004524290561676,-0.9614060521125793,0.18889227509498596,0,-0.21973523497581482,0.14385610818862915,0.9648948311805725,0,-0.9548287987709045,-0.23452891409397125,-0.18247711658477783,0,0.44272640347480774,0.5975697636604309,0.12062195688486099,1],[7,-0.008620883338153362,0.011614492163062096,0.9998953938484192,0,-0.4421120285987854,0.8968470096588135,-0.0142293069511652,0,-0.8969184160232544,-0.44218847155570984,-0.002596706384792924,0,0.5065199136734009,0.378546804189682,-0.3945971429347992,1],[7,-0.005701689049601555,0.013292858377099037,0.9998953938484192,0,-0.22276060283184052,0.9747693538665771,-0.014229070395231247,0,-0.9748564958572388,-0.22281843423843384,-0.0025967066176235676,0,0.5561479330062866,0.256915420293808,-0.3945971131324768,1],[7,0.031947486102581024,-0.9814780354499817,0.18889185786247253,0,-0.19176213443279266,0.17945833504199982,0.9648948907852173,0,-0.98092120885849,-0.06704826653003693,-0.18247713148593903,0,0.5166044235229492,0.516516387462616,0.1206221729516983,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.03582480549812317,-0.005114830564707518,0.14482596516609192,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.07855876535177231,-0.005114828702062368,0.14482596516609192,1],[7,-0.09278476238250732,0.0028966728132218122,-0.9956820607185364,0,0.18711355328559875,-0.9821286797523499,-0.0202938225120306,0,-0.9779465794563293,-0.1881885528564453,0.09058457612991333,0,0.2693028151988983,0.06714130192995071,-0.14855283498764038,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065995618700981,0.05631287023425102,-0.14482605457305908,1],[7,-0.6794352531433105,0.009393678978085518,0.7336754202842712,0,0.030185265466570854,0.9994293451309204,0.015157398767769337,0,-0.7331144213676453,0.032444652169942856,-0.6793310642242432,0,0.5823630094528198,-0.015518231317400932,0.7606297135353088,1],[7,-0.6527166366577148,-0.18889500200748444,0.7336754202842712,0,-0.26220113039016724,0.9648942947387695,0.015157399699091911,0,-0.7107822895050049,-0.18247707188129425,-0.6793310046195984,0,0.3644840121269226,0.0947427824139595,0.7606297135353088,1],[7,-0.6527166366577148,0.733524739742279,0.18947914242744446,0,-0.26220113039016724,0.01592572219669819,-0.9648818373680115,0,-0.7107822895050049,-0.6794760823249817,0.18193607032299042,0,0.21019066870212555,0.7607048749923706,-0.09413707256317139,1],[7,-0.43139633536338806,0.8821654319763184,0.18889488279819489,0,-0.24846845865249634,0.08510326594114304,-0.9648942947387695,0,-0.8672718405723572,-0.4631862938404083,0.18247708678245544,0,0.3132701516151428,0.691782534122467,-0.04904983192682266,1],[7,-0.21573005616664886,0.9580079913139343,0.18889476358890533,0,-0.22205747663974762,0.14024828374385834,-0.9648942947387695,0,-0.9508684277534485,-0.2501022219657898,0.18247710168361664,0,0.4391199052333832,0.6066890954971313,-0.04904991015791893,1],[7,-0.41265544295310974,0.8910860419273376,0.18889488279819489,0,-0.24661433696746826,0.09033563733100891,-0.9648942947387695,0,-0.8768676519393921,-0.4447530508041382,0.18247711658477783,0,0.3246106207370758,0.6913455128669739,-0.08480940014123917,1],[7,0.011628356762230396,0.9819284677505493,0.18889464437961578,0,-0.1836114525794983,0.18779213726520538,-0.9648943543434143,0,-0.9829300045967102,-0.023463085293769836,0.18247707188129425,0,0.5418837666511536,0.4948022961616516,-0.04904993623495102,1],[7,-0.045210957527160645,0.9809561371803284,0.18889454007148743,0,-0.1941705346107483,0.17685258388519287,-0.9648943543434143,0,-0.9799253940582275,-0.08030154556035995,0.18247710168361664,0,0.5035908222198486,0.5338056087493896,-0.0848095566034317,1],[7,-0.19543437659740448,0.962353527545929,0.18889480829238892,0,-0.2190437614917755,0.14491018652915955,-0.9648942947387695,0,-0.9559420347213745,-0.22994975745677948,0.18247711658477783,0,0.4449287950992584,0.6048593521118164,-0.08480944484472275,1],[7,-0.36219701170921326,0.9127606153488159,0.18889492750167847,0,-0.24117879569530487,0.10398054122924805,-0.9648942947387695,0,-0.9003587365150452,-0.39503926038742065,0.18247710168361664,0,0.36743292212486267,0.6647297739982605,-0.12062196433544159,1],[7,-0.200044646859169,0.9614056348800659,0.1888948678970337,0,-0.219735786318779,0.14385870099067688,-0.9648942947387695,0,-0.9548287987709045,-0.23452891409397125,0.18247711658477783,0,0.44272640347480774,0.5975697040557861,-0.12062199413776398,1],[7,0.011074633337557316,-0.009308639913797379,0.9998953342437744,0,-0.6375018954277039,0.7703174352645874,0.014232194982469082,0,-0.7703692317008972,-0.6375928521156311,0.0025967068504542112,0,0.43724310398101807,0.4854070246219635,0.3945971727371216,1],[7,0.008622139692306519,-0.011617041192948818,0.9998953342437744,0,-0.4421120285987854,0.8968469500541687,0.014232148416340351,0,-0.8969183564186096,-0.4421885311603546,0.0025967066176235676,0,0.5065199136734009,0.378546804189682,0.3945971727371216,1],[7,0.005702346563339233,-0.013295730575919151,0.9998953342437744,0,-0.2227606326341629,0.9747693538665771,0.01423201709985733,0,-0.9748564958572388,-0.22281847894191742,0.002596707083284855,0,0.5561479330062866,0.2569153904914856,0.3945971429347992,1],[7,-0.031946949660778046,0.9814774990081787,0.18889456987380981,0,-0.19176223874092102,0.17946109175682068,-0.9648943543434143,0,-0.98092120885849,-0.06704827398061752,0.18247713148593903,0,0.5166044235229492,0.5165164470672607,-0.12062213569879532,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.03582480177283287,-0.005114830564707518,-0.14482606947422028,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",757255463,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":88488,"length":17700,"count":4425,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":88488,"count":1229,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4625711739063263,-0.6519230604171753,0.8810482025146484],"maxPosition",8,[1,0.4625711739063263,0.5147483944892883,1.987679362297058]]],-1],0,0,[],[],[]],[[[18,"Skin-8",447864749,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31/Bip001 R Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21/Bip001 R Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11/Bip001 R Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck"],[[[7,-0.09136135131120682,0.01644754968583584,-0.9956820607185364,0,0.041336022317409515,-0.9989392161369324,-0.020294249057769775,0,-0.9949594736099243,-0.04301164299249649,0.09058456122875214,0,0.5797671675682068,0.027008961886167526,-0.14857570827007294,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-0.6520135402679443,0.0006207284168340266,1.7216511549733582e-9,1],[7,0.0000013868000223737909,0.00000311533517560747,1,0,6.123234262925839e-17,-1,0.00000311533517560747,0,1,-4.320285448833339e-12,-0.0000013868001360606286,0,-0.5914652347564697,2.5859642118625237e-12,8.202440540117095e-7,1],[7,0.09136103838682175,-0.01644422858953476,-0.9956821203231812,0,0.041336335241794586,-0.9989392757415771,0.020290929824113846,0,-0.9949595332145691,-0.04301165044307709,-0.09058438241481781,0,0.5797672271728516,0.02700897864997387,0.14857560396194458,1],[7,-0.652716875076294,0.7335246205329895,0.18947939574718475,0,-0.2622013986110687,0.015925809741020203,-0.9648816585540771,0,-0.7107821702957153,-0.6794763207435608,0.1819361001253128,0,0.21036994457244873,0.7608765959739685,-0.0941830724477768,1],[7,-0.652716875076294,-0.18889524042606354,0.7336752414703369,0,-0.2622013986110687,0.9648940563201904,0.015157476998865604,0,-0.7107821702957153,-0.18247711658477783,-0.6793312430381775,0,0.3646632730960846,0.09478891640901566,0.7608013153076172,1],[7,-0.6794353127479553,0.009393456391990185,0.7336753010749817,0,0.030185053125023842,0.9994294047355652,0.015157511457800865,0,-0.7331143021583557,0.03244457393884659,-0.6793311238288879,0,0.5825480222702026,-0.01552632637321949,0.7608013153076172,1],[7,-0.43139657378196716,0.8821653127670288,0.18889516592025757,0,-0.24846872687339783,0.08510344475507736,-0.9648941159248352,0,-0.8672718405723572,-0.4631865322589874,0.18247713148593903,0,0.31348901987075806,0.6918995976448059,-0.04909594729542732,1],[7,-0.21573011577129364,0.9580078125,0.18889521062374115,0,-0.22205767035484314,0.14024870097637177,-0.9648941159248352,0,-0.950868546962738,-0.25010234117507935,0.18247711658477783,0,0.4393600523471832,0.6067522764205933,-0.04909592494368553,1],[7,-0.4126555919647217,0.8910859227180481,0.18889515101909637,0,-0.24661454558372498,0.09033582359552383,-0.9648941159248352,0,-0.8768675923347473,-0.4447532296180725,0.18247713148593903,0,0.32483190298080444,0.6914579272270203,-0.08485550433397293,1],[7,0.011628418229520321,0.9819283485412598,0.18889550864696503,0,-0.18361154198646545,0.18779301643371582,-0.9648940563201904,0,-0.982930064201355,-0.023463208228349686,0.18247711658477783,0,0.5421320199966431,0.49480825662612915,-0.0490957647562027,1],[7,0.032378945499658585,0.9814632534980774,0.18889544904232025,0,-0.1796015202999115,0.19163164496421814,-0.9648940563201904,0,-0.9832065105438232,-0.0026836602482944727,0.18247710168361664,0,0.54441237449646,0.4923803508281708,-0.0848553329706192,1],[7,-0.1954343616962433,0.9623534083366394,0.18889518082141876,0,-0.21904388070106506,0.1449105441570282,-0.9648941159248352,0,-0.9559420347213745,-0.22994981706142426,0.18247711658477783,0,0.445170134305954,0.6049174070358276,-0.08485546708106995,1],[7,-0.36219725012779236,0.9127604961395264,0.18889518082141876,0,-0.24117903411388397,0.10398071259260178,-0.9648940563201904,0,-0.9003587961196899,-0.39503952860832214,0.18247714638710022,0,0.36766016483306885,0.664829671382904,-0.12066807597875595,1],[7,0.01107463426887989,-0.009309056214988232,0.9998953342437744,0,-0.6375020146369934,0.7703172564506531,0.014232516288757324,0,-0.7703691720962524,-0.6375929117202759,0.0025964390952140093,0,0.437437504529953,0.48556801676750183,0.39459672570228577,1],[7,-0.1413317769765854,0.9717735648155212,0.18889525532722473,0,-0.21060068905353546,0.1569288969039917,-0.9648940563201904,0,-0.9673017859458923,-0.17615166306495667,0.18247713148593903,0,0.47841906547546387,0.5696454644203186,-0.12066803127527237,1],[7,0.008622056804597378,-0.011617474257946014,0.9998953342437744,0,-0.4421120882034302,0.8968468308448792,0.014232502318918705,0,-0.8969184160232544,-0.44218847155570984,0.0025964390952140093,0,0.5067462921142578,0.37865835428237915,0.39459672570228577,1],[7,0.005702184047549963,-0.013296224176883698,0.9998953342437744,0,-0.22276057302951813,0.9747691750526428,0.014232464134693146,0,-0.9748564958572388,-0.22281838953495026,0.0025964388623833656,0,0.5563940405845642,0.256971538066864,0.39459672570228577,1],[7,0.08719360083341599,0.9781184196472168,0.18889550864696503,0,-0.1686081886291504,0.20137202739715576,-0.9648939967155457,0,-0.9818189740180969,0.052283257246017456,0.18247714638710022,0,0.5752665996551514,0.44879305362701416,-0.12066791206598282,1],[7,0.6527177691459656,-0.7335246801376343,0.18947617709636688,0,-0.26219916343688965,0.015923431143164635,0.9648823738098145,0,-0.7107822299003601,-0.6794763207435608,-0.18193602561950684,0,0.2103699892759323,0.7608765959739685,0.09418296068906784,1],[7,0.6527177691459656,0.18889203667640686,0.7336753606796265,0,-0.26219916343688965,0.9648947715759277,-0.015155107714235783,0,-0.7107822299003601,-0.18247702717781067,0.6793312430381775,0,0.364663302898407,0.0947887971997261,-0.760801374912262,1],[7,0.6794351935386658,-0.009396791458129883,0.7336754202842712,0,0.03018740564584732,0.9994292855262756,-0.015155143104493618,0,-0.7331143617630005,0.03244468942284584,0.6793311834335327,0,0.5825480222702026,-0.015526454895734787,-0.760801374912262,1],[7,0.43139737844467163,-0.8821656107902527,0.18889200687408447,0,-0.24846720695495605,0.08510061353445053,0.9648947715759277,0,-0.867271900177002,-0.46318650245666504,-0.18247702717781067,0,0.31348907947540283,0.6918996572494507,0.04909580200910568,1],[7,0.21573083102703094,-0.958008348941803,0.18889209628105164,0,-0.22205685079097748,0.14024563133716583,0.9648947715759277,0,-0.9508686065673828,-0.25010231137275696,-0.18247701227664948,0,0.4393600821495056,0.606752336025238,0.0490957535803318,1],[7,0.41265639662742615,-0.8910862803459167,0.1888919621706009,0,-0.24661308526992798,0.09033294022083282,0.9648947715759277,0,-0.8768676519393921,-0.4447532296180725,-0.18247702717781067,0,0.3248319923877716,0.691457986831665,0.08485537767410278,1],[7,-0.01162785291671753,-0.9819288849830627,0.1888926476240158,0,-0.18361148238182068,0.18779009580612183,0.9648946523666382,0,-0.9829301238059998,-0.023463208228349686,-0.18247701227664948,0,0.5421320796012878,0.49480828642845154,0.04909546673297882,1],[7,-0.03237831965088844,-0.9814639687538147,0.18889223039150238,0,-0.1796015202999115,0.1916283816099167,0.9648947715759277,0,-0.9832065105438232,-0.0026836604811251163,-0.18247699737548828,0,0.5444124341011047,0.49238041043281555,0.08485521376132965,1],[7,0.19543510675430298,-0.9623540043830872,0.1888919472694397,0,-0.21904310584068298,0.1449073702096939,0.9648948311805725,0,-0.9559420943260193,-0.22994981706142426,-0.1824769824743271,0,0.44517016410827637,0.6049174666404724,0.08485535532236099,1],[7,0.3621980547904968,-0.912760853767395,0.18889197707176208,0,-0.2411777228116989,0.10397772490978241,0.9648947715759277,0,-0.9003588557243347,-0.39503952860832214,-0.18247704207897186,0,0.3676602244377136,0.664829671382904,0.1206679567694664,1],[7,-0.011072549037635326,0.009306586347520351,0.999895453453064,0,-0.6375020146369934,0.7703173756599426,-0.014229284599423409,0,-0.770369291305542,-0.6375927925109863,-0.0025964092928916216,0,0.43743765354156494,0.4855678677558899,-0.39459678530693054,1],[7,0.1413324624300003,-0.9717741012573242,0.18889209628105164,0,-0.2106001079082489,0.1569257378578186,0.9648947715759277,0,-0.9673018455505371,-0.17615164816379547,-0.18247701227664948,0,0.47841912508010864,0.5696455240249634,0.12066787481307983,1],[7,-0.00862062070518732,0.011614633724093437,0.999895453453064,0,-0.4421119689941406,0.8968470096588135,-0.014229318127036095,0,-0.8969184756278992,-0.4421883523464203,-0.0025964088272303343,0,0.5067464113235474,0.3786581754684448,-0.39459678530693054,1],[7,-0.005701473914086819,0.01329326443374157,0.999895453453064,0,-0.22276043891906738,0.9747692942619324,-0.014229420572519302,0,-0.9748566150665283,-0.22281824052333832,-0.002596408361569047,0,0.5563941597938538,0.2569712698459625,-0.39459681510925293,1],[7,-0.08719304203987122,-0.9781190752983093,0.1888924092054367,0,-0.1686083823442459,0.20136888325214386,0.964894711971283,0,-0.9818190336227417,0.052283257246017456,-0.18247704207897186,0,0.5752666592597961,0.44879305362701416,0.12066774070262909,1],[7,0.09278402477502823,-0.0028937654569745064,-0.9956821203231812,0,0.18711385130882263,-0.9821286797523499,0.020290842279791832,0,-0.9779465794563293,-0.1881885826587677,-0.09058438986539841,0,0.26954975724220276,0.06718884408473969,0.14857560396194458,1],[7,1.6292068494294654e-7,0.0000017285350395468413,-1,0,-6.123234262925839e-17,-1.0000001192092896,-0.0000017285349258600036,0,-1,2.816753449409737e-13,-1.6292068494294654e-7,0,0.06091241538524628,0.05631287395954132,0.1448259949684143,1],[7,0.00000173619844190398,-4.37113598650285e-8,-1,0,-1.0000001192092896,-7.583035355239812e-14,-0.0000017361983282171423,0,6.123234924670329e-17,1,-4.37113598650285e-8,0,-0.03582480177283287,-0.005367308855056763,0.1448259800672531,1],[7,-0.09278484433889389,0.0028971126303076744,-0.9956820607185364,0,0.18711352348327637,-0.9821286797523499,-0.020294269546866417,0,-0.9779465794563293,-0.1881885677576065,0.09058456867933273,0,0.26954972743988037,0.06718883663415909,-0.14857570827007294,1],[7,1.6292068494294654e-7,0.0000017285350395468413,-1,0,-6.123234262925839e-17,-1.0000001192092896,-0.0000017285349258600036,0,-1,2.816753449409737e-13,-1.6292068494294654e-7,0,0.06091246008872986,0.05631287395954132,-0.14482605457305908,1],[7,0.0000017361816162519972,4.3704879715278366e-8,-1,0,-1.0000001192092896,7.594083375377439e-14,-0.0000017361815025651595,0,6.123234924670329e-17,1,4.3704879715278366e-8,0,-0.03582479804754257,-0.005367308855056763,-0.14482606947422028,1],[7,-0.9877861738204956,-0.0000017217240610989393,0.15581563115119934,0,-0.0000017006119605866843,1,2.687988853722345e-7,0,-0.15581564605236053,5.338807174126714e-10,-0.9877861142158508,0,0.0945574939250946,0.013598349876701832,0.9581573009490967,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-0.7795392870903015,0.0007974205655045807,2.2117245812580677e-9,1],[7,0.9877861738204956,-0.0000017353457906210679,0.15581563115119934,0,0.0000017142336901088129,1,2.698666321521159e-7,0,-0.15581564605236053,5.338804398569152e-10,0.9877861142158508,0,0.0945574939250946,0.013598348945379257,-0.9581573009490967,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-1.001437783241272,0.04388516768813133,2.458805381522211e-9,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[18,"Skin-0",907532434,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0"],[[[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.779286801815033,0.0007972195162437856,2.211166583165891e-9,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.0011852979660034,0.043884966522455215,2.4582378355120227e-9,1],[7,-0.9877861738204956,-0.0000013640960787597578,0.15581563115119934,0,-0.0000013473520539264427,1,2.1307485553734296e-7,0,-0.15581564605236053,5.338806619015202e-10,-0.9877861142158508,0,0.09451815485954285,0.013598348945379257,0.9579079151153564,1],[7,0.9877861738204956,-0.0000013777178082818864,0.15581563115119934,0,0.0000013609737834485713,1,2.141426165280791e-7,0,-0.15581564605236053,5.338804953680665e-10,0.9877861142158508,0,0.09451815485954285,0.013598349876701832,-0.9579079151153564,1],[7,0.679435133934021,-0.009396422654390335,0.733675479888916,0,0.030187129974365234,0.9994293451309204,-0.015155382454395294,0,-0.73311448097229,0.03244464844465256,0.6793310642242432,0,0.5823630690574646,-0.015518228523433208,-0.7606297135353088,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.6517610549926758,0.0006205273675732315,1.721093267903484e-9,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065994128584862,0.05631287023425102,0.1448259800672531,1],[7,0.09278407692909241,-0.002894019242376089,-0.9956821203231812,0,0.18711382150650024,-0.9821286797523499,0.020291099324822426,0,-0.9779465794563293,-0.1881885677576065,-0.090584397315979,0,0.2693028450012207,0.06714131683111191,0.14855273067951202,1],[7,0.09136105328798294,-0.016444426029920578,-0.9956821203231812,0,0.0413363054394722,-0.9989392757415771,0.020291127264499664,0,-0.9949595332145691,-0.04301163926720619,-0.09058438986539841,0,0.5795159935951233,0.026998097077012062,0.14855273067951202,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.03582480549812317,-0.005114830564707518,0.14482596516609192,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-0.5912127494812012,2.261027086045142e-12,8.198938985515269e-7,1],[7,-0.09136133641004562,0.01644708402454853,-0.9956820607185364,0,0.0413360521197319,-0.9989392161369324,-0.020293783396482468,0,-0.9949594736099243,-0.0430116280913353,0.09058456867933273,0,0.5795159339904785,0.026998084038496017,-0.14855283498764038,1],[7,0.00993429683148861,0.1417747437953949,-0.9898492097854614,0,-0.33035144209861755,-0.9338521361351013,-0.13706985116004944,0,-0.9438056349754333,0.32835978269577026,0.037558332085609436,0,1.3442072868347168,-0.04339667037129402,0.02137068845331669,1],[7,0.07747919112443924,0.11914558708667755,-0.989849328994751,0,-0.7419849634170532,-0.656254768371582,-0.13706964254379272,0,-0.6659243106842041,0.7450733184814453,0.03755815327167511,0,0.9895676374435425,-0.5987734198570251,0.021370820701122284,1],[7,-0.03296812251210213,0.1382458508014679,-0.9898492097854614,0,-0.035607077181339264,-0.9899214506149292,-0.1370699554681778,0,-0.998822033405304,0.03072669729590416,0.03755837306380272,0,1.4722743034362793,0.36104369163513184,0.02137068286538124,1],[7,-0.6794352531433105,0.009393678978085518,0.7336754202842712,0,0.030185265466570854,0.9994293451309204,0.015157398767769337,0,-0.7331144213676453,0.032444652169942856,-0.6793310642242432,0,0.5823630094528198,-0.015518231317400932,0.7606297135353088,1],[7,-0.09278476238250732,0.0028966728132218122,-0.9956820607185364,0,0.18711355328559875,-0.9821286797523499,-0.0202938225120306,0,-0.9779465794563293,-0.1881885528564453,0.09058457612991333,0,0.2693028151988983,0.06714130192995071,-0.14855283498764038,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065995618700981,0.05631287023425102,-0.14482605457305908,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.03582480177283287,-0.005114830564707518,-0.14482606947422028,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2127894837,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":58032,"length":16644,"count":4161,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":58032,"count":1209,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5992752313613892,-0.3575454652309418,-0.32224276661872864],"maxPosition",8,[1,0.5742387771606445,0.32127395272254944,0.38667166233062744]]],-1],0,0,[],[],[]],[[[18,"Skin-5",601637008,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head"],[[[7,9.469262352013175e-8,-0.000001047661271513789,1,0,-0.054780013859272,-0.9984984993934631,-0.000001040900883708673,0,0.9984984397888184,-0.0547800175845623,-1.5194135016827204e-7,0,-1.1092911958694458,0.10392146557569504,1.6897978127872193e-7,1]],8]]],0,0,[],[],[]],[[[6,".bin",2847528340,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":74304,"length":9870,"count":4935,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":142854,"length":7374,"count":3687,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":74304,"count":1032,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":84174,"length":58680,"count":815,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5,6,7,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,40,42,43,44],[0,5,6,7,12,14,15,16,40,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61]]},"minPosition",8,[1,-0.49858224391937256,-0.35680192708969116,0.00025278329849243164],"maxPosition",8,[1,0.49858224391937256,0.36018872261047363,1.7998555898666382]]],-1],0,0,[],[],[]],[[[6,".bin",2039963568,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":69192,"length":14832,"count":3708,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":69192,"count":961,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5118207931518555,-0.46719124913215637,1.0361391305923462],"maxPosition",8,[1,0.5118207931518555,0.43511635065078735,1.8632290363311768]]],-1],0,0,[],[],[]],[[[18,"Skin-2",190950168,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070/Bone071","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061/Bone062","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0/Bip001 R Toe0Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31/Bip001 R Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11/Bip001 R Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21/Bip001 R Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 HeadNub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057/Bone058","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32/Bip001 L Finger3Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02/Bip001 L Finger0Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12/Bip001 L Finger1Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22/Bip001 L Finger2Nub"],[[[7,7.510177368885707e-8,-0.000001404751969857898,1,0,-0.054779790341854095,-0.9984985589981079,-0.0000013985285249873414,0,0.9984984993934631,-0.054779790341854095,-1.519410233186136e-7,0,-1.109039068222046,0.10390757769346237,1.689412414407343e-7,1],[7,-0.15446878969669342,0.979030191898346,0.13280856609344482,0,-0.060603756457567215,0.12477964907884598,-0.9903316497802734,0,-0.9861368536949158,-0.1610240340232849,0.04005837440490723,0,1.5234413146972656,0.6005544662475586,-0.10540536791086197,1],[7,2.999058557051626e-9,-3.970805462216731e-9,-1,0,0.6026914119720459,-0.7979741096496582,4.9761088583011315e-9,0,-0.797974169254303,-0.6026914119720459,-6.90797031918975e-16,0,1.4910959005355835,0.5701611042022705,-3.0994689836916223e-7,1],[7,-1.9880808110883663e-7,-0.0000019151641481585102,-1,0,-0.10325250029563904,-0.994655191898346,0.0000019254553080827463,0,-0.994655191898346,0.10325250029563904,-3.2405831494680345e-16,0,1.626273274421692,-0.5996615886688232,5.444117050501518e-7,1],[7,0.00650806725025177,0.9911279678344727,0.13274919986724854,0,-0.12765033543109894,0.1324893683195114,-0.982930064201355,0,-0.991797924041748,-0.010548505000770092,0.12738007307052612,0,1.377053141593933,0.39531734585762024,-0.2268380969762802,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.779286801815033,0.0007972195162437856,2.211166583165891e-9,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.0011852979660034,0.043884966522455215,2.4582378355120227e-9,1],[7,-0.9877861738204956,-0.0000013640960787597578,0.15581563115119934,0,-0.0000013473520539264427,1,2.1307485553734296e-7,0,-0.15581564605236053,5.338806619015202e-10,-0.9877861142158508,0,0.09451815485954285,0.013598348945379257,0.9579079151153564,1],[7,0.30294865369796753,0.9437150955200195,0.13275140523910522,0,-0.08212769776582718,0.16463199257850647,-0.9829297065734863,0,-0.9494612812995911,0.2868746221065521,0.12738025188446045,0,1.2636154890060425,0.01781409978866577,-0.22683744132518768,1],[7,-0.09278476238250732,0.0028966728132218122,-0.9956820607185364,0,0.18711355328559875,-0.9821286797523499,-0.0202938225120306,0,-0.9779465794563293,-0.1881885528564453,0.09058457612991333,0,0.2693028151988983,0.06714130192995071,-0.14855283498764038,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065995618700981,0.05631287023425102,-0.14482605457305908,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.03582480177283287,-0.005114830564707518,-0.14482606947422028,1],[7,-0.09136133641004562,0.01644708402454853,-0.9956820607185364,0,0.0413360521197319,-0.9989392161369324,-0.020293783396482468,0,-0.9949594736099243,-0.0430116280913353,0.09058456867933273,0,0.5795159339904785,0.026998084038496017,-0.14855283498764038,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.07855876535177231,-0.005114828702062368,-0.14482606947422028,1],[7,0.09136105328798294,-0.016444426029920578,-0.9956821203231812,0,0.0413363054394722,-0.9989392757415771,0.020291127264499664,0,-0.9949595332145691,-0.04301163926720619,-0.09058438986539841,0,0.5795159935951233,0.026998097077012062,0.14855273067951202,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-0.5912127494812012,2.261027086045142e-12,8.198938985515269e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.6517610549926758,0.0006205273675732315,1.721093267903484e-9,1],[7,-0.6794352531433105,0.009393678978085518,0.7336754202842712,0,0.030185265466570854,0.9994293451309204,0.015157398767769337,0,-0.7331144213676453,0.032444652169942856,-0.6793310642242432,0,0.5823630094528198,-0.015518231317400932,0.7606297135353088,1],[7,-0.6527166366577148,-0.18889500200748444,0.7336754202842712,0,-0.26220113039016724,0.9648942947387695,0.015157399699091911,0,-0.7107822895050049,-0.18247707188129425,-0.6793310046195984,0,0.3644840121269226,0.0947427824139595,0.7606297135353088,1],[7,-0.6527166366577148,0.733524739742279,0.18947914242744446,0,-0.26220113039016724,0.01592572219669819,-0.9648818373680115,0,-0.7107822895050049,-0.6794760823249817,0.18193607032299042,0,0.21019066870212555,0.7607048749923706,-0.09413707256317139,1],[7,-0.43139633536338806,0.8821654319763184,0.18889488279819489,0,-0.24846845865249634,0.08510326594114304,-0.9648942947387695,0,-0.8672718405723572,-0.4631862938404083,0.18247708678245544,0,0.3132701516151428,0.691782534122467,-0.04904983192682266,1],[7,-0.21573005616664886,0.9580079913139343,0.18889476358890533,0,-0.22205747663974762,0.14024828374385834,-0.9648942947387695,0,-0.9508684277534485,-0.2501022219657898,0.18247710168361664,0,0.4391199052333832,0.6066890954971313,-0.04904991015791893,1],[7,0.011628356762230396,0.9819284677505493,0.18889464437961578,0,-0.1836114525794983,0.18779213726520538,-0.9648943543434143,0,-0.9829300045967102,-0.023463085293769836,0.18247707188129425,0,0.5418837666511536,0.4948022961616516,-0.04904993623495102,1],[7,-0.41265544295310974,0.8910860419273376,0.18889488279819489,0,-0.24661433696746826,0.09033563733100891,-0.9648942947387695,0,-0.8768676519393921,-0.4447530508041382,0.18247711658477783,0,0.3246106207370758,0.6913455128669739,-0.08480940014123917,1],[7,-0.19543437659740448,0.962353527545929,0.18889480829238892,0,-0.2190437614917755,0.14491018652915955,-0.9648942947387695,0,-0.9559420347213745,-0.22994975745677948,0.18247711658477783,0,0.4449287950992584,0.6048593521118164,-0.08480944484472275,1],[7,-0.36219701170921326,0.9127606153488159,0.18889492750167847,0,-0.24117879569530487,0.10398054122924805,-0.9648942947387695,0,-0.9003587365150452,-0.39503926038742065,0.18247710168361664,0,0.36743292212486267,0.6647297739982605,-0.12062196433544159,1],[7,0.011074633337557316,-0.009308639913797379,0.9998953342437744,0,-0.6375018954277039,0.7703174352645874,0.014232194982469082,0,-0.7703692317008972,-0.6375928521156311,0.0025967068504542112,0,0.43724310398101807,0.4854070246219635,0.3945971727371216,1],[7,0.008622139692306519,-0.011617041192948818,0.9998953342437744,0,-0.4421120285987854,0.8968469500541687,0.014232148416340351,0,-0.8969183564186096,-0.4421885311603546,0.0025967066176235676,0,0.5065199136734009,0.378546804189682,0.3945971727371216,1],[7,0.005702346563339233,-0.013295730575919151,0.9998953342437744,0,-0.2227606326341629,0.9747693538665771,0.01423201709985733,0,-0.9748564958572388,-0.22281847894191742,0.002596707083284855,0,0.5561479330062866,0.2569153904914856,0.3945971429347992,1],[7,-0.200044646859169,0.9614056348800659,0.1888948678970337,0,-0.219735786318779,0.14385870099067688,-0.9648942947387695,0,-0.9548287987709045,-0.23452891409397125,0.18247711658477783,0,0.44272640347480774,0.5975697040557861,-0.12062199413776398,1],[7,-0.031946949660778046,0.9814774990081787,0.18889456987380981,0,-0.19176223874092102,0.17946109175682068,-0.9648943543434143,0,-0.98092120885849,-0.06704827398061752,0.18247713148593903,0,0.5166044235229492,0.5165164470672607,-0.12062213569879532,1],[7,-0.045210957527160645,0.9809561371803284,0.18889454007148743,0,-0.1941705346107483,0.17685258388519287,-0.9648943543434143,0,-0.9799253940582275,-0.08030154556035995,0.18247710168361664,0,0.5035908222198486,0.5338056087493896,-0.0848095566034317,1],[7,-2.8870999813079834e-7,-3.2228066970674263e-7,-1,0,-0.6672486066818237,-0.7448350787162781,4.3268730109957687e-7,0,-0.7448350787162781,0.6672486066818237,-1.3035307662651648e-18,0,1.110286831855774,-1.4398338794708252,-9.838003478535029e-8,1],[7,7.510177368885707e-8,-0.000001404751969857898,1,0,-0.054779790341854095,-0.9984985589981079,-0.0000013985285249873414,0,0.9984984993934631,-0.054779790341854095,-1.519410233186136e-7,0,-1.7673311233520508,0.10390757769346237,1.689412414407343e-7,1],[7,0.015062009915709496,0.13632123172283173,-0.9905502796173096,0,0.2579565644264221,-0.9576571583747864,-0.1278720200061798,0,-0.9660392999649048,-0.2535928785800934,-0.049589190632104874,0,1.5096348524093628,0.7624855637550354,0.1447049230337143,1],[7,0.009933187626302242,0.141774520277977,-0.9898492693901062,0,-0.330351859331131,-0.9338521957397461,-0.1370692402124405,0,-0.9438057541847229,0.32836002111434937,0.03755933791399002,0,1.3442076444625854,-0.043396808207035065,0.021368617191910744,1],[7,0.07747832685709,0.11914610117673874,-0.989849328994751,0,-0.7419854402542114,-0.6562546491622925,-0.13706929981708527,0,-0.6659242510795593,0.7450736165046692,0.0375591479241848,0,0.9895678162574768,-0.5987737774848938,0.02136884443461895,1],[7,-0.032969262450933456,0.13824552297592163,-0.9898492097854614,0,-0.03560734540224075,-0.9899215698242188,-0.13706958293914795,0,-0.9988223314285278,0.03072681464254856,0.03755951300263405,0,1.4722747802734375,0.36104366183280945,0.02136852592229843,1],[7,0.2772752046585083,0.780089795589447,-0.5608732104301453,0,-1.490115231206346e-8,-0.5837623476982117,-0.8119247555732727,0,-0.96079021692276,0.2251267284154892,-0.1618628203868866,0,1.4838380813598633,-0.6901134848594666,0.31254687905311584,1],[7,0.007227929774671793,0.8220168948173523,-0.5694175958633423,0,-0.00336098438128829,-0.5694093704223633,-0.8220474123954773,0,-0.9999678730964661,0.007855508476495743,-0.0013528652489185333,0,1.4305334091186523,-0.39154261350631714,0.08398836851119995,1],[7,0.9877861738204956,-0.0000013777178082818864,0.15581563115119934,0,0.0000013609737834485713,1,2.141426165280791e-7,0,-0.15581564605236053,5.338804953680665e-10,0.9877861142158508,0,0.09451815485954285,0.013598349876701832,-0.9579079151153564,1],[7,-0.3340667188167572,0.7887672781944275,-0.515990138053894,0,0.0051648891530931,-0.545900821685791,-0.8378339409828186,0,-0.9425350427627563,-0.28255757689476013,0.17829342186450958,0,1.3019710779190063,-0.012232085689902306,-0.16268712282180786,1],[7,0.09278407692909241,-0.002894019242376089,-0.9956821203231812,0,0.18711382150650024,-0.9821286797523499,0.020291099324822426,0,-0.9779465794563293,-0.1881885677576065,-0.090584397315979,0,0.2693028450012207,0.06714131683111191,0.14855273067951202,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065994128584862,0.05631287023425102,0.1448259800672531,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.03582480549812317,-0.005114830564707518,0.14482596516609192,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.07855876535177231,-0.005114828702062368,0.14482596516609192,1],[7,0.045211464166641235,-0.9809566140174866,0.18889205157756805,0,-0.19417043030261993,0.1768500655889511,0.9648948907852173,0,-0.9799253940582275,-0.08030156046152115,-0.18247711658477783,0,0.5035908222198486,0.5338056087493896,0.08480949699878693,1],[7,0.19543495774269104,-0.9623539447784424,0.1888922154903412,0,-0.21904322504997253,0.144907608628273,0.9648948311805725,0,-0.9559420347213745,-0.22994975745677948,-0.18247710168361664,0,0.4449288249015808,0.6048593521118164,0.08480942249298096,1],[7,0.679435133934021,-0.009396422654390335,0.733675479888916,0,0.030187129974365234,0.9994293451309204,-0.015155382454395294,0,-0.73311448097229,0.03244464844465256,0.6793310642242432,0,0.5823630690574646,-0.015518228523433208,-0.7606297135353088,1],[7,0.6527173519134521,0.18889236450195312,0.733675479888916,0,-0.262199342250824,0.9648948311805725,-0.015155388973653316,0,-0.7107822895050049,-0.18247707188129425,0.6793310642242432,0,0.3644840121269226,0.0947427898645401,-0.7606297135353088,1],[7,0.6527173519134521,-0.7335247993469238,0.18947650492191315,0,-0.262199342250824,0.01592371240258217,0.9648824334144592,0,-0.7107822895050049,-0.6794760823249817,-0.18193607032299042,0,0.21019066870212555,0.7607048749923706,0.09413708001375198,1],[7,0.4313969910144806,-0.8821657299995422,0.18889226019382477,0,-0.24846728146076202,0.08510086685419083,0.9648948311805725,0,-0.8672718405723572,-0.4631862938404083,-0.18247708678245544,0,0.3132701814174652,0.6917825937271118,0.049049828201532364,1],[7,0.21573065221309662,-0.9580084085464478,0.18889214098453522,0,-0.22205688059329987,0.14024567604064941,0.9648948907852173,0,-0.9508684277534485,-0.2501021921634674,-0.18247710168361664,0,0.43911993503570557,0.6066890954971313,0.049049898982048035,1],[7,-0.011627820320427418,-0.9819290637969971,0.18889184296131134,0,-0.18361148238182068,0.18778927624225616,0.9648949503898621,0,-0.9829300045967102,-0.023463087156414986,-0.18247707188129425,0,0.5418837666511536,0.4948022961616516,0.04905002564191818,1],[7,-0.011627820320427418,-0.9819290637969971,0.18889184296131134,0,-0.18361148238182068,0.18778927624225616,0.9648949503898621,0,-0.9829300045967102,-0.023463087156414986,-0.18247707188129425,0,0.5155540704727173,0.4948022961616516,0.049050021916627884,1],[7,0.41265609860420227,-0.8910863399505615,0.18889230489730835,0,-0.24661323428153992,0.0903332531452179,0.9648948311805725,0,-0.8768676519393921,-0.44475308060646057,-0.18247711658477783,0,0.3246106207370758,0.6913455128669739,0.08480937778949738,1],[7,0.3621976673603058,-0.9127609133720398,0.18889228999614716,0,-0.24117779731750488,0.10397803783416748,0.9648948311805725,0,-0.9003587365150452,-0.39503929018974304,-0.18247711658477783,0,0.36743295192718506,0.6647297739982605,0.12062196433544159,1],[7,-0.011072846129536629,0.009306480176746845,0.9998953938484192,0,-0.6375018954277039,0.7703174352645874,-0.014229390770196915,0,-0.770369291305542,-0.6375927925109863,-0.0025967066176235676,0,0.43724310398101807,0.4854069948196411,-0.3945971429347992,1],[7,-0.008620883338153362,0.011614492163062096,0.9998953938484192,0,-0.4421120285987854,0.8968470096588135,-0.0142293069511652,0,-0.8969184160232544,-0.44218847155570984,-0.002596706384792924,0,0.5065199136734009,0.378546804189682,-0.3945971429347992,1],[7,-0.005701689049601555,0.013292858377099037,0.9998953938484192,0,-0.22276060283184052,0.9747693538665771,-0.014229070395231247,0,-0.9748564958572388,-0.22281843423843384,-0.0025967066176235676,0,0.5561479330062866,0.256915420293808,-0.3945971131324768,1],[7,0.20004524290561676,-0.9614060521125793,0.18889227509498596,0,-0.21973523497581482,0.14385610818862915,0.9648948311805725,0,-0.9548287987709045,-0.23452891409397125,-0.18247711658477783,0,0.44272640347480774,0.5975697636604309,0.12062195688486099,1],[7,0.031947486102581024,-0.9814780354499817,0.18889185786247253,0,-0.19176213443279266,0.17945833504199982,0.9648948907852173,0,-0.98092120885849,-0.06704826653003693,-0.18247713148593903,0,0.5166044235229492,0.516516387462616,0.1206221729516983,1],[7,-0.005701689049601555,0.013292858377099037,0.9998953938484192,0,-0.22276060283184052,0.9747693538665771,-0.014229070395231247,0,-0.9748564958572388,-0.22281843423843384,-0.0025967066176235676,0,0.5298182368278503,0.256915420293808,-0.3945971131324768,1],[7,0.031947486102581024,-0.9814780354499817,0.18889185786247253,0,-0.19176213443279266,0.17945833504199982,0.9648948907852173,0,-0.98092120885849,-0.06704826653003693,-0.18247713148593903,0,0.4902747571468353,0.516516387462616,0.1206221729516983,1],[7,0.045211464166641235,-0.9809566140174866,0.18889205157756805,0,-0.19417043030261993,0.1768500655889511,0.9648948907852173,0,-0.9799253940582275,-0.08030156046152115,-0.18247711658477783,0,0.4719952344894409,0.5338056087493896,0.08480950444936752,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[18,"Skin-6",601637008,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head"],[[[7,9.469262352013175e-8,-0.000001047661271513789,1,0,-0.054779842495918274,-0.9984985589981079,-0.0000010409009973955108,0,0.9984984993934631,-0.054779842495918274,-1.5194116542716074e-7,0,-1.1092911958694458,0.10392146557569504,1.6897978127872193e-7,1]],8]]],0,0,[],[],[]],[[[6,".bin",3288869047,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":145008,"length":12336,"count":6168,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":203568,"length":3414,"count":1707,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":257094,"length":3126,"count":1563,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":145008,"count":2014,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":157344,"length":46224,"count":642,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":206982,"length":50112,"count":696,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,6,7,11,12,13,14,15,17,20,22,23,24,25,26,27,30,31,32,34,39,42,43,44],[0,3,7,8,11,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,34,36,39,40,41,42,43,44,47,53],[0,3,4,7,8,9,10,11,12,21,22,23,26,27,28,29,39,42,44,47,51,52,53]]},"minPosition",8,[1,-0.5237818956375122,-0.1629161536693573,-0.024688106030225754],"maxPosition",8,[1,0.5237818956375122,0.3618812561035156,1.0491312742233276]]],-1],0,0,[],[],[]],[[[6,".bin",4072695394,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":83232,"length":17640,"count":4410,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":83232,"count":1156,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,3,5,6,9,10,11,12,13,15]]},"minPosition",8,[1,-0.4435961842536926,-0.44906800985336304,-0.025478161871433258],"maxPosition",8,[1,0.4435957670211792,0.4795994758605957,1.939500331878662]]],-1],0,0,[],[],[]],[[[18,"Skin-9",2601941835,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061/Bone062","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070/Bone071","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057/Bone058","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065"],[[[7,7.510177368885707e-8,-0.000001404751969857898,1,0,-0.054779790341854095,-0.9984985589981079,-0.0000013985285249873414,0,0.9984984993934631,-0.054779790341854095,-1.519410233186136e-7,0,-1.11444091796875,0.005445712246000767,3.103244239355263e-8,1],[7,0.015062009915709496,0.13632123172283173,-0.9905502796173096,0,0.2579565644264221,-0.9576571583747864,-0.1278720200061798,0,-0.9660392999649048,-0.2535928785800934,-0.049589190632104874,0,1.5350719690322876,0.6680510640144348,0.13209547102451324,1],[7,-2.8870999813079834e-7,-3.2228066970674263e-7,-1,0,-0.6672486066818237,-0.7448350787162781,4.3268730109957687e-7,0,-0.7448350787162781,0.6672486066818237,-1.3035307662651648e-18,0,1.0444895029067993,-1.513282060623169,-5.5712771285243434e-8,1],[7,0.30294865369796753,0.9437150955200195,0.13275140523910522,0,-0.08212769776582718,0.16463199257850647,-0.9829297065734863,0,-0.9494612812995911,0.2868746221065521,0.12738025188446045,0,1.2555168867111206,0.03404844552278519,-0.32376405596733093,1],[7,-0.15446878969669342,0.979030191898346,0.13280856609344482,0,-0.060603756457567215,0.12477964907884598,-0.9903316497802734,0,-0.9861368536949158,-0.1610240340232849,0.04005837440490723,0,1.5174652338027954,0.6128589510917664,-0.20306189358234406,1],[7,0.00650806725025177,0.9911279678344727,0.13274919986724854,0,-0.12765033543109894,0.1324893683195114,-0.982930064201355,0,-0.991797924041748,-0.010548505000770092,0.12738007307052612,0,1.3644654750823975,0.4083820879459381,-0.32376474142074585,1],[7,2.999058557051626e-9,-3.970805462216731e-9,-1,0,0.6026914119720459,-0.7979741096496582,4.9761088583011315e-9,0,-0.797974169254303,-0.6026914119720459,-6.90797031918975e-16,0,1.5505272150039673,0.4914729595184326,-3.094561975558463e-7,1],[7,-1.9880808110883663e-7,-0.0000019151641481585102,-1,0,-0.10325250029563904,-0.994655191898346,0.0000019254553080827463,0,-0.994655191898346,0.10325250029563904,-3.2405831494680345e-16,0,1.6160916090011597,-0.6977444887161255,7.342807180066302e-7,1],[7,-0.3340667188167572,0.7887672781944275,-0.515990138053894,0,0.0051648891530931,-0.545900821685791,-0.8378339409828186,0,-0.9425350427627563,-0.28255757689476013,0.17829342186450958,0,1.3024803400039673,-0.06606332957744598,-0.2453058660030365,1],[7,0.2772752046585083,0.780089795589447,-0.5608732104301453,0,-1.490115231206346e-8,-0.5837623476982117,-0.8119247555732727,0,-0.96079021692276,0.2251267284154892,-0.1618628203868866,0,1.4838380813598633,-0.747678279876709,0.23248304426670074,1],[7,0.007227929774671793,0.8220168948173523,-0.5694175958633423,0,-0.00336098438128829,-0.5694093704223633,-0.8220474123954773,0,-0.9999678730964661,0.007855508476495743,-0.0013528652489185333,0,1.4302020072937012,-0.44769200682640076,0.0029263366013765335,1],[7,0.07747832685709,0.11914610117673874,-0.989849328994751,0,-0.7419854402542114,-0.6562546491622925,-0.13706929981708527,0,-0.6659242510795593,0.7450736165046692,0.0375591479241848,0,0.9164007306098938,-0.6634870171546936,0.00785245280712843,1],[7,0.009933187626302242,0.141774520277977,-0.9898492693901062,0,-0.330351859331131,-0.9338521957397461,-0.1370692402124405,0,-0.9438057541847229,0.32836002111434937,0.03755933791399002,0,1.311631679534912,-0.13548390567302704,0.007852229289710522,1],[7,-0.032969262450933456,0.13824552297592163,-0.9898492097854614,0,-0.03560734540224075,-0.9899215698242188,-0.13706958293914795,0,-0.9988223314285278,0.03072681464254856,0.03755951300263405,0,1.4687635898590088,0.26342758536338806,0.007852105423808098,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",1078284115,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":58320,"length":11664,"count":2916,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":58320,"count":1215,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23252570629119873,-1.0691308975219727,0.03965577483177185],"maxPosition",8,[1,0.1865302324295044,0.10814176499843597,0.588261604309082]]],-1],0,0,[],[],[]],[[[6,".bin",133551116,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":52128,"length":7392,"count":1848,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":52128,"count":1086,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39967775344848633,-0.2774418592453003,-0.8108393549919128],"maxPosition",8,[1,0.3996778726577759,0.2774417996406555,0.8108393549919128]]],-1],0,0,[],[],[]],[[[6,".bin",3564912018,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":137664,"length":12222,"count":6111,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":308862,"length":13386,"count":6693,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":137664,"count":1912,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":149886,"length":158976,"count":2208,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33],[0,5,6,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43]]},"minPosition",8,[1,-0.5026693344116211,-0.2141716182231903,0.000273868819931522],"maxPosition",8,[1,0.5026693344116211,0.1273529827594757,1.0572775602340698]]],-1],0,0,[],[],[]],[[[18,"Skin-3",2724389845,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070/Bone071","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061/Bone062","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057/Bone058","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle"],[[[7,7.510177368885707e-8,-0.000001404751969857898,1,0,-0.054779790341854095,-0.9984985589981079,-0.0000013985285249873414,0,0.9984984993934631,-0.054779790341854095,-1.519410233186136e-7,0,-1.109039068222046,0.10390757769346237,1.689412414407343e-7,1],[7,2.999058557051626e-9,-3.970805462216731e-9,-1,0,0.6026914119720459,-0.7979741096496582,4.9761088583011315e-9,0,-0.797974169254303,-0.6026914119720459,-6.90797031918975e-16,0,1.4910959005355835,0.5701611042022705,-3.0994689836916223e-7,1],[7,0.2772752046585083,0.780089795589447,-0.5608732104301453,0,-1.490115231206346e-8,-0.5837623476982117,-0.8119247555732727,0,-0.96079021692276,0.2251267284154892,-0.1618628203868866,0,1.4838380813598633,-0.6901134848594666,0.31254687905311584,1],[7,0.007227929774671793,0.8220168948173523,-0.5694175958633423,0,-0.00336098438128829,-0.5694093704223633,-0.8220474123954773,0,-0.9999678730964661,0.007855508476495743,-0.0013528652489185333,0,1.4305334091186523,-0.39154261350631714,0.08398836851119995,1],[7,0.09278407692909241,-0.002894019242376089,-0.9956821203231812,0,0.18711382150650024,-0.9821286797523499,0.020291099324822426,0,-0.9779465794563293,-0.1881885677576065,-0.090584397315979,0,0.2693028450012207,0.06714131683111191,0.14855273067951202,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065994128584862,0.05631287023425102,0.1448259800672531,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.03582480549812317,-0.005114830564707518,0.14482596516609192,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.07855876535177231,-0.005114828702062368,0.14482596516609192,1],[7,-0.09278476238250732,0.0028966728132218122,-0.9956820607185364,0,0.18711355328559875,-0.9821286797523499,-0.0202938225120306,0,-0.9779465794563293,-0.1881885528564453,0.09058457612991333,0,0.2693028151988983,0.06714130192995071,-0.14855283498764038,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065995618700981,0.05631287023425102,-0.14482605457305908,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.03582480177283287,-0.005114830564707518,-0.14482606947422028,1],[7,-0.15446878969669342,0.979030191898346,0.13280856609344482,0,-0.060603756457567215,0.12477964907884598,-0.9903316497802734,0,-0.9861368536949158,-0.1610240340232849,0.04005837440490723,0,1.5234413146972656,0.6005544662475586,-0.10540536791086197,1],[7,0.00650806725025177,0.9911279678344727,0.13274919986724854,0,-0.12765033543109894,0.1324893683195114,-0.982930064201355,0,-0.991797924041748,-0.010548505000770092,0.12738007307052612,0,1.377053141593933,0.39531734585762024,-0.2268380969762802,1],[7,0.30294865369796753,0.9437150955200195,0.13275140523910522,0,-0.08212769776582718,0.16463199257850647,-0.9829297065734863,0,-0.9494612812995911,0.2868746221065521,0.12738025188446045,0,1.2636154890060425,0.01781409978866577,-0.22683744132518768,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.779286801815033,0.0007972195162437856,2.211166583165891e-9,1],[7,-0.3340667188167572,0.7887672781944275,-0.515990138053894,0,0.0051648891530931,-0.545900821685791,-0.8378339409828186,0,-0.9425350427627563,-0.28255757689476013,0.17829342186450958,0,1.3019710779190063,-0.012232085689902306,-0.16268712282180786,1],[7,0.015062009915709496,0.13632123172283173,-0.9905502796173096,0,0.2579565644264221,-0.9576571583747864,-0.1278720200061798,0,-0.9660392999649048,-0.2535928785800934,-0.049589190632104874,0,1.5096348524093628,0.7624855637550354,0.1447049230337143,1],[7,-0.032969262450933456,0.13824552297592163,-0.9898492097854614,0,-0.03560734540224075,-0.9899215698242188,-0.13706958293914795,0,-0.9988223314285278,0.03072681464254856,0.03755951300263405,0,1.4722747802734375,0.36104366183280945,0.02136852592229843,1],[7,0.009933187626302242,0.141774520277977,-0.9898492693901062,0,-0.330351859331131,-0.9338521957397461,-0.1370692402124405,0,-0.9438057541847229,0.32836002111434937,0.03755933791399002,0,1.3442076444625854,-0.043396808207035065,0.021368617191910744,1],[7,-2.8870999813079834e-7,-3.2228066970674263e-7,-1,0,-0.6672486066818237,-0.7448350787162781,4.3268730109957687e-7,0,-0.7448350787162781,0.6672486066818237,-1.3035307662651648e-18,0,1.110286831855774,-1.4398338794708252,-9.838003478535029e-8,1],[7,-1.9880808110883663e-7,-0.0000019151641481585102,-1,0,-0.10325250029563904,-0.994655191898346,0.0000019254553080827463,0,-0.994655191898346,0.10325250029563904,-3.2405831494680345e-16,0,1.626273274421692,-0.5996615886688232,5.444117050501518e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.0011852979660034,0.043884966522455215,2.4582378355120227e-9,1],[7,0.07747832685709,0.11914610117673874,-0.989849328994751,0,-0.7419854402542114,-0.6562546491622925,-0.13706929981708527,0,-0.6659242510795593,0.7450736165046692,0.0375591479241848,0,0.9895678162574768,-0.5987737774848938,0.02136884443461895,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.6517610549926758,0.0006205273675732315,1.721093267903484e-9,1],[7,-0.9877861738204956,-0.0000013640960787597578,0.15581563115119934,0,-0.0000013473520539264427,1,2.1307485553734296e-7,0,-0.15581564605236053,5.338806619015202e-10,-0.9877861142158508,0,0.09451815485954285,0.013598348945379257,0.9579079151153564,1],[7,0.9877861738204956,-0.0000013777178082818864,0.15581563115119934,0,0.0000013609737834485713,1,2.141426165280791e-7,0,-0.15581564605236053,5.338804953680665e-10,0.9877861142158508,0,0.09451815485954285,0.013598349876701832,-0.9579079151153564,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3500030844,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":89640,"length":15528,"count":3882,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89640,"count":1245,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.47208020091056824,-0.6883259415626526,0.9932511448860168],"maxPosition",8,[1,0.47208020091056824,0.5084536075592041,1.943933367729187]]],-1],0,0,[],[],[]],[[[18,"Skin-10",1861545599,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0/Bip001 R Toe0Nub","Bip001/Bip001 Footsteps","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine/Bone092/Bone093","Bip001/Bip001 Pelvis/Bip001 Spine/Bone097/Bone098/Bone099","Bip001/Bip001 Pelvis/Bip001 Spine/Bone097/Bone098","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0/Bip001 L Toe01/Bip001 L Toe0Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bone082/Bone083","Bip001/Bip001 Pelvis/Bip001 Spine/Bone077/Bone078/Bone079","Bip001/Bip001 Pelvis/Bip001 Spine/Bone077/Bone078","Bip001/Bip001 Pelvis/Bip001 Spine/Bone082","Bip001/Bip001 Pelvis/Bip001 Spine/Bone097","Bip001/Bip001 Pelvis/Bip001 Spine/Bone087","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone092","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone077","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32/Bip001 L Finger3Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bone073","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02/Bip001 L Finger0Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bone087/Bone088/Bone089/Bone090","Bip001/Bip001 Pelvis/Bip001 Spine/Bone082/Bone083/Bone084/Bone085","Bip001/Bip001 Pelvis/Bip001 Spine/Bone077/Bone078/Bone079/Bone080","Bip001/Bip001 Pelvis/Bip001 Spine/Bone087/Bone088/Bone089","Bip001/Bip001 Pelvis/Bip001 Spine/Bone082/Bone083/Bone084","Bip001/Bip001 Pelvis/Bip001 Spine/Bone087/Bone088","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31/Bip001 R Finger32/Bip001 R Finger3Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bone075","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02/Bip001 R Finger0Nub","Bip001/Bip001 Pelvis/Bip001 Spine/Bone092/Bone093/Bone094/Bone095","Bip001/Bip001 Pelvis/Bip001 Spine/Bone097/Bone098/Bone099/Bone100","Bip001/Bip001 Pelvis/Bip001 Spine/Bone092/Bone093/Bone094","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3"],[[[7,-0.09278476238250732,0.0028966728132218122,-0.9956820607185364,0,0.18711355328559875,-0.9821286797523499,-0.0202938225120306,0,-0.9779465794563293,-0.1881885528564453,0.09058457612991333,0,0.2697482109069824,0.06480347365140915,-0.14860114455223083,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065995246171951,0.05393249914050102,-0.14482606947422028,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.03820517286658287,-0.005114828702062368,-0.14482606947422028,1],[7,0.09136105328798294,-0.016444426029920578,-0.9956821203231812,0,0.0413363054394722,-0.9989392757415771,0.020291127264499664,0,-0.9949595332145691,-0.04301163926720619,-0.09058438986539841,0,0.5796144008636475,0.02462025173008442,0.14860102534294128,1],[7,-0.09136133641004562,0.01644708402454853,-0.9956820607185364,0,0.0413360521197319,-0.9989392161369324,-0.020293783396482468,0,-0.9949594736099243,-0.0430116280913353,0.09058456867933273,0,0.5796143412590027,0.024620238691568375,-0.14860114455223083,1],[7,0.0000013716037301492179,4.371133499603275e-8,-1,0,-1,6.00158554038728e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.371133499603275e-8,0,-0.08093913644552231,-0.005114826839417219,-0.14482606947422028,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,2.0234773856486754e-9,0.00238037109375,0.0003938993322663009,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-0.5912127494812012,-0.0023803713265806437,8.28481745429599e-7,1],[7,-0.2671031951904297,-0.4340534806251526,-0.8603798747062683,0,0.28588515520095825,-0.8883158564567566,0.3593945801258087,0,-0.9202854633331299,-0.14997439086437225,0.361361563205719,0,0.40819865465164185,0.04372476786375046,-0.407684862613678,1],[7,-0.24946674704551697,0.7808705568313599,-0.5727192163467407,0,0.023081451654434204,-0.5864551067352295,-0.8096527457237244,0,-0.9681081175804138,-0.21520063281059265,0.12827743589878082,0,0.2922094464302063,0.17220765352249146,-0.2790020704269409,1],[7,-0.2527979910373688,0.7790749669075012,-0.5737031698226929,0,0.03206733614206314,-0.5858905911445618,-0.8097554445266724,0,-0.9669875502586365,-0.2231016904115677,0.12312910705804825,0,0.4279835820198059,0.17469516396522522,-0.2774019241333008,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.6517629623413086,-0.0017598430858924985,4.056424918186252e-10,1],[7,0.09278407692909241,-0.002894019242376089,-0.9956821203231812,0,0.18711382150650024,-0.9821286797523499,0.020291099324822426,0,-0.9779465794563293,-0.1881885677576065,-0.090584397315979,0,0.2697482407093048,0.06480348110198975,0.14860102534294128,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-6.123234262925839e-17,-1,-0.000001370906943520822,0,-1,5.998547741425247e-14,-4.371139183945161e-8,0,0.06065994128584862,0.05393249914050102,0.1448259800672531,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.03820517659187317,-0.005114828702062368,0.14482596516609192,1],[7,0.0000013716037301492179,-4.3711455788297826e-8,-1,0,-1,-5.989355739881644e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,-4.3711455788297826e-8,0,-0.08093913644552231,-0.005114826839417219,0.14482596516609192,1],[7,-0.0000013716037301492179,-4.3711455788297826e-8,1,0,-1,6.001601803419868e-14,-0.0000013716037301492179,0,6.123234262925839e-17,1,4.3711455788297826e-8,0,-0.09119567275047302,-0.005114826373755932,-0.14482621848583221,1],[7,0.3124619126319885,-0.5462443232536316,0.7771643996238708,0,0.2416520118713379,0.8369208574295044,0.4910881519317627,0,-0.918679416179657,0.03435699641704559,0.3935069143772125,0,0.38786566257476807,0.061397962272167206,-0.4230462908744812,1],[7,0.2333708256483078,0.9293068647384644,0.2862287759780884,0,-0.0002959443663712591,0.29442447423934937,-0.9556747674942017,0,-0.9723874926567078,0.22294196486473083,0.06898511946201324,0,0.29793205857276917,-0.23774085938930511,-0.2099928855895996,1],[7,0.20591814815998077,0.9332323670387268,0.2944068908691406,0,0.026839865371584892,0.2953551113605499,-0.9550105333328247,0,-0.9782009124755859,0.20455589890480042,0.035771146416664124,0,0.4557419717311859,-0.2318822741508484,-0.19977207481861115,1],[7,0.3050333261489868,-0.5387738347053528,0.7852880358695984,0,0.2141793668270111,0.8422727584838867,0.4946753680706024,0,-0.9279449582099915,0.017300017178058624,0.37231549620628357,0,0.5250285267829895,0.06814276427030563,-0.4141956865787506,1],[7,-0.22472016513347626,0.7876010537147522,-0.5737468004226685,0,0.008005606010556221,-0.587294340133667,-0.809333860874176,0,-0.97439044713974,-0.18646682798862457,0.1256716549396515,0,0.5475217700004578,0.16092191636562347,-0.2785951793193817,1],[7,-0.01779763214290142,-0.9994946122169495,0.02633954957127571,0,0.42795321345329285,0.016193510964512825,0.9036559462547302,0,-0.9036255478858948,0.027355028316378593,0.4274488389492035,0,0.5313650369644165,-0.01644180342555046,-0.3896438777446747,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.7792887091636658,-0.0015831509372219443,8.957158348366079e-10,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.0011872053146362,0.041504595428705215,1.1427870871827395e-9,1],[7,0.9877861738204956,-0.0000013777178082818864,0.15581563115119934,0,0.0000013609737834485713,1,2.141426165280791e-7,0,-0.15581564605236053,5.338804953680665e-10,0.9877861142158508,0,0.09451815485954285,0.015978721901774406,-0.9579079151153564,1],[7,-0.9877861738204956,-0.0000013640960787597578,0.15581563115119934,0,-0.0000013473520539264427,1,2.1307485553734296e-7,0,-0.15581564605236053,5.338806619015202e-10,-0.9877861142158508,0,0.09451814740896225,0.015978720039129257,0.9579079151153564,1],[7,-0.6794352531433105,0.009393678978085518,0.7336754202842712,0,0.030185265466570854,0.9994293451309204,0.015157398767769337,0,-0.7331144213676453,0.032444652169942856,-0.6793310642242432,0,0.582434892654419,-0.013139218091964722,0.7606658339500427,1],[7,-0.2782982885837555,-0.4246126413345337,-0.861541748046875,0,0.25018423795700073,-0.8980600237846375,0.36179545521736145,0,-0.9273390769958496,-0.11485710740089417,0.3561600148677826,0,0.5258448123931885,0.030564352869987488,-0.40535834431648254,1],[7,-0.6527166366577148,-0.18889500200748444,0.7336754202842712,0,-0.26220113039016724,0.9648942947387695,0.015157399699091911,0,-0.7107822895050049,-0.18247707188129425,-0.6793310046195984,0,0.3638598620891571,0.0970395877957344,0.760665774345398,1],[7,0.1790217012166977,0.9383343458175659,0.2957703769207001,0,0.036167826503515244,0.2941470742225647,-0.9550756812095642,0,-0.9831799864768982,0.1816766858100891,0.0187211986631155,0,0.5765388011932373,-0.22152167558670044,-0.1914965659379959,1],[7,0.679435133934021,-0.009396422654390335,0.733675479888916,0,0.030187129974365234,0.9994293451309204,-0.015155382454395294,0,-0.73311448097229,0.03244464844465256,0.6793310642242432,0,0.582434892654419,-0.013139215297996998,-0.7606658339500427,1],[7,0.6527173519134521,0.18889236450195312,0.733675479888916,0,-0.262199342250824,0.9648948311805725,-0.015155388973653316,0,-0.7107822895050049,-0.18247707188129425,0.6793310642242432,0,0.3638598918914795,0.0970396026968956,-0.760665774345398,1],[7,-0.011627820320427418,-0.9819290637969971,0.18889184296131134,0,-0.18361148238182068,0.18778927624225616,0.9648949503898621,0,-0.9829300045967102,-0.023463087156414986,-0.18247707188129425,0,0.5151169896125793,0.49524930119514465,0.051346831023693085,1],[7,0.2615714371204376,0.9192216992378235,0.2942988872528076,0,0.28313979506492615,0.21842102706432343,-0.9338758587837219,0,-0.9227201342582703,0.32760292291641235,-0.20313552021980286,0,0.5555739998817444,-0.5514422059059143,0.030930906534194946,1],[7,0.21573065221309662,-0.9580084085464478,0.18889214098453522,0,-0.22205688059329987,0.14024567604064941,0.9648948907852173,0,-0.9508684277534485,-0.2501021921634674,-0.18247710168361664,0,0.4385913610458374,0.6070229411125183,0.051346708089113235,1],[7,0.6527173519134521,-0.7335247993469238,0.18947650492191315,0,-0.262199342250824,0.01592371240258217,0.9648824334144592,0,-0.7107822895050049,-0.6794760823249817,-0.18193607032299042,0,0.20956654846668243,0.7607427835464478,0.0964338630437851,1],[7,-0.005701689049601555,0.013292858377099037,0.9998953938484192,0,-0.22276060283184052,0.9747693538665771,-0.014229070395231247,0,-0.9748564958572388,-0.22281843423843384,-0.0025967066176235676,0,0.5556176900863647,0.2592357397079468,-0.39463096857070923,1],[7,-0.005701689049601555,0.013292858377099037,0.9998953938484192,0,-0.22276060283184052,0.9747693538665771,-0.014229070395231247,0,-0.9748564958572388,-0.22281843423843384,-0.0025967066176235676,0,0.5292879939079285,0.2592357397079468,-0.39463096857070923,1],[7,-0.05198401212692261,-0.9982891082763672,0.026773961260914803,0,0.4954124391078949,-0.0025004895869642496,0.8686544299125671,0,-0.8671010732650757,0.058420293033123016,0.4946947991847992,0,0.11949612945318222,-0.014120327308773994,-0.4068664312362671,1],[7,0.2597913444042206,-0.5659825801849365,0.7824140787124634,0,0.29539498686790466,0.8179721832275391,0.4936222434043884,0,-0.9193748831748962,0.10288242250680923,0.379690557718277,0,0.11679329723119736,0.04920213669538498,-0.4134514033794403,1],[7,0.28307780623435974,0.9153899550437927,0.28623145818710327,0,0.015561996027827263,0.29401543736457825,-0.9556740522384644,0,-0.9589705467224121,0.2749845087528229,0.06898394972085953,0,0.1328345388174057,-0.24524982273578644,-0.20999319851398468,1],[7,0.012397758662700653,-0.9996013045310974,0.02536533959209919,0,0.4507876932621002,0.0282305758446455,0.8921847343444824,0,-0.8925449252128601,0.00037329166661947966,0.45095810294151306,0,0.27173247933387756,-0.005411362741142511,-0.4004136621952057,1],[7,0.2622533142566681,-0.5521194934844971,0.7914460897445679,0,0.2335132509469986,0.832086443901062,0.5030937194824219,0,-0.9363196492195129,0.05287516489624977,0.3471447229385376,0,0.2890378534793854,0.05589335411787033,-0.4091366231441498,1],[7,0.020498933270573616,-0.9994780421257019,0.02496831677854061,0,0.4503532648086548,0.031527284532785416,0.8922938108444214,0,-0.8926150798797607,-0.0070465076714754105,0.45076456665992737,0,0.40758025646209717,-0.0030466329772025347,-0.40035682916641235,1],[7,0.4313969910144806,-0.8821657299995422,0.18889226019382477,0,-0.24846728146076202,0.08510086685419083,0.9648948311805725,0,-0.8672718405723572,-0.4631862938404083,-0.18247708678245544,0,0.312678724527359,0.6919851303100586,0.051346633583307266,1],[7,0.011628356762230396,0.9819284677505493,-0.18889464437961578,0,-0.1836114525794983,0.18779213726520538,0.9648943543434143,0,-0.9829300045967102,-0.023463085293769836,-0.18247707188129425,0,0.5151169896125793,0.49524933099746704,0.05134673789143562,1],[7,-0.22194421291351318,0.8817245960235596,-0.41629651188850403,0,0.38772404193878174,-0.3119329810142517,-0.8673914074897766,0,-0.8946565985679626,-0.3539208173751831,-0.2726340889930725,0,0.5929082036018372,0.5480096340179443,0.015422077849507332,1],[7,-0.21573005616664886,0.9580079913139343,0.18889476358890533,0,-0.22205747663974762,0.14024828374385834,-0.9648942947387695,0,-0.9508684277534485,-0.2501022219657898,0.18247710168361664,0,0.438591331243515,0.6070229411125183,-0.05134671553969383,1],[7,-0.6527166366577148,0.733524739742279,0.18947914242744446,0,-0.26220113039016724,0.01592572219669819,-0.9648818373680115,0,-0.7107822895050049,-0.6794760823249817,0.18193607032299042,0,0.20956653356552124,0.7607427835464478,-0.0964338555932045,1],[7,0.005702346563339233,-0.013295730575919151,-0.9998953342437744,0,-0.2227606326341629,0.9747693538665771,-0.01423201709985733,0,-0.9748564958572388,-0.22281847894191742,-0.002596707083284855,0,0.5292879939079285,0.2592357099056244,-0.394631028175354,1],[7,-0.278554230928421,-0.43588653206825256,-0.8558098673820496,0,0.29968714714050293,-0.8860347270965576,0.3537369966506958,0,-0.9124665260314941,-0.15794025361537933,0.37743839621543884,0,0.13335353136062622,0.04404887557029724,-0.41268011927604675,1],[7,-0.2154369354248047,0.7962589859962463,-0.5652950406074524,0,-0.04081999883055687,-0.5857259035110474,-0.8094805479049683,0,-0.9756641983985901,-0.15131667256355286,0.15869028866291046,0,0.16284309327602386,0.16162103414535522,-0.2840394973754883,1],[7,-0.2875710427761078,-0.43221476674079895,-0.8546890020370483,0,0.2857219874858856,-0.8904635310173035,0.3541712462902069,0,-0.9141474366188049,-0.14235402643680573,0.37956494092941284,0,0.26470401883125305,0.041348427534103394,-0.4130151867866516,1],[7,-0.43139633536338806,0.8821654319763184,0.18889488279819489,0,-0.24846845865249634,0.08510326594114304,-0.9648942947387695,0,-0.8672718405723572,-0.4631862938404083,0.18247708678245544,0,0.3126786947250366,0.6919851303100586,-0.051346637308597565,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[18,"Skin-7",2360543964,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057/Bone058","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061/Bone062","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070/Bone071"],[[[7,9.469262352013175e-8,-0.000001047661271513789,1,0,-0.054779842495918274,-0.9984985589981079,-0.0000010409009973955108,0,0.9984984993934631,-0.054779842495918274,-1.5194116542716074e-7,0,-1.1092911958694458,0.10392146557569504,1.6897978127872193e-7,1],[7,0.015061919577419758,0.13632157444953918,-0.9905502200126648,0,0.25795668363571167,-0.9576570987701416,-0.12787237763404846,0,-0.96603924036026,-0.25359299778938293,-0.049589212983846664,0,1.5098787546157837,0.7625498175621033,0.1447174847126007,1],[7,-0.032969240099191666,0.13824449479579926,-0.989849328994751,0,-0.0356072336435318,-0.9899217486381531,-0.13706855475902557,0,-0.9988223314285278,0.03072674386203289,0.037559445947408676,0,1.472527027130127,0.36103612184524536,0.02135857194662094,1],[7,-5.960464477539063e-8,-6.653536388512293e-8,-1.0000001192092896,0,-0.6672486066818237,-0.7448350191116333,8.932899930869098e-8,0,-0.7448350787162781,0.667248547077179,1.1181339483930422e-17,0,1.110474944114685,-1.4400023221969604,-9.364825359625684e-8,1],[7,0.2772752046585083,0.7800899147987366,-0.5608729720115662,0,1.3411036547950062e-7,-0.5837620496749878,-0.811924934387207,0,-0.96079021692276,0.22512668371200562,-0.16186289489269257,0,1.4840806722640991,-0.6901702880859375,0.3125878572463989,1],[7,0.007227929774671793,0.8220189213752747,-0.5694145560264587,0,-0.003360894974321127,-0.569406270980835,-0.8220494985580444,0,-0.9999678730964661,0.007855461910367012,-0.001352909835986793,0,1.430785894393921,-0.39154478907585144,0.08398748934268951,1],[7,0.009933318942785263,0.14177490770816803,-0.9898492097854614,0,-0.33035174012184143,-0.9338521957397461,-0.13706965744495392,0,-0.9438058137893677,0.3283599317073822,0.037559330463409424,0,1.3444461822509766,-0.043479591608047485,0.021359171718358994,1],[7,0.07747860997915268,0.11914637684822083,-0.9898492693901062,0,-0.7419853210449219,-0.6562547087669373,-0.1370696872472763,0,-0.6659243702888489,0.7450736165046692,0.0375591404736042,0,0.9897361993789673,-0.5989618897438049,0.021359387785196304,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-0.7795392870903015,0.0007974205655045807,2.2117245812580677e-9,1],[7,-0.3340667188167572,0.7887672781944275,-0.5159899592399597,0,0.0051648891530931,-0.5459006428718567,-0.8378340601921082,0,-0.9425350427627563,-0.28255757689476013,0.178293377161026,0,1.3022090196609497,-0.012160697020590305,-0.16273200511932373,1],[7,-1.8816315616732027e-7,-0.0000018126195300283143,-1.0000001192092896,0,-0.10325247049331665,-0.9946551322937012,0.0000018223601045974647,0,-0.994655191898346,0.10325246304273605,-6.401596023871e-16,0,1.6265244483947754,-0.5996875762939453,6.521057684949483e-7,1],[7,-0.15446875989437103,0.979030191898346,0.13280878961086273,0,-0.06060376018285751,0.12477988749742508,-0.9903315901756287,0,-0.9861368536949158,-0.16102401912212372,0.04005834087729454,0,1.5236903429031372,0.6005950570106506,-0.10541548579931259,1],[7,0.0065081133507192135,0.9911279678344727,0.13274946808815002,0,-0.12765029072761536,0.1324896365404129,-0.9829299449920654,0,-0.991797924041748,-0.010548489168286324,0.12738002836704254,0,1.3773036003112793,0.39531993865966797,-0.22687022387981415,1],[7,0.3029487431049347,0.9437149167060852,0.13275188207626343,0,-0.08212754875421524,0.16463243961334229,-0.9829295873641968,0,-0.9494613409042358,0.2868746519088745,0.12738025188446045,0,1.2638553380966187,0.017741609364748,-0.22686953842639923,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-1.001437783241272,0.04388516768813133,2.458805381522211e-9,1],[7,-2.4542961796214513e-7,3.249531346227741e-7,-1.0000001192092896,0,0.6026914119720459,-0.7979740500450134,-4.0722272842685925e-7,0,-0.7979741096496582,-0.6026914119720459,-5.868374489893433e-16,0,1.4912972450256348,0.5703133344650269,-3.3940111165975395e-7,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",348294904,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":29232,"length":8160,"count":2040,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":29232,"count":406,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]},"minPosition",8,[1,-0.4112499952316284,-0.5571775436401367,0.9642277956008911],"maxPosition",8,[1,0.4112499952316284,0.44702380895614624,1.939500093460083]]],-1],0,0,[],[],[]],[[[18,"Skin-11",3042917395,["Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bone073","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bone075","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31/Bip001 R Finger32","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21/Bip001 R Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11/Bip001 R Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070/Bone071","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061/Bone062","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057/Bone058"],[[[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-0.6520135402679443,0.0006207284168340266,1.7216511549733582e-9,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-0.7795392870903015,0.0007974205655045807,2.2117245812580677e-9,1],[7,0.6794351935386658,-0.009396791458129883,0.7336754202842712,0,0.03018740564584732,0.9994292855262756,-0.015155143104493618,0,-0.7331143617630005,0.03244468942284584,0.6793311834335327,0,0.5825480222702026,-0.015526454895734787,-0.760801374912262,1],[7,0.6527177691459656,0.18889203667640686,0.7336753606796265,0,-0.26219916343688965,0.9648947715759277,-0.015155107714235783,0,-0.7107822299003601,-0.18247702717781067,0.6793312430381775,0,0.364663302898407,0.0947887971997261,-0.760801374912262,1],[7,0.6527177691459656,-0.7335246801376343,0.18947617709636688,0,-0.26219916343688965,0.015923431143164635,0.9648823738098145,0,-0.7107822299003601,-0.6794763207435608,-0.18193602561950684,0,0.2103699892759323,0.7608765959739685,0.09418296068906784,1],[7,0.2615714967250824,0.9192214012145996,0.2942997217178345,0,0.28314000368118286,0.2184218019247055,-0.9338756203651428,0,-0.9227200746536255,0.32760322093963623,-0.2031354308128357,0,0.5551329255104065,-0.5520450472831726,0.03320491686463356,1],[7,0.43139737844467163,-0.8821656107902527,0.18889200687408447,0,-0.24846720695495605,0.08510061353445053,0.9648947715759277,0,-0.867271900177002,-0.46318650245666504,-0.18247702717781067,0,0.31348907947540283,0.6918996572494507,0.04909580200910568,1],[7,0.21573083102703094,-0.958008348941803,0.18889209628105164,0,-0.22205685079097748,0.14024563133716583,0.9648947715759277,0,-0.9508686065673828,-0.25010231137275696,-0.18247701227664948,0,0.4393600821495056,0.606752336025238,0.0490957535803318,1],[7,-0.01162785291671753,-0.9819288849830627,0.1888926476240158,0,-0.18361148238182068,0.18779009580612183,0.9648946523666382,0,-0.9829301238059998,-0.023463208228349686,-0.18247701227664948,0,0.5421320796012878,0.49480828642845154,0.04909546673297882,1],[7,-0.03237831965088844,-0.9814639687538147,0.18889223039150238,0,-0.1796015202999115,0.1916283816099167,0.9648947715759277,0,-0.9832065105438232,-0.0026836604811251163,-0.18247699737548828,0,0.5444124341011047,0.49238041043281555,0.08485521376132965,1],[7,0.19543510675430298,-0.9623540043830872,0.1888919472694397,0,-0.21904310584068298,0.1449073702096939,0.9648948311805725,0,-0.9559420943260193,-0.22994981706142426,-0.1824769824743271,0,0.44517016410827637,0.6049174666404724,0.08485535532236099,1],[7,0.41265639662742615,-0.8910862803459167,0.1888919621706009,0,-0.24661308526992798,0.09033294022083282,0.9648947715759277,0,-0.8768676519393921,-0.4447532296180725,-0.18247702717781067,0,0.3248319923877716,0.691457986831665,0.08485537767410278,1],[7,0.3621980547904968,-0.912760853767395,0.18889197707176208,0,-0.2411777228116989,0.10397772490978241,0.9648947715759277,0,-0.9003588557243347,-0.39503952860832214,-0.18247704207897186,0,0.3676602244377136,0.664829671382904,0.1206679567694664,1],[7,-0.011072549037635326,0.009306586347520351,0.999895453453064,0,-0.6375020146369934,0.7703173756599426,-0.014229284599423409,0,-0.770369291305542,-0.6375927925109863,-0.0025964092928916216,0,0.43743765354156494,0.4855678677558899,-0.39459678530693054,1],[7,-0.00862062070518732,0.011614633724093437,0.999895453453064,0,-0.4421119689941406,0.8968470096588135,-0.014229318127036095,0,-0.8969184756278992,-0.4421883523464203,-0.0025964088272303343,0,0.5067464113235474,0.3786581754684448,-0.39459678530693054,1],[7,-0.005701473914086819,0.01329326443374157,0.999895453453064,0,-0.22276043891906738,0.9747692942619324,-0.014229420572519302,0,-0.9748566150665283,-0.22281824052333832,-0.002596408361569047,0,0.5563941597938538,0.2569712698459625,-0.39459681510925293,1],[7,0.1413324624300003,-0.9717741012573242,0.18889209628105164,0,-0.2106001079082489,0.1569257378578186,0.9648947715759277,0,-0.9673018455505371,-0.17615164816379547,-0.18247701227664948,0,0.47841912508010864,0.5696455240249634,0.12066787481307983,1],[7,-0.08719304203987122,-0.9781190752983093,0.1888924092054367,0,-0.1686083823442459,0.20136888325214386,0.964894711971283,0,-0.9818190336227417,0.052283257246017456,-0.18247704207897186,0,0.5752666592597961,0.44879305362701416,0.12066774070262909,1],[7,-0.6794353127479553,0.009393456391990185,0.7336753010749817,0,0.030185053125023842,0.9994294047355652,0.015157511457800865,0,-0.7331143021583557,0.03244457393884659,-0.6793311238288879,0,0.5825480222702026,-0.01552632637321949,0.7608013153076172,1],[7,-0.652716875076294,-0.18889524042606354,0.7336752414703369,0,-0.2622013986110687,0.9648940563201904,0.015157476998865604,0,-0.7107821702957153,-0.18247711658477783,-0.6793312430381775,0,0.3646632730960846,0.09478891640901566,0.7608013153076172,1],[7,-0.22194457054138184,0.8817245364189148,-0.4162963926792145,0,0.38772401213645935,-0.311932772397995,-0.8673914670944214,0,-0.8946565985679626,-0.3539210557937622,-0.27263396978378296,0,0.592211127281189,0.548841655254364,0.017555460333824158,1],[7,-0.652716875076294,0.7335246205329895,0.18947939574718475,0,-0.2622013986110687,0.015925809741020203,-0.9648816585540771,0,-0.7107821702957153,-0.6794763207435608,0.1819361001253128,0,0.21036994457244873,0.7608765959739685,-0.0941830724477768,1],[7,-0.43139657378196716,0.8821653127670288,0.18889516592025757,0,-0.24846872687339783,0.08510344475507736,-0.9648941159248352,0,-0.8672718405723572,-0.4631865322589874,0.18247713148593903,0,0.31348901987075806,0.6918995976448059,-0.04909594729542732,1],[7,-0.21573011577129364,0.9580078125,0.18889521062374115,0,-0.22205767035484314,0.14024870097637177,-0.9648941159248352,0,-0.950868546962738,-0.25010234117507935,0.18247711658477783,0,0.4393600523471832,0.6067522764205933,-0.04909592494368553,1],[7,0.011628418229520321,0.9819283485412598,0.18889550864696503,0,-0.18361154198646545,0.18779301643371582,-0.9648940563201904,0,-0.982930064201355,-0.023463208228349686,0.18247711658477783,0,0.5421320199966431,0.49480825662612915,-0.0490957647562027,1],[7,0.032378945499658585,0.9814632534980774,0.18889544904232025,0,-0.1796015202999115,0.19163164496421814,-0.9648940563201904,0,-0.9832065105438232,-0.0026836602482944727,0.18247710168361664,0,0.54441237449646,0.4923803508281708,-0.0848553329706192,1],[7,-0.1954343616962433,0.9623534083366394,0.18889518082141876,0,-0.21904388070106506,0.1449105441570282,-0.9648941159248352,0,-0.9559420347213745,-0.22994981706142426,0.18247711658477783,0,0.445170134305954,0.6049174070358276,-0.08485546708106995,1],[7,-0.4126555919647217,0.8910859227180481,0.18889515101909637,0,-0.24661454558372498,0.09033582359552383,-0.9648941159248352,0,-0.8768675923347473,-0.4447532296180725,0.18247713148593903,0,0.32483190298080444,0.6914579272270203,-0.08485550433397293,1],[7,-0.36219725012779236,0.9127604961395264,0.18889518082141876,0,-0.24117903411388397,0.10398071259260178,-0.9648940563201904,0,-0.9003587961196899,-0.39503952860832214,0.18247714638710022,0,0.36766016483306885,0.664829671382904,-0.12066807597875595,1],[7,0.01107463426887989,-0.009309056214988232,0.9998953342437744,0,-0.6375020146369934,0.7703172564506531,0.014232516288757324,0,-0.7703691720962524,-0.6375929117202759,0.0025964390952140093,0,0.437437504529953,0.48556801676750183,0.39459672570228577,1],[7,0.008622056804597378,-0.011617474257946014,0.9998953342437744,0,-0.4421120882034302,0.8968468308448792,0.014232502318918705,0,-0.8969184160232544,-0.44218847155570984,0.0025964390952140093,0,0.5067462921142578,0.37865835428237915,0.39459672570228577,1],[7,0.005702184047549963,-0.013296224176883698,0.9998953342437744,0,-0.22276057302951813,0.9747691750526428,0.014232464134693146,0,-0.9748564958572388,-0.22281838953495026,0.0025964388623833656,0,0.5563940405845642,0.256971538066864,0.39459672570228577,1],[7,-0.1413317769765854,0.9717735648155212,0.18889525532722473,0,-0.21060068905353546,0.1569288969039917,-0.9648940563201904,0,-0.9673017859458923,-0.17615166306495667,0.18247713148593903,0,0.47841906547546387,0.5696454644203186,-0.12066803127527237,1],[7,0.08719360083341599,0.9781184196472168,0.18889550864696503,0,-0.1686081886291504,0.20137202739715576,-0.9648939967155457,0,-0.9818189740180969,0.052283257246017456,0.18247714638710022,0,0.5752665996551514,0.44879305362701416,-0.12066791206598282,1],[7,0.9877861738204956,-0.0000017353457906210679,0.15581563115119934,0,0.0000017142336901088129,1,2.698666321521159e-7,0,-0.15581564605236053,5.338804398569152e-10,0.9877861142158508,0,0.0945574939250946,0.013598348945379257,-0.9581573009490967,1],[7,-0.9877861738204956,-0.0000017217240610989393,0.15581563115119934,0,-0.0000017006119605866843,1,2.687988853722345e-7,0,-0.15581564605236053,5.338807174126714e-10,-0.9877861142158508,0,0.0945574939250946,0.013598349876701832,0.9581573009490967,1],[7,9.469262352013175e-8,-0.000001047661271513789,1,0,-0.054779842495918274,-0.9984985589981079,-0.0000010409009973955108,0,0.9984984993934631,-0.054779842495918274,-1.5194116542716074e-7,0,-1.1092911958694458,0.10392146557569504,1.6897978127872193e-7,1],[7,-0.15446875989437103,0.979030191898346,0.13280878961086273,0,-0.06060376018285751,0.12477988749742508,-0.9903315901756287,0,-0.9861368536949158,-0.16102401912212372,0.04005834087729454,0,1.5236903429031372,0.6005950570106506,-0.10541548579931259,1],[7,-2.4542961796214513e-7,3.249531346227741e-7,-1.0000001192092896,0,0.6026914119720459,-0.7979740500450134,-4.0722272842685925e-7,0,-0.7979741096496582,-0.6026914119720459,-5.868374489893433e-16,0,1.4912972450256348,0.5703133344650269,-3.3940111165975395e-7,1],[7,-1.8816315616732027e-7,-0.0000018126195300283143,-1.0000001192092896,0,-0.10325247049331665,-0.9946551322937012,0.0000018223601045974647,0,-0.994655191898346,0.10325246304273605,-6.401596023871e-16,0,1.6265244483947754,-0.5996875762939453,6.521057684949483e-7,1],[7,0.0065081133507192135,0.9911279678344727,0.13274946808815002,0,-0.12765029072761536,0.1324896365404129,-0.9829299449920654,0,-0.991797924041748,-0.010548489168286324,0.12738002836704254,0,1.3773036003112793,0.39531993865966797,-0.22687022387981415,1],[7,1.3763876705041866e-9,-0.0000010450661420691176,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000010450646641402273,0,0.9999996423721313,-0.0007963179377838969,-2.2085921980163903e-9,0,-1.001437783241272,0.04388516768813133,2.458805381522211e-9,1],[7,0.3029487431049347,0.9437149167060852,0.13275188207626343,0,-0.08212754875421524,0.16463243961334229,-0.9829295873641968,0,-0.9494613409042358,0.2868746519088745,0.12738025188446045,0,1.2638553380966187,0.017741609364748,-0.22686953842639923,1],[7,-5.960464477539063e-8,-6.653536388512293e-8,-1.0000001192092896,0,-0.6672486066818237,-0.7448350191116333,8.932899930869098e-8,0,-0.7448350787162781,0.667248547077179,1.1181339483930422e-17,0,1.110474944114685,-1.4400023221969604,-9.364825359625684e-8,1],[7,0.015061919577419758,0.13632157444953918,-0.9905502200126648,0,0.25795668363571167,-0.9576570987701416,-0.12787237763404846,0,-0.96603924036026,-0.25359299778938293,-0.049589212983846664,0,1.5098787546157837,0.7625498175621033,0.1447174847126007,1],[7,0.009933318942785263,0.14177490770816803,-0.9898492097854614,0,-0.33035174012184143,-0.9338521957397461,-0.13706965744495392,0,-0.9438058137893677,0.3283599317073822,0.037559330463409424,0,1.3444461822509766,-0.043479591608047485,0.021359171718358994,1],[7,0.07747860997915268,0.11914637684822083,-0.9898492693901062,0,-0.7419853210449219,-0.6562547087669373,-0.1370696872472763,0,-0.6659243702888489,0.7450736165046692,0.0375591404736042,0,0.9897361993789673,-0.5989618897438049,0.021359387785196304,1],[7,-0.032969240099191666,0.13824449479579926,-0.989849328994751,0,-0.0356072336435318,-0.9899217486381531,-0.13706855475902557,0,-0.9988223314285278,0.03072674386203289,0.037559445947408676,0,1.472527027130127,0.36103612184524536,0.02135857194662094,1],[7,0.2772752046585083,0.7800899147987366,-0.5608729720115662,0,1.3411036547950062e-7,-0.5837620496749878,-0.811924934387207,0,-0.96079021692276,0.22512668371200562,-0.16186289489269257,0,1.4840806722640991,-0.6901702880859375,0.3125878572463989,1],[7,0.007227929774671793,0.8220189213752747,-0.5694145560264587,0,-0.003360894974321127,-0.569406270980835,-0.8220494985580444,0,-0.9999678730964661,0.007855461910367012,-0.001352909835986793,0,1.430785894393921,-0.39154478907585144,0.08398748934268951,1],[7,-0.3340667188167572,0.7887672781944275,-0.5159899592399597,0,0.0051648891530931,-0.5459006428718567,-0.8378340601921082,0,-0.9425350427627563,-0.28255757689476013,0.178293377161026,0,1.3022090196609497,-0.012160697020590305,-0.16273200511932373,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",825570649,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":41976,"length":11616,"count":2904,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":41976,"count":583,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]},"minPosition",8,[1,-0.41331958770751953,-0.4533022344112396,1.0057175159454346],"maxPosition",8,[1,0.4133186340332031,0.4180365204811096,1.939112901687622]]],-1],0,0,[],[],[]],[[[6,".bin",1791856757,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":78720,"length":11064,"count":2766,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":78720,"count":1640,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5774583220481873,-0.20214226841926575,-0.2633986473083496],"maxPosition",8,[1,0.5774586200714111,0.20213645696640015,0.2633989453315735]]],-1],0,0,[],[],[]],[[[18,"Skin-1",2725258416,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066/Bone068","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone060/Bone061/Bone062","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070/Bone071","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone069/Bone070","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone064/Bone065/Bone066","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone056/Bone057/Bone058"],[[[7,7.510177368885707e-8,-0.000001404751969857898,1,0,-0.054779790341854095,-0.9984985589981079,-0.0000013985285249873414,0,0.9984984993934631,-0.054779790341854095,-1.519410233186136e-7,0,-1.109039068222046,0.10390757769346237,1.689412414407343e-7,1],[7,-0.15446843206882477,0.979030191898346,0.13281169533729553,0,-0.06060381978750229,0.12478284537792206,-0.9903314709663391,0,-0.9861370921134949,-0.1610238403081894,0.04005797579884529,0,1.5234417915344238,0.6005545258522034,-0.10540369898080826,1],[7,0.006508479826152325,0.9911280274391174,0.13275188207626343,0,-0.12765026092529297,0.1324920952320099,-0.9829299449920654,0,-0.9917980432510376,-0.010548430494964123,0.12738002836704254,0,1.3770534992218018,0.39531755447387695,-0.22683709859848022,1],[7,0.27727508544921875,0.7800897359848022,-0.5608730316162109,0,8.940696716308594e-8,-0.5837620496749878,-0.8119248151779175,0,-0.9607905745506287,0.2251264750957489,-0.16186273097991943,0,1.4838389158248901,-0.6901130080223083,0.31254664063453674,1],[7,0.007227569818496704,0.8220177888870239,-0.5694159269332886,0,-0.0033608824014663696,-0.5694076418876648,-0.8220484256744385,0,-0.9999682307243347,0.00785515271127224,-0.001352728228084743,0,1.4305342435836792,-0.3915420472621918,0.08398734033107758,1],[7,0.07747919112443924,0.11914558708667755,-0.989849328994751,0,-0.7419849634170532,-0.656254768371582,-0.13706964254379272,0,-0.6659243106842041,0.7450733184814453,0.03755815327167511,0,0.9895676374435425,-0.5987734198570251,0.021370820701122284,1],[7,0.3029489815235138,0.9437153339385986,0.13275176286697388,0,-0.08212731033563614,0.16463230550289154,-0.9829299449920654,0,-0.9494613409042358,0.28687506914138794,0.12738001346588135,0,1.2636157274246216,0.0178136695176363,-0.22683711349964142,1],[7,-5.0375870586094607e-8,-6.815836428586408e-8,-1,0,-0.6672486066818237,-0.7448350191116333,8.437996967813888e-8,0,-0.7448350191116333,0.6672486066818237,-7.956860947899713e-9,0,1.1102869510650635,-1.4398339986801147,2.520713948683806e-8,1],[7,5.72044491775614e-8,-6.253749518236873e-8,-1,0,0.6026914119720459,-0.7979741096496582,8.437996257271152e-8,0,-0.7979741096496582,-0.6026914119720459,-7.956861836078133e-9,0,1.4910959005355835,0.5701613426208496,2.6040110512326464e-8,1],[7,-7.981162397641128e-10,-8.475061008539342e-8,-1,0,-0.10325250029563904,-0.994655191898346,8.438004073241245e-8,0,-0.994655191898346,0.10325250029563904,-7.956861836078133e-9,0,1.6262733936309814,-0.5996615290641785,2.8288500431017383e-8,1],[7,0.015063018538057804,0.13632121682167053,-0.9905502200126648,0,0.25795668363571167,-0.9576570391654968,-0.12787175178527832,0,-0.9660389423370361,-0.25359290838241577,-0.04959018528461456,0,1.509634256362915,0.7624855041503906,0.144706591963768,1],[7,-0.03296812251210213,0.1382458508014679,-0.9898492097854614,0,-0.035607077181339264,-0.9899214506149292,-0.1370699554681778,0,-0.998822033405304,0.03072669729590416,0.03755837306380272,0,1.4722743034362793,0.36104369163513184,0.02137068286538124,1],[7,0.00993429683148861,0.1417747437953949,-0.9898492097854614,0,-0.33035144209861755,-0.9338521361351013,-0.13706985116004944,0,-0.9438056349754333,0.32835978269577026,0.037558332085609436,0,1.3442072868347168,-0.04339667037129402,0.02137068845331669,1],[7,-0.33406728506088257,0.7887668609619141,-0.5159901976585388,0,0.00516499625518918,-0.5459010004997253,-0.8378337621688843,0,-0.9425351023674011,-0.2825579345226288,0.17829366028308868,0,1.301971435546875,-0.012231295928359032,-0.16268746554851532,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2255516190,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.03462786599993706,-4.3077626799004065e-8,-0.26440858840942383],"maxPosition",8,[1,0.03462786599993706,0.04434933513402939,1.1920928955078125e-7]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"mainColor",8,[4,4286677386],"emissive",8,[4,4279111182],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[4,4,4,1]],[[[71,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"alphaThreshold":1,"roughness":1,"metallic":0,"SpecularIntensity":0,"normalStrenth":0.691},"emissive",8,[4,4281084972],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[30,30,30,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[31,31,31,1]],[[[6,".bin",1836698148,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":126432,"length":28776,"count":7194,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":126432,"count":1756,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]]},"minPosition",8,[1,-0.640375018119812,-0.6588058471679688,0],"maxPosition",8,[1,0.640375018119812,0.3857252895832062,1.1357182264328003]]],-1],0,0,[],[],[]],[[[18,"Skin-0",178126900,["Bone002/Bone016/Bone004/Bone005","Bone002/Bone016/Bone004/Bone005/Bone011","Bone002/Bone016/Bone004/Bone005/Bone011/Bone012","Bone002/Bone016/Bone004/Bone005/Bone006","Bone002/Bone016","Bone002/Bone016/Bone004/Bone005/Bone008","Bone002/Bone016/Bone004/Bone005/Bone008/Bone009","Bone002/Bone016/Bone004/Bone005/Bone008(mirrored)","Bone002/Bone016/Bone004/Bone005/Bone008(mirrored)/Bone009(mirrored)","Bone002/Bone016/Bone004/Bone005/Bone014","Bone002/Bone003","Bone002/Bone015(mirrored)","Bone002/Bone016/Bone004","Bone002","Bone002/Bone016/Bone004/Bone005/Bone014(mirrored)","Bone002/Bone015"],[[[7,1.9302044051983103e-7,-1,-3.852983709862201e-8,0,6.123234262925839e-17,3.852983709862201e-8,-1,0,1,1.9302044051983103e-7,7.498277850405757e-15,0,-0.5432602763175964,0.004916622769087553,-3.790401237324659e-8,1],[7,-2.355942569920444e-7,-2.243258876433174e-7,-1,0,-0.9816755056381226,-0.19056035578250885,2.7402472824178403e-7,0,-0.19056034088134766,0.9816755652427673,-1.7532029517042247e-7,0,-0.1538691371679306,-0.7507379055023193,1.934847375650861e-7,1],[7,-9.350453211709464e-8,-3.0200700962268456e-7,-1,0,-0.9885977506637573,-0.15058112144470215,1.379148955038545e-7,0,-0.15058110654354095,0.9885978698730469,-2.844833488779841e-7,0,-0.37949302792549133,-0.7359493374824524,2.23393612941436e-7,1],[7,1.9274274620784126e-7,-1,-1.7055300505219861e-9,0,6.123234262925839e-17,1.7055300505219861e-9,-1,0,1,1.9274274620784126e-7,3.8996086637497704e-16,0,-0.8130612969398499,0.004916570149362087,-9.552830704251392e-8,1],[7,0.9999945759773254,-0.003311153966933489,-8.605783863302463e-10,0,-1.4000171022487962e-9,-1.6291328108763992e-7,-1,0,0.003311153966933489,0.9999945759773254,-1.6291701854243001e-7,0,-0.013396444730460644,-0.4090369939804077,5.563288141274825e-8,1],[7,0.7008054256439209,-0.7071070671081543,0.09418982267379761,0,0.13320492208003998,3.3864878901113116e-7,-0.9910885095596313,0,0.7008057236671448,0.7071067094802856,0.09419034421443939,0,-0.8017578721046448,-0.3349435031414032,0.09328240901231766,1],[7,0.6371747851371765,-0.7649426460266113,0.09418994933366776,0,0.1327081173658371,-0.011494169943034649,-0.9910885095596313,0,0.759208619594574,0.6439962983131409,0.09419023990631104,0,-1.108195185661316,-0.24021270871162415,0.09328244626522064,1],[7,-0.7008057832717896,0.7071068286895752,0.09418955445289612,0,0.13320454955101013,3.676931044083176e-7,0.9910886287689209,0,0.7008057236671448,0.7071068286895752,-0.0941900685429573,0,-0.801583468914032,-0.33511969447135925,-0.09330613911151886,1],[7,-0.637174665927887,0.764942467212677,0.09418943524360657,0,0.1327076256275177,-0.011493895202875137,0.9910886883735657,0,0.7592085599899292,0.643996000289917,-0.0941900685429573,0,-1.1080362796783447,-0.240402951836586,-0.0933062732219696,1],[7,0.6490874886512756,-0.7607138752937317,-3.852983354590833e-8,0,-1.7182161116124917e-7,-9.595909489235055e-8,-1,0,0.7607138752937317,0.6490874886512756,-1.9299289988339297e-7,0,-0.742013156414032,-0.3800415098667145,-0.3281247615814209,1],[7,0.005249893758445978,0.9999862313270569,-0.000005764742581959581,0,1.6291025417558558e-7,-0.000005765677087765653,-1,0,-0.9999862313270569,0.005249893758445978,-1.9317720045819442e-7,0,0.3527457118034363,-0.005389792378991842,8.669943696304472e-8,1],[7,4.768355665873969e-7,1.3550743460655212e-7,-1,0,-1,6.467600028670431e-14,-4.768355665873969e-7,0,6.123234262925839e-17,1,1.3550743460655212e-7,0,-0.25323304533958435,-0.32672837376594543,0.45099979639053345,1],[7,0.006357461214065552,-0.9999798536300659,0.000004729841748485342,0,-1.6291920701405616e-7,-0.000004730973614641698,-1,0,0.9999798536300659,0.006357461214065552,-1.9299288567253825e-7,0,-0.3604631721973419,0.0014628707431256771,4.34964491091705e-8,1],[7,0.9999774694442749,0.006711329333484173,-8.605784973525488e-10,0,2.3283064365386963e-10,-1.6291912174892786e-7,-1,0,-0.006711329333484173,0.9999774694442749,-1.6291701854243001e-7,0,0.0022917839232832193,-0.34147217869758606,5.563288141274825e-8,1],[7,-0.6490874290466309,0.7607139348983765,-2.0934220401613857e-7,0,-1.2180315422938293e-7,1.7126193085914565e-7,1,0,0.7607139348983765,0.6490874290466309,-1.8506597143641557e-8,0,-0.7423192262649536,-0.3796827495098114,0.32812488079071045,1],[7,4.768355665873969e-7,-2.2212043404579163e-7,-1,0,-1,-1.0585369386584276e-13,-4.768355665873969e-7,0,6.123234262925839e-17,1,-2.2212043404579163e-7,0,-0.2532326281070709,-0.3267284035682678,-0.4508057236671448,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[29,"line_point"],[60,"line_point",[-2],[0,"7dKrrF6CJOVr6eOy6TlN5f",-1,0]],[82,"line_point",1,[[25,-3,[4,"ffgwLYFQBPdpGznDGjVOOh"],[0],[1],1]],[0,"c3GdcccvNNEKyp3sxHasGW",1,0],[1,1.5,1,3.8]]],0,[0,3,1,0,-1,2,0,1,2,0,11,1,3],[0,0],[-1,2],[58,156]],[[[29,"xiaoguai01"],[54,"xiaoguai01",[-3,-4],[[40,-2,[4,"86KR1AA2VV/LdTGp9YdP/u"],[3,4,5,6,7],8]],[0,"f0l1SVqEBdE7x59A3aiLwt",-1,0],[1,1.392,0,0]],[34,"Dummy003",[[[5,"Bone010",-5,[0,"6ehd/eLbdVVZZf0qtl/XNn",1,0],[1,2.269275665283203,39.46784591674805,-0.0570843443274498],[3,-0.49999987334012364,0.49999996274708947,-0.5000001117586992,0.5000000521540553],[1,0,89.99997950943127,-90]],-6,-7,[5,"Bone020",-8,[0,"155A3Xi0pQa7CxKY+RJEUj",1,0],[1,2.2692737579345703,-26.612756729125977,-0.43574047088623047],[3,-0.49999987334012364,0.49999996274708947,-0.5000001117586992,0.5000000521540553],[1,0,89.99997950943127,-90]],[5,"Bone026",-9,[0,"1cYI9PLapa7JSOj5Ba06fO",1,0],[1,0.9267539978027344,-11.571712493896484,40.87541580200195],[3,-0.0004801868247889454,0.7074247456087217,-0.0004811521406180812,0.7067883468292797],[1,0.00011327141013125805,90.05156650907715,-0.07789578694596337]],[5,"Bone024",-10,[0,"6fcOuSXP1QwKATU7h0fXDC",1,0],[1,2.3665637969970703,-9.803905487060547,-34.48388671875],[3,-0.0004806106719990821,0.7071088529676568,-0.0004807792704883744,0.7071043826193131],[1,0.000013907529886811201,90.00036223501789,-0.07789996058345319]],[5,"Bone022",-11,[0,"feny1fstxbILqzf3T+Gctb",1,0],[1,2.2692699432373047,3.84759521484375,-0.05708151310682297],[3,-0.49999987334012364,0.49999996274708947,-0.5000001117586992,0.5000000521540553],[1,0,89.99997950943127,-90]]],4,1,1,4,4,4,4],[0,"0f+6IwWhhWdYUgQ0o/AdLx",1,0],[1,35.37796401977539,-0.14989018440246582,9.327770233154297],[3,0.5014942914613331,0.49849757852025595,0.5014942914613331,-0.49850488008928484],[1,-90.3429801693548,-89.99958290492953,-0.000419599360126524]],[91,"Dummy001",1,[[[5,"Bone001",-12,[0,"edKJIbGIJcG4okot/tklC3",1,0],[1,0.06492304056882858,-31.8971004486084,2.384258550591767e-7],[3,0.000006390367271995163,0.000006483900618235167,0.7088465813004337,0.7053626897531582],[1,-179.99794016597826,179.9989833513533,89.71770531803507]],-13,[5,"Bone007",-14,[0,"08/ft6Mz1Y25Oxl0uCm2rR",1,0],[1,40.401283264160156,-10.902563095092773,38.345062255859375],[3,0.0000014219631370194183,0.0000015053059347539937,0.7122867719026406,0.7018885627848825],[1,-179.9994221687107,179.9996593672521,89.157441448734]],[5,"Bone005",-15,[0,"fcyP//ynVduIauvmD00D5P",1,0],[1,-41.15687942504883,-11.036237716674805,39.06268310546875],[3,0.0000013724512754468856,0.0000013554968161543718,0.7026984742423081,0.7114877752244314],[1,0.00022104575427926837,-2.930738423833312e-11,89.2878118177645]]],4,1,4,4],[0,"a7XCm3NlhWjKcyp5XFTmqm",1,0],[1,0,0.33882153034210205,0.0000010423595995234791],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[34,"Dummy002",[[[5,"Bone028",-16,[0,"b2C5uCOSda6aqcOadWy579",1,0],[1,27.685688018798828,-3.8294830322265625,-0.00009918957948684692],[3,0.000004922826193258603,0.0000012501779208921623,-0.011035219122359028,0.9999391101027724],[1,0.0005657986846091496,0.00014951265328535103,-1.2645686292881266]],[5,"Bone016",-17,[0,"0bP0XMVIhUK4HjQkyw0q1c",1,0],[1,40.36506271362305,38.04021453857422,0.0573577880859375],[3,-0.5000005885878549,0.499998413018353,0.5000042840757758,-0.4999967142860023],[1,0,269.9995560365131,-90]],-18],4,4,1],[0,"9c/GQCTBFVO5WqLtOvvM2W",1,0],[1,32.08238220214844,-0.3242168128490448,-0.8817479610443115],[3,0.4990243687889884,0.5009737089230182,-0.4990205838939889,0.5009775236203405],[1,89.77618650809919,89.99956457292936,-8.570989543377201e-7]],[48,"lvdang",1,[[41,-19,[4,"65+Wtkz0JYlYLMNVtbxc3Y"],[0],[1],1,1,2]],[0,"84Zd3rF1lT67VVHvH5+TXH",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[2,"Bone003",3,[4],[0,"85Oplj0uJQ8ZlAB7sB7nA9",1,0],[1,-0.32648587226867676,-6.649045944213867,-3.4341297149658203],[3,-0.00000270264824553488,-0.0000026921378976642675,0.7057277970453018,0.7084830812821387],[1,-0.00043712736946075517,-4.71899416793264e-9,89.77674339689206]],[2,"Bone033",4,[2],[0,"1fSY/GVM5YUKOBeMgttc/5",1,0],[1,-20.956270217895508,-36.80553436279297,-0.050138480961322784],[3,0.5007068551200439,0.49929625158654134,-0.5007000601904901,-0.49929485087737896],[1,-179.89047405424924,89.89000447827165,89.83866545865104]],[7,"Bone029",2,[[13,"Bone030",-20,[0,"a1bax8wwhY8K7EApuck+DW",1,0],[1,8.041948318481445,-0.00000762939453125,-0.0000019073486328125]]],[0,"f5L9pr2uNZOoOa0s7oHLwe",1,0],[1,2.8747386932373047,18.172367095947266,20.934446334838867],[3,2.328202997788144e-10,-2.1961553204983643e-12,-0.009432414347154318,0.9999555137902804],[1,2.6680428035617463e-8,-9.848575503078694e-18,-1.0808910937180056]],[7,"Bone031",2,[[13,"Bone032",-21,[0,"72jkGP3ypTSLL61VP3KQsg",1,0],[1,8.041942596435547,0,-0.0000019073486328125]]],[0,"67HFfXKNNZd6Ii/0S7SKca",1,0],[1,2.8747425079345703,18.172359466552734,-21.271482467651367],[3,2.328202997788144e-10,-2.1961553204983643e-12,-0.009432414347154318,0.9999555137902804],[1,2.6680428035617463e-8,-9.848575503078694e-18,-1.0808910937180056]]],0,[0,3,1,0,1,1,0,-1,5,0,-2,3,0,0,2,0,-2,8,0,-3,9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,-2,6,0,0,3,0,0,3,0,0,4,0,0,4,0,-3,7,0,1,5,0,0,8,0,0,9,0,11,1,2,0,7,4,0,6,21],[0,0,0,0,0,0,0,0,0],[-1,2,5,-1,-2,-3,-4,-5,12],[157,158,159,59,160,161,162,163,59]],[[[6,".bin",3811117962,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18528,"length":1872,"count":468,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18528,"count":386,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5839745998382568,-0.3400784432888031,-0.14198029041290283],"maxPosition",8,[1,0.574414074420929,0.18898892402648926,2.211392879486084]]],-1],0,0,[],[],[]],[[[29,"boss5"],[67,"boss5",[[-3,[59,"Bone001",-5,[0,"5aHnPtPUlftKdaZ1ju5T2P",-4,0],[3,8.146021671449559e-8,-1.449465446900192e-10,-0.0017793509645463983,0.9999984169538162],[1,0.000009334668009133825,-5.712240352157635e-18,-0.2038987086757843]],-6,[5,"IK Chain001",-8,[0,"61/bGGlkRUNYwN7gfCkTOv",-7,0],[1,-0.5506057143211365,0.13607700169086456,-0.594435453414917],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain002",-10,[0,"6bWNbkN39aFam5Nm+gi7fr",-9,0],[1,-0.5054168701171875,0.07496003806591034,-0.32719886302948],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain003",-12,[0,"86jpb7syNTSIlFc2rLxuN/",-11,0],[1,-0.43262946605682373,0.06230565533041954,-0.002256382256746292],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain004",-14,[0,"8ctSWwykVayZSTMpuWGpVX",-13,0],[1,-0.21928712725639343,0.04968605935573578,0.16274569928646088],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain005",-16,[0,"e05uTS6AxQd4Zl/ATljb9P",-15,0],[1,0.2196042239665985,0.04968602955341339,0.16274602711200714],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain006",-18,[0,"bbzJSlhTpQi55XFJ6bRE7k",-17,0],[1,0.433517187833786,0.06230572983622551,-0.0022566132247447968],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain007",-20,[0,"9fxmV2kZ9WS5TEeeDoybuB",-19,0],[1,0.5055986642837524,0.07496006786823273,-0.3271992802619934],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[5,"IK Chain008",-22,[0,"9dxUvAYxtVz5KiMtDD5B1q",-21,0],[1,0.550594687461853,0.1360769271850586,-0.5944357514381409],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],1,4,1,4,4,4,4,4,4,4,4],[[40,-2,[4,"a4Un5EuF9XMJuaY8FiOlD2"],[3,4,5,6,7],8]],[0,"df61Oe8wNaOqs3Ga6J5LJk",-1,0]],[2,"Bone023",1,[-23,-24,-25,-26,-27,-28,-29,-30,-31],[0,"f4K7QFq/RTe4xmtw7hOiPm",1,0],[1,0.0011973587097600102,0.07216227799654007,-0.10858821123838425],[3,8.145988558777144e-8,8.23106838861426e-10,0.0072459539360886505,0.999973747731184],[1,0.000009334666998332492,2.6683229326893597e-8,0.8303324242175625]],[93,"Bone003",[[13,"Bone004",-32,[0,"d7MmJ/j2xXdLAv/bZf3EUz",1,0],[1,0.3282849192619324,3.073364496231079e-8,2.9802322387695312e-8]],[5,"Dummy003",-33,[0,"9fnahLc5BXlYbpJ2yyRE4C",1,0],[1,0.4403638243675232,-0.12200576066970825,0.13608504831790924],[3,-0.4985774766009318,-0.5014184723955071,-0.49857732758931955,0.5014186512094417],[1,-89.6744266416764,-89.99998121220415,-0.0000016541748401295401]],[5,"Dummy004",-34,[0,"ca9/QdukJWFbwiNS+U9G3V",1,0],[1,0.4400920867919922,-0.0741732269525528,-0.10536998510360718],[3,-0.4985774766009318,-0.5014184723955071,-0.49857732758931955,0.5014186512094417],[1,-89.6744266416764,-89.99998121220415,-0.0000016541748401295401]],[5,"Dummy005",-35,[0,"4eOy0VI15Tpb2Dfb2ZmpSJ",1,0],[1,0.44132405519485474,-0.29098227620124817,-0.022240102291107178],[3,-0.4985774766009318,-0.5014184723955071,-0.49857732758931955,0.5014186512094417],[1,-89.6744266416764,-89.99998121220415,-0.0000016541748401295401]],[5,"Dummy006",-36,[0,"617X6WWyhSdaiOvzy4bDGU",1,0],[1,0.412359356880188,0.2341458648443222,-0.06032600998878479],[3,-0.4985774766009318,-0.5014184723955071,-0.49857732758931955,0.5014186512094417],[1,-89.6744266416764,-89.99998121220415,-0.0000016541748401295401]],[5,"Dummy002",-37,[0,"9abmuf5TpbAqz6xhhvXBOE",1,0],[1,0.43111246824264526,0.1110234260559082,0.05380965769290924],[3,-0.4985774766009318,-0.5014184723955071,-0.49857732758931955,0.5014186512094417],[1,-89.6744266416764,-89.99998121220415,-0.0000016541748401295401]]],[0,"81mPPUZzhSorxjDvfsqhgm",1,0],[1,0.31522852182388306,-1.9674189388751984e-7,0],[3,0.000004838023807172895,-2.8062062533969692e-8,-0.005800214521340578,0.9999831786025697],[1,0.0005544060165395875,-1.667408768681078e-12,-0.6646593515290172]],[33,"Bone024",[-38,-39],[0,"92SI7+5WNf/YrrhC6Li3w+",1,0],[1,0.0024428521282970905,0.04318778216838837,1.3877787807814457e-17],[3,6.357110057547491e-19,2.2204373464958123e-16,-0.0028629277783254756,0.9999959018138704],[1,1.4569450630180924e-16,2.5444859116105466e-14,-0.32806780565872945]],[2,"Bone005",4,[-40,-41],[0,"91+V5Diz5dMIcGpgR0gN37",1,0],[1,0.005856226664036512,0.30302518606185913,0.37029820680618286],[3,-0.5038961179285429,-0.4960726208604318,0.4922274060112016,0.5076542503916321],[1,-71.89366898105071,-18.111320845392925,88.5983959003552]],[7,"Bone006",5,[[13,"Bone007",-42,[0,"61jq6q845UGLtZ4f9pMCFg",1,0],[1,0.22296011447906494,-5.960464477539063e-8,-2.842170943040401e-14]],[5,"Dummy001",-43,[0,"f2GjpVzHFdcrhS0d9+miWK",1,0],[1,0.3170551061630249,0.0710863322019577,0.11481869965791702],[3,6.961616169756246e-8,-6.89686014866712e-8,-0.703794997584439,0.7104031259609644],[1,0.00001122938789736219,-4.580513772871018e-11,-89.46455152982054]]],[0,"a0fwO/p6pUWbSNYwQpDi19",1,0],[1,0.2740076184272766,2.9802322387695312e-8,-3.1676677281211596e-8],[3,-2.3824892486047887e-7,1.950711764011462e-7,-0.0008704659809911088,0.9999996211443687],[1,-0.000027281888766182915,0.000022329770728565,-0.09974806644303623]],[48,"boss5",1,[[41,-44,[4,"45S2Szj9xUqoq6e+iMsqHd"],[0],[1],1,1,2]],[0,"69WfWNzkVeP52v02+3BegV",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[2,"Bone022",2,[4],[0,"00JIspMZNVCr4wU03NRJSW",1,0],[1,-0.0004933703457936645,0.0485825315117836,-1.4901161193847656e-8],[3,7.105241419360054e-15,5.1461880343320545e-17,0.007242615785561358,0.9999737719143351],[1,8.142220469898922e-13,-3.5153125657874783e-22,0.8299498903066138]],[7,"Bone008",5,[[13,"Bone009",-45,[0,"27v4wEzsNcPLuYe+cPFJ5w",1,0],[1,0.1377917230129242,-0.000001341104507446289,-2.5767121769604273e-10]]],[0,"8fhrhnqbNZ34VBDY5DFlyx",1,0],[1,-0.023229002952575684,-0.19731420278549194,5.960464477539063e-8],[3,-1.5443588442761357e-7,2.3620483164950151e-7,0.014495178450099807,0.9998949393819434],[1,-0.000018095135601715924,0.000027332243670266455,1.661083268840867]],[2,"Bone002",4,[3],[0,"c63WT+/dJarrSLgeF9ySKl",1,0],[1,-0.001909526763483882,0.030382826924324036,-0.17372509837150574],[3,-0.000003338491659208907,-0.0000032811202802595924,0.7009520336941921,0.7132084172512724],[1,-0.0005363966071456261,-5.547034640167685e-10,89.0068715790838]],[2,"Bone010(mirrored)",2,[-46],[0,"eccRG+ymdW9a0JKyp1FNXq",1,0],[1,0.32874301075935364,0.2695186138153076,0.06396476924419403],[3,0.6525087286853914,-0.5983313854188501,0.46323689323463973,0.04054001675446933],[1,114.80980431260788,-102.53354228087377,-48.011031243748334]],[7,"Bone011(mirrored)",11,[[13,"Bone012(mirrored)",-47,[0,"3fnJVn7RFc/LFf+knc6Yjj",1,0],[1,0.16437877714633942,-2.9802322387695312e-8,-7.450580596923828e-8]]],[0,"1cRH8H5wNZ44eUa68POCAw",1,0],[1,0.22188974916934967,-0.000002175569534301758,8.940696716308594e-8],[3,2.1327258903237834e-7,-1.358810545213535e-7,0.21640243007831444,0.9763042498402514],[1,0.00003004357833099518,-0.000022608039699107036,24.995635608002694]],[2,"Bone013(mirrored)",2,[-48],[0,"58zwGuVXxTgKfH0nq0e/oW",1,0],[1,0.33106672763824463,0.29183724522590637,-0.02575688809156418],[3,0.8931259044452988,-0.3114352568774338,0.32289317711559246,-0.0327749257001788],[1,169.9424427006038,-42.9579026682047,-35.27260883561539]],[7,"Bone014(mirrored)",13,[[13,"Bone015(mirrored)",-49,[0,"38jsOWX8ZdpIHC5AOCGKbT",1,0],[1,0.2010573446750641,2.9802322387695312e-8,-5.551115123125783e-17]]],[0,"c1FQKBaqtU7KYRIrw7NeBl",1,0],[1,0.18887874484062195,0,0],[3,-2.275690723943692e-8,2.2022930811673483e-8,0.4410652175648304,0.8974750547254714],[1,-0.000005652890952459239,0.00000559005570955545,52.34373194825134]],[2,"Bone016(mirrored)",2,[-50],[0,"95/p7p4oFRpIt4crB3mIjA",1,0],[1,0.27954018115997314,0.2558848261833191,-0.2174859642982483],[3,0.9393901733719481,-0.14503623404313548,0.2003408799980322,-0.2374323583432134],[1,-155.3430898201802,-19.310067797251843,-21.56928340438039]],[7,"Bone017(mirrored)",15,[[13,"Bone018(mirrored)",-51,[0,"11KRB0ogpe7aRo5n23EHnD",1,0],[1,0.19099202752113342,0,0]]],[0,"8aTpAeM6tXdZk+WXZE531k",1,0],[1,0.23108088970184326,-5.551115123125783e-17,0],[3,-3.4083893467090184e-7,2.8748138207404086e-7,0.5819174598720271,0.8132478526844622],[1,-0.00015781327175295686,0.00015343076232352513,71.17103973439794]],[2,"Bone019(mirrored)",2,[-52],[0,"21ecRibKJRKaOjKwVLSqoa",1,0],[1,0.29061952233314514,0.19227901101112366,-0.3986939787864685],[3,0.8948301465320776,-0.0004911862083369135,0.11360387240521894,-0.4317093093367666],[1,-129.07581714288625,-11.764480738789942,-5.679674754264215]],[7,"Bone020(mirrored)",17,[[13,"Bone021(mirrored)",-53,[0,"eclpiWCPBUwKVAZxxzdUCp",1,0],[1,0.1843697428703308,-8.940696716308594e-8,1.1920928955078125e-7]]],[0,"36vgRbGkxRQ4D2zmxpoZd/",1,0],[1,0.20108576118946075,0,1.1102230246251565e-16],[3,1.8222028332167757e-8,3.708922804737277e-7,0.6088728309173687,0.7932678461721058],[1,-0.00009368236535709727,0.000125483179650576,75.01609170287425]],[2,"Bone010",2,[-54],[0,"d1r46Z2ptfm7qjSRF4pmG/",1,0],[1,-0.32287177443504333,0.27896246314048767,0.06396494805812836],[3,-0.4636548740967591,-0.033916182694706205,-0.6611205911829108,0.5888916829024642],[1,-117.23186731080422,-79.28720073772936,-48.34893159407226]],[7,"Bone011",19,[[13,"Bone012",-55,[0,"f1c7sM3E9aQI1ZIkwisH6n",1,0],[1,0.16437874734401703,-2.9802322387695312e-8,1.1175870895385742e-8]]],[0,"a4iUC2n3FVe40tjinZr/qZ",1,0],[1,0.22188974916934967,-0.000002175569534301758,2.9802322387695312e-8],[3,-3.4693335221628275e-7,1.0625333281064668e-7,0.21640594577343028,0.9763034705632134],[1,-0.0000457318499374868,0.000022608113114104025,24.99604825512918]],[2,"Bone013",2,[-56],[0,"54WZBfTLda3r4JjSLqEAKJ",1,0],[1,-0.32505109906196594,0.3013463616371155,-0.02575673907995224],[3,0.3226320421806927,-0.036534908890218896,0.8973416620055634,-0.2989175595708492],[1,-171.16022201309102,-137.73632106283753,-34.05835823374595]],[7,"Bone014",21,[[13,"Bone015",-57,[0,"5a85rkcHpdTbtRq3ebf6sU",1,0],[1,0.20105747878551483,5.551115123125783e-17,5.551115123125783e-17]]],[0,"5dkcchaaJcQrlQmfk8JQlk",1,0],[1,0.18887880444526672,-5.551115123125783e-17,2.9802322387695312e-8],[3,-2.0559402187727817e-7,-9.320835742570089e-8,0.4427446166703082,0.8966477593845931],[1,-0.000026968341282961696,0.0000014043384581078506,52.55826007754641]],[2,"Bone016",2,[-58],[0,"c48vE/1AdazYeGSuTYlIWf",1,0],[1,-0.2742196321487427,0.2639105021953583,-0.21748584508895874],[3,0.19687901134286684,-0.24031021821211365,0.9413934801180164,-0.1314076463026089],[1,154.75881744357767,-160.89730543436482,-20.001008248738717]],[7,"Bone017",23,[[13,"Bone018",-59,[0,"48ZetFokBW3LFYkAvSQegZ",1,0],[1,0.19099211692810059,2.9802322387695312e-8,5.960464477539063e-8]]],[0,"b9w7FiBc1RXJlbG98PSWjr",1,0],[1,0.23108097910881042,2.9802322387695312e-8,-5.960464477539063e-8],[3,-6.761180810448942e-8,-3.2322467025878885e-7,0.5819171105169605,0.8132481026645452],[1,0.00004725925357446559,-0.00007936051366667534,71.17099050820993]],[2,"Bone019",2,[-60],[0,"34CfE6W5NdN6I+elIh5I2b",1,0],[1,-0.2873304784297943,0.20065522193908691,-0.39869385957717896],[3,0.10733594223413187,-0.43331001109392336,0.8947434015259902,0.012476987464751963],[1,128.73644872383267,-168.2642689574209,-4.053738514703862]],[7,"Bone020",25,[[13,"Bone021",-61,[0,"ddqYynTRdb57TXrEkRCCAb",1,0],[1,0.18436983227729797,-2.384185791015625e-7,-5.960464477539063e-8]]],[0,"76AI/l9I9fnb7/bVmpWVc4",1,0],[1,0.2010856419801712,1.1920928955078125e-7,-5.960464477539063e-8],[3,-5.5783883205052036e-8,-3.4336927040689735e-7,0.6088726608164237,0.7932679767330882],[1,0.0000730486341010386,-0.00010566988544893492,75.01606713094141]]],0,[0,3,1,0,1,1,0,-1,7,0,3,1,0,0,1,0,-3,2,0,3,1,0,0,1,0,3,1,0,0,1,0,3,1,0,0,1,0,3,1,0,0,1,0,3,1,0,0,1,0,3,1,0,0,1,0,3,1,0,0,1,0,3,1,0,0,1,0,-1,8,0,-2,11,0,-3,13,0,-4,15,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,-2,10,0,-1,6,0,-2,9,0,0,6,0,0,6,0,1,7,0,0,9,0,-1,12,0,0,12,0,-1,14,0,0,14,0,-1,16,0,0,16,0,-1,18,0,0,18,0,-1,20,0,0,20,0,-1,22,0,0,22,0,-1,24,0,0,24,0,-1,26,0,0,26,0,11,1,3,0,10,4,0,8,61],[0,0,0,0,0,0,0,0,0],[-1,2,5,-1,-2,-3,-4,-5,12],[164,165,166,60,167,168,169,170,60]],[[[18,"Skin-0",1579359083,["Dummy001/Bone003","Dummy001/Bone003/Dummy002/Bone028","Dummy001/Bone003/Dummy002/Bone016","Dummy001/Bone003/Dummy002/Bone033","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone026","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone020","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone010","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone029","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone022","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone024","Dummy001/Bone003/Dummy002/Bone033/Dummy003/Bone031","Dummy001/Bone001","Dummy001/Bone007","Dummy001/Bone005"],[[[7,0.3896540403366089,-99.99923706054688,-0.0007629336905665696,0,-0.000004371105660538888,0.0007629223982803524,-100,0,99.99923706054688,0.3896540403366089,-0.0000013983143389850738,0,-27.231626510620117,-0.4326244592666626,3.434023857116699,1],[7,-0.000011923724741791375,0.000016027455785661004,100,0,99.97566223144531,2.2063708305358887,0.000011567197361728176,0,-2.2063708305358887,99.97566223144531,-0.000016286634490825236,0,-30.769495010375977,-56.177223205566406,-0.12274127453565598,1],[7,0.0000020663369468820747,100,-0.00002930885966634378,0,-6.12323420998628e-15,-0.00002930885966634378,-100,0,-100,0.0000020663369468820747,-5.994965266396812e-13,0,97.35442352294922,-0.17981480062007904,44.680625915527344,1],[7,-0.28255167603492737,-99.99960327148438,-0.0010457674507051706,0,0.0000026274658466718392,0.0010457641910761595,-100,0,99.99960327148438,-0.28255167603492737,-3.2736872412897355e-7,0,-22.50804328918457,0.1366882175207138,-16.640302658081055,1],[7,99.99893188476562,0.4520193040370941,0.08968809247016907,0,0.0896860808134079,0.0006451118388213217,-99.99996948242188,0,-0.4520196318626404,99.99898529052734,0.00023970658367034048,0,41.022666931152344,-46.25910568237305,-26.85830307006836,1],[7,-0.3160663843154907,99.99949645996094,-0.0003468192007858306,0,-0.0007125235279090703,-0.0003490729723125696,-100,0,-99.99949645996094,-0.3160663843154907,0.0007136233034543693,0,31.27373695373535,-0.37561899423599243,-28.237764358520508,1],[7,-0.3160663843154907,99.99949645996094,-0.0003468192007858306,0,-0.0007125235279090703,-0.0003490729723125696,-100,0,-99.99949645996094,-0.3160663843154907,0.0007136233034543693,0,97.3543472290039,0.003037145594134927,-28.237756729125977,1],[7,-0.006277595181018114,0.3160041868686676,-99.99949645996094,0,-99.98222351074219,-1.8856701850891113,0.00031768312328495085,0,-1.88565993309021,99.9817123413086,0.3160663843154907,0,-27.403331756591797,-76.58941650390625,-20.994579315185547,1],[7,-0.3160663843154907,99.99949645996094,-0.0003468192007858306,0,-0.0007125235279090703,-0.0003490729723125696,-100,0,-99.99949645996094,-0.3160663843154907,0.0007136233034543693,0,61.734092712402344,0.0030399661045521498,-28.237756729125977,1],[7,99.99897766113281,0.45202645659446716,0.00031633759499527514,0,0.00031315424712374806,0.0007049352279864252,-100.00001525878906,0,-0.4520264267921448,99.99898529052734,0.0007035125163383782,0,-34.35817337036133,-48.129356384277344,-28.335268020629883,1],[7,-0.006277595181018114,0.3160041868686676,-99.99949645996094,0,-99.98222351074219,-1.8856701850891113,0.00031768312328495085,0,-1.88565993309021,99.9817123413086,0.3160663843154907,0,-27.403331756591797,-76.58941650390625,21.211355209350586,1],[7,-0.4926975965499878,-99.99879455566406,0.001820657984353602,0,0.000004371192517282907,-0.0018207017565146089,-100,0,99.99879455566406,-0.4926975965499878,0.000013341691555979196,0,-1.9847084283828735,0.07470256090164185,-0.00010452698916196823,1],[7,-1.4704965353012085,-99.98918914794922,0.00041388056706637144,0,0.000004371611794340424,-0.0004139896191190928,-100,0,99.98918914794922,-1.4704965353012085,0.000010458841643412597,0,-22.38300132751465,40.73467254638672,-38.3453369140625,1],[7,1.2429707050323486,-99.99227142333984,0.0003857678093481809,0,-0.000004370800525066443,-0.0003858519485220313,-100,0,99.99227142333984,1.2429707050323486,-0.000009166490599454846,0,-22.33258056640625,-41.43781661987305,-39.062625885009766,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",4135255520,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":122760,"length":32520,"count":8130,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":122760,"count":1705,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]},"minPosition",8,[1,-0.5016000270843506,-0.42947572469711304,-0.0010999999940395355],"maxPosition",8,[1,0.5007337331771851,0.5180000066757202,1.028550386428833]]],-1],0,0,[],[],[]],[[[18,"Skin-0",204703023,["Bone023/Bone022/Bone024/Bone005","Bone023/Bone022/Bone024/Bone005/Bone006","Bone023/Bone022/Bone024/Bone005/Bone006/Dummy001","Bone023/Bone022/Bone024/Bone002/Bone003/Dummy002","Bone023/Bone022/Bone024/Bone002/Bone003/Dummy006","Bone023/Bone022/Bone024/Bone002/Bone003/Dummy004","Bone023/Bone022/Bone024/Bone002/Bone003/Dummy005","Bone023/Bone022/Bone024/Bone002/Bone003/Dummy003","Bone023/Bone016(mirrored)/Bone017(mirrored)","Bone023/Bone016(mirrored)","Bone023/Bone022/Bone024/Bone002","Bone023/Bone022/Bone024/Bone002/Bone003","Bone023/Bone013(mirrored)/Bone014(mirrored)","Bone023/Bone013(mirrored)","Bone023/Bone010(mirrored)/Bone011(mirrored)","Bone023/Bone010(mirrored)","Bone023/Bone019(mirrored)/Bone020(mirrored)","Bone023/Bone019(mirrored)","Bone023/Bone016/Bone017","Bone023/Bone016","Bone023/Bone013/Bone014","Bone023/Bone013","Bone023/Bone010/Bone011","Bone023/Bone010","Bone023/Bone019/Bone020","Bone023/Bone019","Bone023/Bone022/Bone024/Bone005/Bone008"],[[[7,-2.476486145042145e-7,-6.855244691905682e-7,-1,0,-0.007603996433317661,0.9999710917472839,-6.836215220573649e-7,0,0.9999710917472839,0.007603996433317661,-2.5285419269494014e-7,0,-0.5173518061637878,0.3663748800754547,-1.1372426911293587e-7,1],[7,1.432226071074183e-7,-2.037626813944371e-7,-1,0,-0.009344865567982197,0.9999563097953796,-2.0509219211817253e-7,0,0.9999563097953796,0.009344865567982197,1.4131222769719898e-7,0,-0.7919960021972656,0.3649965822696686,-2.146721840290411e-7,1],[7,4.086421938609419e-7,-5.467837382866492e-8,-1,0,-0.9999998807907104,-2.2282661962325437e-14,-4.086422507043608e-7,0,6.123232939436859e-17,0.9999998807907104,-5.4678380934092274e-8,0,-0.3042612671852112,-1.1062560081481934,-0.1148187592625618,1],[7,7.32038358819409e-7,-4.377222140306003e-8,-1,0,-1,-3.1981714368814473e-14,-7.32038358819409e-7,0,6.123234262925839e-17,1,-4.377222140306003e-8,0,0.11991532891988754,-0.9966882467269897,-0.11186201870441437,1],[7,7.32038358819409e-7,-4.377222140306003e-8,-1,0,-1,-3.1981714368814473e-14,-7.32038358819409e-7,0,6.123234262925839e-17,1,-4.377222140306003e-8,0,0.23405106365680695,-0.9966881275177002,-0.23508897423744202,1],[7,7.32038358819409e-7,-4.377222140306003e-8,-1,0,-1,-3.1981714368814473e-14,-7.32038358819409e-7,0,6.123234262925839e-17,1,-4.377222140306003e-8,0,0.2790948748588562,-0.9966882467269897,0.07338272035121918,1],[7,7.32038358819409e-7,-4.377222140306003e-8,-1,0,-1,-3.1981714368814473e-14,-7.32038358819409e-7,0,6.123234262925839e-17,1,-4.377222140306003e-8,0,0.19596490263938904,-0.996688187122345,0.2901952564716339,1],[7,7.32038358819409e-7,-4.377222140306003e-8,-1,0,-1,-3.1981714368814473e-14,-7.32038358819409e-7,0,6.123234262925839e-17,1,-4.377222140306003e-8,0,0.03763984143733978,-0.9966881275177002,0.12121593952178955,1],[7,0.24891646206378937,-0.91621994972229,0.31397682428359985,0,0.4611769914627075,0.3971942365169525,0.7934435606002808,0,-0.8516784310340881,-0.05270225554704666,0.521407961845398,0,-0.021914780139923096,0.3372284471988678,-0.4574451446533203,1],[7,0.7835240364074707,-0.53619784116745,0.3139769434928894,0,0.09361304342746735,0.6014024019241333,0.7934427857398987,0,-0.6142688989639282,-0.5922890901565552,0.5214085578918457,0,-0.004237838089466095,0.24254529178142548,-0.4574451446533203,1],[7,-0.005918154492974281,-0.999982476234436,-0.000009358906936540734,0,-1.6291745907892619e-7,0.000009360034709970932,-1,0,0.999982476234436,-0.005918154492974281,-2.1830874175066128e-7,0,-0.24180588126182556,0.000004557392458082177,0.1737251579761505,1],[7,0.005682275164872408,-0.9999838471412659,3.17143701522582e-7,0,-2.714851063956303e-7,-3.1869151939645235e-7,-1,0,0.9999838471412659,0.005682275164872408,-2.732916186687362e-7,0,-0.5569970011711121,-0.006455295253545046,0.1737251877784729,1],[7,0.28192076086997986,-0.8637099266052246,0.41776272654533386,0,0.1317874789237976,0.466158002614975,0.8748305439949036,0,-0.9503434300422668,-0.1915770322084427,0.24524575471878052,0,0.11797525733709335,0.4024207592010498,-0.2616463303565979,1],[7,0.5062570571899414,-0.754439115524292,0.4177625775337219,0,5.885960945306579e-7,0.48442867398262024,0.8748307228088379,0,-0.8623828291893005,-0.4428889751434326,0.2452457994222641,0,0.19292739033699036,0.4193379878997803,-0.2616463303565979,1],[7,-0.44259113073349,-0.6379038691520691,0.6302316188812256,0,0.20939107239246368,0.6098678708076477,0.7643407583236694,0,-0.8719336986541748,0.4702553451061249,-0.13635073602199554,0,0.2976481020450592,0.15017707645893097,-0.10285408794879913,1],[7,-0.15162941813468933,-0.761457622051239,0.6302309632301331,0,-0.051067229360342026,0.6427868604660034,0.7643411755561829,0,-0.9871171712875366,0.08371249586343765,-0.13635092973709106,0,0.4350050091743469,0.25637543201446533,-0.10285375267267227,1],[7,0.49207714200019836,-0.8616751432418823,0.12400034070014954,0,0.6707732081413269,0.4660804271697998,0.5769163966178894,0,-0.5549086332321167,-0.2007112205028534,0.807336151599884,0,-0.40978652238845825,0.22469095885753632,-0.5210732817649841,1],[7,0.8497399091720581,-0.5124124884605408,0.1239996924996376,0,0.35841187834739685,0.7339679002761841,0.5769162774085999,0,-0.3866308629512787,-0.4457857608795166,0.8073362708091736,0,-0.26624536514282227,-0.0036146091297268867,-0.521073043346405,1],[7,-0.24891775846481323,0.9162192344665527,0.3139783442020416,0,0.4611766040325165,0.3971962630748749,-0.7934429049491882,0,-0.851678192615509,-0.052702564746141434,-0.5214082598686218,0,-0.0218697227537632,0.3370610773563385,0.45738840103149414,1],[7,-0.7835245132446289,0.5361973643302917,0.31397753953933716,0,0.09361213445663452,0.6014028191566467,-0.7934430837631226,0,-0.6142687797546387,-0.5922898650169373,-0.5214085578918457,0,-0.004095097538083792,0.24244780838489532,0.45738813281059265,1],[7,-0.28192099928855896,0.8637096881866455,0.4177635610103607,0,0.13178753852844238,0.46615883708000183,-0.8748303055763245,0,-0.9503440856933594,-0.19157689809799194,-0.24524596333503723,0,0.11792279779911041,0.40258172154426575,0.26172444224357605,1],[7,-0.506257176399231,0.7544386982917786,0.4177633821964264,0,2.533199676690856e-7,0.48442935943603516,-0.874830424785614,0,-0.8623831272125244,-0.44288885593414307,-0.24524591863155365,0,0.1928330659866333,0.41947853565216064,0.2617243826389313,1],[7,0.4425913095474243,0.6379034519195557,0.6302317976951599,0,0.20939211547374725,0.609867513179779,-0.7643405795097351,0,-0.8719334006309509,0.4702560603618622,0.1363501101732254,0,0.29750779271125793,0.1499745398759842,0.10265446454286575,1],[7,0.15162958204746246,0.761457085609436,0.6302313804626465,0,-0.05106610804796219,0.642786979675293,-0.7643409967422485,0,-0.9871174097061157,0.08371322602033615,0.13635016977787018,0,0.4349571168422699,0.25613370537757874,0.10265428572893143,1],[7,-0.4920778274536133,0.8616747856140137,0.12400022894144058,0,0.6707727909088135,0.46608084440231323,-0.5769166350364685,0,-0.5549085736274719,-0.20071184635162354,-0.8073360919952393,0,-0.4097917973995209,0.22470010817050934,0.5210747122764587,1],[7,-0.849740207195282,0.5124120116233826,0.12399952858686447,0,0.35841143131256104,0.7339679598808289,-0.576916515827179,0,-0.3866305649280548,-0.4457862675189972,-0.8073362112045288,0,-0.2662544846534729,-0.0036089797504246235,0.5210744142532349,1],[7,2.102535745507339e-7,-3.3714889013936045e-7,-1,0,0.02138567343354225,0.9997712969779968,-3.325753539229481e-7,0,0.9997712969779968,-0.02138567343354225,2.174156463752297e-7,0,-0.4775753617286682,0.5777754187583923,-2.1015011952840723e-7,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",375191116,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":438768,"length":94944,"count":23736,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":438768,"count":6094,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]]},"minPosition",8,[1,-0.573472261428833,-0.5870000123977661,0.007799999788403511],"maxPosition",8,[1,0.573472261428833,0.6386659145355225,1.1719000339508057]]],-1],0,0,[],[],[]],[[[29,"line_circle"],[83,"line_circle",[[25,-2,[4,"2bYyblJ8dMcK6wCzMnK3cX"],[0],[1],1]],[0,"32pL3TzbROT5a0KHXxUUbS",-1,0],[1,0,0.5,-3.406]]],0,[0,3,1,0,1,1,0,11,1,2],[0,0],[-1,2],[58,171]],[[[6,".bin",3861863180,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2064,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2064,"count":43,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.17319728434085846,-0.17319728434085846,-0.17319728434085846],"maxPosition",8,[1,0.17319728434085846,0.17319728434085846,0.17319728434085846]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":0.6,"metallic":0.1},"emissive",8,[4,4294967295],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[6,6,6,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[32,32,32,1]],[[[6,".bin",1252231338,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1824,"length":216,"count":54,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1824,"count":38,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.20285293459892273,-1.1825539303345067e-7,-0.7258464097976685],"maxPosition",8,[1,0.20285293459892273,0.07170525938272476,1.1920928955078125e-7]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[33,33,33,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[34,34,34,1]],[[[6,".bin",3262517898,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5.960464477539063e-8,-1.3271574797794027e-14,-8.146034247147327e-8],"maxPosition",8,[1,0.9999999403953552,0.6962890625,-6.818471121050607e-8]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"metallic":0,"SpecularIntensity":0},"emissive",8,[4,4294967295],"emissiveScale",8,[1,1.5,1.5,1.5],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[35,35,35,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[36,36,36,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[37,37,37,1]],[[[72,"builtin-unlit",[{"hash":1017648509,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nlayout(location = 0) out float v_fog_factor;\n#if USE_VERTEX_COLOR\n  layout(location = 13) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(matWorld * position);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(matWorld * position);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(matWorld * position);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(matWorld * position);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in float v_fog_factor;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  o = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, o.rgb, v_fog_factor), o.a);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nout float v_fog_factor;\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(matWorld * position);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(matWorld * position);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(matWorld * position);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(matWorld * position);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin float v_fog_factor;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  o = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, o.rgb, v_fog_factor), o.a);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvarying float v_fog_factor;\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(matWorld * position);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(matWorld * position);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(matWorld * position);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(matWorld * position);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_fogColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying float v_fog_factor;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  o = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, o.rgb, v_fog_factor), o.a);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":195,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}],"blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":2,"defines":["USE_TEXTURE"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[38,38,38,1]],[[[6,".bin",1771269473,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4704,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4704,"count":98,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.16358482837677,-0.32381537556648254,-0.4826933741569519],"maxPosition",8,[1,1.1635856628417969,0.32381537556648254,0]]],-1],0,0,[],[],[]],[[[6,".bin",674996171,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":60672,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":60672,"count":1264,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.46670985221862793,-0.12732821702957153,0.0003035217523574829],"maxPosition",8,[1,0.3830235004425049,0.12732815742492676,1.2571346759796143]]],-1],0,0,[],[],[]],[[[6,".bin",2629507108,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8160,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8160,"count":170,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.6658756732940674,-1.523382544517517,-9.189844263346458e-8],"maxPosition",8,[1,1.5663681030273438,1.5776606798171997,2.1526284217834473]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[39,39,39,1]],[[[6,".bin",2334874776,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15456,"length":3384,"count":846,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15456,"count":322,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.5063185691833496,-1.2073783874511719,-9.189844263346458e-8],"maxPosition",8,[1,1.6165891885757446,1.2728592157363892,2.5764687061309814]]],-1],0,0,[],[],[]],[[[6,".bin",3064207989,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20208,"length":4440,"count":1110,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20208,"count":421,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.0071702003479004,-3.247720241546631,-0.1254950910806656],"maxPosition",8,[1,3.7671892642974854,2.7696962356567383,3.4795775413513184]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"metallic":0,"SpecularIntensity":0},"mainColor",8,[4,4286611584],"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[40,40,40,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"mainColor",8,[4,4291109388],"emissive",8,[4,4289206791],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[4,4,4,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[41,41,41,1]],[[[6,".bin",1166414965,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18384,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18384,"count":383,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.248006820678711,3.4969110629390343e-7,0],"maxPosition",8,[1,-1.7484555314695172e-7,6.248005390167236,0.5]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[42,42,42,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":0.6,"metallic":0.1},"emissive",8,[4,4286479998],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[6,6,6,1]],[[[6,".bin",2258933743,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":408,"count":102,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-74.34725189208984,-154.3743896484375,-1.5],"maxPosition",8,[1,74.34725189208984,154.3743896484375,0]]],-1],0,0,[],[],[]],[[[96,[{}]]],0,0,[0],[4],[1]],[[[6,".bin",4257945883,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2112,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2112,"count":44,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.20346534252166748,-5.744183226852329e-7,-7.299881935119629],"maxPosition",8,[1,1.2697597742080688,0.7300930023193359,0]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[43,43,43,1]],[[[6,".bin",1261439180,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8064,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8064,"count":168,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.25,-5,0],"maxPosition",8,[1,1.25,0,0.5]]],-1],0,0,[],[],[]],[[[6,".bin",3389704200,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25648,"length":6288,"count":1572,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25648,"count":458,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.8143823742866516,-0.4802475869655609,-0.0868196189403534],"maxPosition",8,[1,0.8186560273170471,0.5187385678291321,0.6154072284698486]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"metallic":0,"SpecularIntensity":0},"mainColor",8,[4,4286611584],"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[44,44,44,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{"roughness":1,"metallic":0,"SpecularIntensity":0},"mainColor",8,[4,4286611584],"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[45,45,45,1]],[[[18,"Skin-0",2092169280,["Bone001","Bone001/Bone004","Bone001/Bone004/Bone005","Bone001/Bone004/Bone005/Bone006","Bone001/Bone004/Bone005/Bone006/Bone007","Bone001/Bone008","Bone001/Bone008/Bone009","Bone001/Bone015","Bone001/Bone015/Bone016","Bone001/Bone008/Bone009/Bone010","Bone001/Bone008/Bone009/Bone010/Bone011","Bone001/Bone008/Bone009/Bone010/Bone011/Bone012","Bone001/Bone008/Bone009/Bone010/Bone011/Bone012/Bone013","Bone001/Bone015/Bone016/Bone017","Bone001/Bone015/Bone016/Bone017/Bone018","Bone001/Bone015/Bone016/Bone017/Bone018/Bone019","Bone001/Bone030","Bone001/Bone030/Bone031","Bone001/Bone030/Bone031/Bone032","Bone001/Bone030/Bone031/Bone032/Bone033","Bone001/Bone020/Bone021","Bone001/Bone020/Bone021/Bone022","Bone001/Bone020/Bone021/Bone022/Bone025","Bone001/Bone020","Bone001/Bone020/Bone021/Bone022/Bone023","Bone001/Bone020/Bone021/Bone022/Bone025/Bone026","Bone001/Bone020/Bone021/Bone022/Bone025/Bone026/Bone027","Bone001/Bone020/Bone021/Bone022/Bone025/Bone026/Bone027/Bone028","Bone001/Bone002","Bone001/Bone036","Bone001/Bone038(mirrored)","Bone001/Bone004(mirrored)","Bone001/Bone004(mirrored)/Bone005(mirrored)","Bone001/Bone004(mirrored)/Bone005(mirrored)/Bone006(mirrored)","Bone001/Bone004(mirrored)/Bone005(mirrored)/Bone006(mirrored)/Bone007(mirrored)","Bone001/Bone008(mirrored)","Bone001/Bone008(mirrored)/Bone009(mirrored)","Bone001/Bone008(mirrored)/Bone009(mirrored)/Bone010(mirrored)","Bone001/Bone008(mirrored)/Bone009(mirrored)/Bone010(mirrored)/Bone011(mirrored)","Bone001/Bone008(mirrored)/Bone009(mirrored)/Bone010(mirrored)/Bone011(mirrored)/Bone012(mirrored)","Bone001/Bone008(mirrored)/Bone009(mirrored)/Bone010(mirrored)/Bone011(mirrored)/Bone012(mirrored)/Bone013(mirrored)","Bone001/Bone015(mirrored)","Bone001/Bone015(mirrored)/Bone016(mirrored)","Bone001/Bone015(mirrored)/Bone016(mirrored)/Bone017(mirrored)","Bone001/Bone015(mirrored)/Bone016(mirrored)/Bone017(mirrored)/Bone018(mirrored)","Bone001/Bone030(mirrored)","Bone001/Bone030(mirrored)/Bone031(mirrored)","Bone001/Bone030(mirrored)/Bone031(mirrored)/Bone032(mirrored)","Bone001/Bone030(mirrored)/Bone031(mirrored)/Bone032(mirrored)/Bone033(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)/Bone022(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)/Bone022(mirrored)/Bone025(mirrored)","Bone001/Bone020(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)/Bone022(mirrored)/Bone023(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)/Bone022(mirrored)/Bone025(mirrored)/Bone026(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)/Bone022(mirrored)/Bone025(mirrored)/Bone026(mirrored)/Bone027(mirrored)","Bone001/Bone020(mirrored)/Bone021(mirrored)/Bone022(mirrored)/Bone025(mirrored)/Bone026(mirrored)/Bone027(mirrored)/Bone028(mirrored)","Bone001/Bone038"],[[[7,-0.014283811673521996,-0.9998980164527893,-7.549019187536032e-8,0,6.297535776369543e-17,7.549790126404332e-8,-1,0,0.9998980164527893,-0.014283811673521996,-1.0783975934458567e-9,0,-0.3613671362400055,0.005431321449577808,-1.5994929825069448e-8,1],[7,0.14832697808742523,0.006549558136612177,-0.9889166355133057,0,-0.8622851967811584,-0.4887630045413971,-0.13257065415382385,0,-0.4842141270637512,0.8723921179771423,-0.06684914231300354,0,0.032288242131471634,-0.6536685228347778,0.07056499272584915,1],[7,0.4947108328342438,0.28348395228385925,-0.8215218186378479,0,-0.4928441345691681,-0.6870808601379395,-0.5338770151138306,0,-0.7157974243164062,0.668997049331665,-0.2001928985118866,0,0.06625378131866455,-0.676011860370636,-0.06992395222187042,1],[7,0.8014887571334839,0.2687564194202423,-0.5342146754264832,0,-0.3014717102050781,-0.5899115800857544,-0.7490787506103516,0,-0.5164591073989868,0.761428952217102,-0.391785204410553,0,-0.15482014417648315,-0.6495585441589355,-0.1840304732322693,1],[7,-0.06492394953966141,0.14355789124965668,-0.9875097274780273,0,-0.7412460446357727,-0.6694725751876831,-0.04859032854437828,0,-0.6680864691734314,0.7288331389427185,0.1498764455318451,0,-0.28492972254753113,-0.6462644338607788,0.29419127106666565,1],[7,0.9002558588981628,-0.11751991510391235,0.41919955611228943,0,-0.41895565390586853,0.027977146208286285,0.9075756072998047,0,-0.11838620156049728,-0.992676317691803,-0.024049049243330956,0,-0.15423670411109924,0.6049685478210449,0.14494098722934723,1],[7,0.559571385383606,-0.77946937084198,0.28161555528640747,0,0.006987570784986019,0.3442194163799286,0.9388632774353027,0,-0.8287526369094849,-0.5233931541442871,0.1980619579553604,0,0.2610384523868561,0.6826426386833191,0.08085183799266815,1],[7,0.9491556286811829,0.3039857745170593,-0.0818307027220726,0,-0.08589549362659454,-2.643341758812312e-7,-0.9963041543960571,0,-0.3028623163700104,0.95267653465271,0.026110757142305374,0,-0.0027558626607060432,-0.5356050729751587,-0.03890843316912651,1],[7,0.9863194227218628,0.15739038586616516,0.049010470509529114,0,0.041477277874946594,0.050797924399375916,-0.997847318649292,0,-0.15954118967056274,0.9862290024757385,0.04357486590743065,0,-0.25262385606765747,-0.4994492530822754,-0.09042613208293915,1],[7,0.18709473311901093,-0.9425868988037109,0.2766321301460266,0,0.13592931628227234,0.3037368357181549,0.943009614944458,0,-0.9728919267654419,-0.13882970809936523,0.1849527806043625,0,0.3478841483592987,0.5909010767936707,0.08976536989212036,1],[7,0.40769055485725403,-0.898989737033844,-0.16001743078231812,0,0.5350803136825562,0.09320414811372757,0.8396438956260681,0,-0.739916980266571,-0.4279370605945587,0.5190303325653076,0,0.14391078054904938,0.5823749899864197,0.19009798765182495,1],[7,0.6284645199775696,-0.20067892968654633,-0.7515052556991577,0,0.7777329683303833,0.1780163049697876,0.6028611063957214,0,0.012798666954040527,-0.9633472561836243,0.2679515480995178,0,-0.17782433331012726,0.3007444739341736,0.5032975673675537,1],[7,0.6578402519226074,0.08851660043001175,0.7479378581047058,0,0.7184799909591675,-0.37161895632743835,-0.587950587272644,0,0.22590452432632446,0.9241558909416199,-0.308063268661499,0,-0.34930458664894104,-0.25045353174209595,-0.49275797605514526,1],[7,0.6474459171295166,-0.15338987112045288,0.7465153932571411,0,0.6406574845314026,-0.4209747612476349,-0.6421356797218323,0,0.41276127099990845,0.8940089344978333,-0.17428797483444214,0,-0.48496291041374207,-0.3193061947822571,-0.34665706753730774,1],[7,-0.06693065166473389,-0.11448130756616592,0.991168200969696,0,0.8375334143638611,-0.54634690284729,-0.00654766708612442,0,0.5422711968421936,0.8296982645988464,0.13244926929473877,0,-0.3211858868598938,-0.29941612482070923,-0.7345478534698486,1],[7,-0.03980523720383644,-0.9970037341117859,-0.06632589548826218,0,0.8574414849281311,-5.826979077028227e-7,-0.514581561088562,0,0.5130397081375122,-0.07735360413789749,0.8548724055290222,0,-0.49256789684295654,0.7063600420951843,-0.35423988103866577,1],[7,0.6316393613815308,-0.5028551816940308,-0.5900578498840332,0,0.6438916325569153,-0.08362474292516708,0.7605329751968384,0,-0.4317813813686371,-0.8603159189224243,0.270963579416275,0,0.0036046348977833986,0.5830018520355225,-0.16128882765769958,1],[7,0.18910056352615356,-0.7707608938217163,-0.6084148287773132,0,0.537199079990387,-0.43745288252830505,0.7211463451385498,0,-0.8219841718673706,-0.4632091522216797,0.33132943511009216,0,0.07709622383117676,0.6476035118103027,-0.1652577519416809,1],[7,-0.6633349657058716,-0.5883514285087585,-0.4624163508415222,0,0.20845647156238556,-0.7387582659721375,0.6409226059913635,0,-0.7187016010284424,0.328752726316452,0.6126901507377625,0,0.3485228717327118,0.5324312448501587,-0.25381502509117126,1],[7,-0.6380624771118164,-0.3990047872066498,-0.6585373878479004,0,-0.1766664832830429,-0.7565810084342957,0.6295824646949768,0,-0.7494434118270874,0.5180544257164001,0.41225507855415344,0,0.28239595890045166,0.4877720773220062,-0.19131939113140106,1],[7,0.6599241495132446,-0.26196983456611633,0.7041817903518677,0,0.14830201864242554,-0.873386800289154,-0.4638987183570862,0,0.7365506291389465,0.41056954860687256,-0.5375182628631592,0,-0.7051859498023987,0.019541041925549507,0.08188631385564804,1],[7,0.3883158564567566,0.19573281705379486,0.9004994630813599,0,0.2805968225002289,-0.9558951258659363,0.08677390962839127,0,0.8777676224708557,0.21898162364959717,-0.42611128091812134,0,-0.9766141176223755,-0.0945494994521141,-0.237136572599411,1],[7,-0.3344803750514984,-0.3837810754776001,-0.8607175946235657,0,0.2216276228427887,0.8556734323501587,-0.4676578938961029,0,0.915971577167511,-0.34718120098114014,-0.20114950835704803,0,-0.6130313277244568,0.3173335790634155,0.7835491895675659,1],[7,0.7689422369003296,0.08119052648544312,0.6341419816017151,0,0.4858090281486511,-0.7189977765083313,-0.4970230460166931,0,0.41559314727783203,0.6902539134025574,-0.5923107266426086,0,-0.3631526529788971,-0.3021060526371002,0.14651986956596375,1],[7,-0.529350996017456,0.5223897099494934,0.6685030460357666,0,0.7488229870796204,-0.08271466195583344,0.6575881242752075,0,0.3988122344017029,0.8486854434013367,-0.3473924398422241,0,-0.2320651113986969,-1.2039283514022827,-0.3095077574253082,1],[7,-0.3658144772052765,-0.4068043529987335,-0.8370721936225891,0,0.2933776378631592,0.8031530976295471,-0.518531084060669,0,0.8832380175590515,-0.4352644383907318,-0.17445774376392365,0,-0.8251838684082031,0.4366012513637543,0.7579004168510437,1],[7,-0.7893821597099304,0.04703346639871597,-0.6120972633361816,0,0.6098417639732361,-0.05439779534935951,-0.7906537652015686,0,-0.07048391550779343,-0.9974109530448914,0.01425767969340086,0,0.22069142758846283,1.2261854410171509,0.5212445855140686,1],[7,-0.7618342041969299,0.21200186014175415,-0.6120972037315369,0,0.5847607254981995,-0.18144109845161438,-0.7906537652015686,0,-0.27867963910102844,-0.9602779150009155,0.014257680624723434,0,0.25982484221458435,1.1983425617218018,0.5212445855140686,1],[7,0.002958606230095029,-0.9999957084655762,1.2546824690318203e-10,0,-1.3017389388636502e-9,-1.2932016568711902e-10,-1,0,0.9999957084655762,0.002958606230095029,-1.3021156375359055e-9,0,-0.7596721649169922,-0.007668100297451019,-2.061615056447863e-8,1],[7,-2.564629539847374e-7,-2.0050289606388105e-7,-1.0000001192092896,0,-0.8804711699485779,-0.47409960627555847,3.208666612408706e-7,0,-0.47409966588020325,0.8804710507392883,-5.4948049665881626e-8,0,0.01044440921396017,-0.797648549079895,1.4339887854930566e-7,1],[7,-0.40482425689697266,-1.2374096058920259e-7,-0.9143944382667542,0,-0.9101253747940063,0.09651727974414825,0.4029342830181122,0,0.08825479447841644,0.9953315258026123,-0.03907264396548271,0,-0.3564032018184662,-0.5934823751449585,0.23040957748889923,1],[7,-0.14832691848278046,-0.006549202837049961,-0.9889166951179504,0,-0.8622855544090271,-0.4887627959251404,0.13257044553756714,0,-0.4842138886451721,0.8723923563957214,0.06684937328100204,0,0.032328829169273376,-0.6536668539047241,-0.07029327005147934,1],[7,-0.49471092224121094,-0.28348395228385925,-0.8215218186378479,0,-0.4928446412086487,-0.6870805025100708,0.5338771343231201,0,-0.7157973647117615,0.6689974069595337,0.20019258558750153,0,0.06638959795236588,-0.6759340167045593,0.0701499879360199,1],[7,-0.8014890551567078,-0.2687565088272095,-0.5342146158218384,0,-0.3014719486236572,-0.5899114608764648,0.7490788698196411,0,-0.5164591073989868,0.7614293694496155,0.3917849361896515,0,-0.1545998752117157,-0.6494848728179932,0.1841774731874466,1],[7,0.06492404639720917,-0.1435575783252716,-0.987510085105896,0,-0.7412457466125488,-0.6694723963737488,0.048590037971735,0,-0.668086051940918,0.7288331389427185,-0.14987637102603912,0,-0.2849474251270294,-0.6462249159812927,-0.29392004013061523,1],[7,-0.9002560973167419,0.11752002686262131,0.4191994071006775,0,-0.41895556449890137,0.02797720767557621,-0.9075757265090942,0,-0.11838636547327042,-0.9926761984825134,0.024049019441008568,0,-0.1540663093328476,0.6049462556838989,-0.14502032101154327,1],[7,-0.5595715045928955,0.77946937084198,0.2816154956817627,0,0.006987587548792362,0.3442194163799286,-0.9388632774353027,0,-0.8287526965141296,-0.5233932733535767,-0.1980619877576828,0,0.26114422082901,0.6824951171875,-0.08090517669916153,1],[7,-0.1870948076248169,0.9425871968269348,0.2766319513320923,0,0.13592980802059174,0.3037368357181549,-0.9430094957351685,0,-0.9728919267654419,-0.13882967829704285,-0.1849532425403595,0,0.3479195237159729,0.5907227993011475,-0.08981753140687943,1],[7,-0.4076903164386749,0.898989737033844,-0.16001799702644348,0,0.5350807905197144,0.0932035818696022,-0.8396438360214233,0,-0.7399171590805054,-0.4279370605945587,-0.5190304517745972,0,0.14398814737796783,0.5822045803070068,-0.19006772339344025,1],[7,-0.6284645199775696,0.20067864656448364,-0.7515053749084473,0,0.7777330279350281,0.17801648378372192,-0.6028611063957214,0,0.012798996642231941,-0.963347315788269,-0.26795142889022827,0,-0.17770546674728394,0.3007063865661621,-0.5031552314758301,1],[7,-0.6578398942947388,-0.08851635456085205,0.7479381561279297,0,0.7184799313545227,-0.37161898612976074,0.5879504680633545,0,0.22590479254722595,0.924155592918396,0.30806317925453186,0,-0.34918010234832764,-0.2504364252090454,0.4926164150238037,1],[7,-0.9491559267044067,-0.30398550629615784,-0.08183053880929947,0,-0.0858953595161438,-1.4399221015537478e-7,0.9963042736053467,0,-0.30286210775375366,0.9526766538619995,-0.026110803708434105,0,-0.002520470879971981,-0.5355297327041626,0.0389288030564785,1],[7,-0.9863196015357971,-0.1573900729417801,0.0490105114877224,0,0.04147733747959137,0.050797898322343826,0.9978474974632263,0,-0.15954089164733887,0.9862291216850281,-0.043574851006269455,0,-0.25237923860549927,-0.4994103014469147,0.09041396528482437,1],[7,-0.6474457383155823,0.153390035033226,0.7465155124664307,0,0.6406572461128235,-0.4209749698638916,0.642135739326477,0,0.41276150941848755,0.8940087556838989,0.1742880493402481,0,-0.4848023056983948,-0.31934425234794617,0.3464718163013458,1],[7,0.06693081557750702,0.11448132991790771,0.9911681413650513,0,0.8375334739685059,-0.5463468432426453,0.006547552067786455,0,0.5422711968421936,0.8296982049942017,-0.13244938850402832,0,-0.32120248675346375,-0.29944467544555664,0.7343018054962158,1],[7,-0.6316391825675964,0.5028555989265442,-0.590057909488678,0,0.6438918709754944,-0.08362487703561783,-0.7605329155921936,0,-0.4317817687988281,-0.8603157997131348,-0.2709638178348541,0,0.003427306190133095,0.5831432342529297,0.1611231416463852,1],[7,-0.1891002655029297,0.7707610130310059,-0.6084152460098267,0,0.5371991991996765,-0.43745332956314087,-0.721146285533905,0,-0.8219842910766602,-0.4632091820240021,-0.3313295543193817,0,0.07704319804906845,0.6478202939033508,0.1650867909193039,1],[7,0.6633356809616089,0.5883514285087585,-0.4624161720275879,0,0.20845647156238556,-0.7387585043907166,-0.6409226655960083,0,-0.7187018990516663,0.32875317335128784,-0.6126902103424072,0,0.34870949387550354,0.5325966477394104,0.2536853849887848,1],[7,0.638062596321106,0.39900439977645874,-0.6585376262664795,0,-0.1766664683818817,-0.7565810680389404,-0.6295822858810425,0,-0.749443531036377,0.5180540680885315,-0.4122554063796997,0,0.2825752794742584,0.48788416385650635,0.19113442301750183,1],[7,-0.659924328327179,0.2619701325893402,0.7041817903518677,0,0.14830203354358673,-0.873386800289154,0.46389925479888916,0,0.7365505695343018,0.4105699062347412,0.5375183820724487,0,-0.7052803039550781,0.01957843080163002,-0.08178571611642838,1],[7,-0.38831621408462524,-0.19573310017585754,0.9004995822906494,0,0.28059715032577515,-0.9558954238891602,-0.08677395433187485,0,0.8777676820755005,0.21898186206817627,0.42611175775527954,0,-0.9766699075698853,-0.09457780420780182,0.2372651845216751,1],[7,0.33448007702827454,0.383780837059021,-0.8607178926467896,0,0.22162754833698273,0.8556739091873169,0.4676574468612671,0,0.9159719347953796,-0.34718090295791626,0.20114941895008087,0,-0.6129838228225708,0.3173879086971283,-0.7836723923683167,1],[7,-0.7689422965049744,-0.08119076490402222,0.6341419219970703,0,0.4858090877532959,-0.7189978361129761,0.4970230162143707,0,0.4155929684638977,0.6902539134025574,0.5923109650611877,0,-0.36326247453689575,-0.3021177053451538,-0.1464293748140335,1],[7,0.5293510556221008,-0.5223901271820068,0.6685029864311218,0,0.7488232851028442,-0.08271415531635284,-0.6575879454612732,0,0.3988119065761566,0.8486858606338501,0.3473929464817047,0,-0.2319890558719635,-1.2040038108825684,0.3096030056476593,1],[7,0.36581405997276306,0.4068041145801544,-0.8370724320411682,0,0.29337790608406067,0.8031533360481262,0.5185306668281555,0,0.8832380175590515,-0.4352644681930542,0.17445743083953857,0,-0.8251318335533142,0.4366590976715088,-0.7580199241638184,1],[7,0.7893823981285095,-0.047033630311489105,-0.6120976209640503,0,0.6098421812057495,-0.05439770594239235,0.7906539440155029,0,-0.07048399746417999,-0.9974112510681152,-0.01425749622285366,0,0.22080451250076294,1.2261788845062256,-0.5213328003883362,1],[7,0.7618345618247986,-0.21200188994407654,-0.6120973229408264,0,0.5847609043121338,-0.18144121766090393,0.7906540036201477,0,-0.27867963910102844,-0.9602786302566528,-0.01425777655094862,0,0.2599338889122009,1.1983129978179932,-0.521332323551178,1],[7,0.40029290318489075,0.060401249676942825,-0.9143944978713989,0,-0.9143387675285339,-0.04035651683807373,-0.4029342830181122,0,-0.06123949959874153,0.9973582029342651,0.03907276690006256,0,-0.2637175917625427,-0.6497415900230408,-0.2297690063714981,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2326215406,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":53208,"length":7428,"count":3714,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":133788,"length":9900,"count":4950,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":235848,"length":12372,"count":6186,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":53208,"count":739,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":60636,"length":73152,"count":1016,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":143688,"length":92160,"count":1280,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],[0,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],[0,1,2,5,6,7,8,20,21,22,23,24,25,26,27,28,29,49,50,51,52,53,54,55,56,57]]},"minPosition",8,[1,-0.7509122490882874,-0.7543689608573914,-0.25323399901390076],"maxPosition",8,[1,0.7509124279022217,0.642020046710968,1.2664097547531128]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[46,46,46,1]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true},{},{},{}],[[[{},"emissive",8,[4,4286611584],"mainTexture",6,0,"occlusionMap",6,1,"emissiveMap",6,2],{},{},{}],11,0,0,0]]],0,0,[0,0,0,0],[6,7,8,4],[47,47,47,1]],[[[6,".bin",1489447823,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23952,"length":3252,"count":813,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23952,"count":499,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42760246992111206,-0.38065895438194275,-0.49097856879234314],"maxPosition",8,[1,0.4865637421607971,0.5875678658485413,0.47186005115509033]]],-1],0,0,[],[],[]],[[[29,"boss4"],[54,"boss4",[-3,-4],[[40,-2,[4,"bcwWRp2IhcGq+2MvB4Ys0y"],[3,4,5,6],7]],[0,"74ibesSy1V17EKlBAOSjFI",-1,0],[1,0,0,0.774]],[34,"Bone010",[[[13,"Bone011",-5,[0,"f5kcJLnvFVK6lXnncXJWqc",1,0],[1,0.4025729298591614,-1.6763806343078613e-8,3.3527612686157227e-8]],-6,-7,[5,"Dummy001",-8,[0,"5an0EUkbhXV6JUmaVXCnph",1,0],[1,0.27159589529037476,0.00002199411392211914,0.3939385712146759],[3,0.511616053067309,0.48810765325641164,0.5116144437418941,-0.48810920297718147],[1,-92.6939313212576,-89.99981896972287,-8.405838669042365e-7]]],4,1,1,4],[0,"65QyNXbI9SQ4Vhu0wCuhEN",1,0],[1,0.11379295587539673,-0.005901481956243515,-3.469446951953614e-18],[3,0.0000019195947821657463,2.6174153039866915e-8,-0.00965337470644669,0.999953405091003],[1,0.00022002907104025184,0.000005123598805694516,-1.1062124388096708]],[34,"Bone003",[[-9,[5,"Bone020(mirrored)",-10,[0,"d26MCWJJtX87zQL4osUgzD",1,0],[1,0.3724508285522461,-0.013207554817199707,0.2717011570930481],[3,-0.025747694142166523,-0.7066379207895404,0.018381519290995157,0.7068677563003929],[1,-0.5983281585545625,-89.96268867936571,3.5761572467822726]],[5,"Bone020",-11,[0,"9e0kw7VPVUjolTXPt9xU2B",1,0],[1,-0.37400195002555847,-0.005427718162536621,0.2717011570930481],[3,-0.025747694143048082,-0.7066379208137346,0.018381517428979356,0.7068677563245949],[1,-0.5983283096267489,-89.96268867543826,3.5761570958568454]]],1,4,4],[0,"f4SrjM28JZfbKn56O847Vy",1,0],[1,-0.009697468020021915,0.06641869246959686,-1.585041786711372e-8],[3,-1.9919274387752073e-12,1.236644886707422e-9,0.0015877664415070833,0.9999987394980692],[1,-4.5326096700549226e-10,1.4170996382777392e-7,0.18194470834894746]],[33,"Bone007",[-12,-13,-14],[0,"45/R+BxnxbxayEv92j3EoC",1,0],[1,0.1710718274116516,7.450580596923828e-9,7.566995918750763e-10],[3,0.000022400978349314494,-0.006445926658237604,0.01408931995143698,0.9998799630910796],[1,0.012978866601105005,-0.7389101030696673,1.6145204476359685]],[34,"Bone019",[[[5,"Bone005",-15,[0,"aeBq379lZXnL4p2rDpcJk6",1,0],[1,0.001921122893691063,-0.12917473912239075,-9.248157795127554e-12],[3,1.2935680687716067e-8,-1.2494628169535856e-8,-0.6952920999942914,0.7187272749002418],[1,0.0000021087437265686766,4.788176795038882e-8,-88.10099675042913]],-16],4,1],[0,"69okd2I8BaroEaNdT6zBh5",1,0],[1,0.005372089799493551,0.23657523095607758,5.724587470723463e-16],[3,3.0436497111620387e-12,-7.904678057342027e-14,-0.02596229653661503,0.9996629227687425],[1,3.488941698142968e-10,7.473271206529455e-20,-2.975394356107343]],[46,"Bone021",5,[[3,[5,"Bone004",-17,[0,"82V4KLbr5Vt7sMKN0Qo+tb",1,0],[1,-0.01162020955234766,0.057923510670661926,-1.3822059941048792e-8],[3,-8.467874542937305e-8,-1.4588813649970686e-7,-0.7089691131656608,0.7052395313487949],[1,-179.99645543154597,-179.99646039126645,-89.69779734652727]]],1,4],[0,"10+AErqatTW5sz8X5Gc9gU",1,0],[1,0.01021602563560009,-0.033368319272994995,-8.881784197001252e-16],[3,1.191775404935427e-7,2.577149783459043e-9,0.02161940523322246,0.999766273344599],[1,0.000013659932856745707,-1.2360971718610455e-14,2.477594380517261]],[46,"Bone008",4,[[[13,"Bone009",-18,[0,"48teiYItZRJ5tzg2StO8mF",1,0],[1,0.14050394296646118,-1.862645149230957e-9,3.725290298461914e-9]],2],4,1],[0,"3fqqeigm5dnY4tdGsnx8Wt",1,0],[1,0.14913755655288696,-6.495974957942963e-8,9.313225746154785e-10],[3,0.00006199677045597442,-0.013019006150152146,0.023744540986025513,0.9996332819632535],[1,0.042573425773200425,-1.4933421866867838,2.7208561857847586]],[48,"boss4",1,[[41,-19,[4,"a7VObbAa1WTJnVfl5q1bIr"],[0],[1],1,1,2]],[0,"d0K3QPcVhTRZZL2h0MkeCV",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[2,"Bone002",1,[5],[0,"a6Zkv50VxaRo6n6l0sdwME",1,0],[1,0,0.00009883768507279456,0],[3,2.185685523261328e-8,4.0697705109272463e-10,0.007967285575644504,0.9999682606765855],[1,0.000002504478015153091,2.66830901111651e-8,0.912993334603791]],[2,"Bone006",3,[4],[0,"abVe4jKX5ebYBsMmLbBKoL",1,0],[1,-0.006569891236722469,-0.01926654577255249,0],[3,0.0012417583840897853,-0.0012116806222092218,0.6893156959727599,0.7244590127479782],[1,3.994695023218255,-3.992257111715006,87.14516469717917]],[2,"Bone012(mirrored)",2,[-20],[0,"7fanviER1cX7dnnsYEcxDf",1,0],[1,0.3728110194206238,0.41127097606658936,-0.0000010747462511062622],[3,0.05331828306008932,0.9985775686892424,-0.000001481587180455263,1.0182571675370595e-7],[1,0.00017113102149156752,179.99997917760172,6.112723765256378]],[2,"Bone013(mirrored)",11,[-21],[0,"4eaA//H4xa5b+yOfxviOR6",1,0],[1,0.28533440828323364,5.960464477539063e-8,1.862645149230957e-9],[3,-0.0002567572196587008,0.0005453015843438918,0.027411183005428722,0.999624061219094],[1,-0.031170833483872305,0.06336519868552408,3.1414670436977117]],[7,"Bone014(mirrored)",12,[[13,"Bone015(mirrored)",-22,[0,"6dGM1SnUNfgq/EA7WUhAD3",1,0],[1,0.20838309824466705,-5.960464477539063e-8,-2.9802322387695312e-8]]],[0,"01R2bCVDZWCqeirw1ayn7k",1,0],[1,0.20884042978286743,-1.1102230246251565e-16,6.146728992462158e-8],[3,-0.0012694731174643726,-0.013200709651140124,0.05617389851313282,0.9983329218394766],[1,-0.06063756085385309,-1.5117152259031132,6.441806737785028]],[2,"Bone012",2,[-23],[0,"0cGRgdNF5cL4rIJRV9nUcH",1,0],[1,0.35799163579940796,-0.41454002261161804,0.0000013113021850585938],[3,-1.3584494091586622e-8,0.000001594010616696473,0.9993734715478215,-0.035392998797987456],[1,-179.99981705102797,-179.99999507847212,-4.056586135136754]],[2,"Bone013",14,[-24],[0,"3boVAeXe1Wo4cprQI7/5OR",1,0],[1,0.28533434867858887,-1.1102230246251565e-16,-3.725290298461914e-9],[3,0.0001564776598779001,0.0010197447758165433,0.028662973768801635,0.9995886001601174],[1,0.014598242165316359,0.11648359354065813,3.285001324164562]],[7,"Bone014",15,[[13,"Bone015",-25,[0,"8a1DVF7B9YJ6g6fZL8dwj+",1,0],[1,0.20838306844234467,0,7.450580596923828e-9]]],[0,"2bDhJr1lxff5dgtc86dFzT",1,0],[1,0.20884037017822266,1.1102230246251565e-16,-1.862645149230957e-9],[3,0.0012323305503435017,0.01698388689698162,0.05831967196797077,0.998152716175653],[1,0.027639578497832214,1.948008768680219,6.6881737642733095]],[2,"Bone016(mirrored)",4,[-26],[0,"05CekGEL9X86zXLMemQQaB",1,0],[1,0.11329281330108643,0.12982387840747833,0.315185546875],[3,0.8525759600312263,0.5203033699452617,-0.02502231679027672,0.04210129763896128],[1,167.8664339675023,10.708090356712729,62.26251828507557]],[7,"Bone017(mirrored)",17,[[13,"Bone018(mirrored)",-27,[0,"23PbSDFclVFL3pBkg1V4mL",1,0],[1,0.19735056161880493,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[0,"dccTz0cNZcVKdf7N4eICvv",1,0],[1,0.1995428502559662,8.940696716308594e-8,2.9802322387695312e-8],[3,9.421623401655015e-9,9.297313062907363e-9,0.09289369653528642,0.9956760322233383],[1,9.931419607599724e-7,9.773630570784917e-7,10.66020273441067]],[2,"Bone016",4,[-28],[0,"ddOw7wmfBeKZIVoVVNJcKD",1,0],[1,0.11625868082046509,-0.12376422435045242,0.315185546875],[3,0.04180598223852194,0.02551293165410733,-0.5102966384934522,0.8586027550094212],[1,11.62089067901133,10.257052022019376,-60.94465699476237]],[7,"Bone017",19,[[13,"Bone018",-29,[0,"8c1jHH7VVZ9IEwbiAKhPo4",1,0],[1,0.19735056161880493,-2.9802322387695312e-8,2.9802322387695312e-8]]],[0,"3e/AMDA9NZqIyjfpSMc9Dr",1,0],[1,0.1995428204536438,2.9802322387695312e-8,-2.9802322387695312e-8],[3,-1.174658376079108e-9,-2.4480093622610715e-9,0.09289355619581746,0.9956760453165953],[1,-1.0986132546133325e-7,-2.71489709321772e-7,10.66018658285341]]],0,[0,3,1,0,1,1,0,-1,8,0,-2,9,0,0,2,0,-2,11,0,-3,14,0,0,2,0,-1,10,0,0,3,0,0,3,0,-1,7,0,-2,17,0,-3,19,0,0,5,0,-2,6,0,0,6,0,0,7,0,1,8,0,-1,12,0,-1,13,0,0,13,0,-1,15,0,-1,16,0,0,16,0,-1,18,0,0,18,0,-1,20,0,0,20,0,11,1,2,0,7,3,0,6,4,0,10,5,0,9,29],[0,0,0,0,0,0,0,0],[-1,2,5,-1,-2,-3,-4,12],[172,173,174,61,175,176,177,61]],[[[100,"levelScene"],[62,"rw",[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[[70,false,-2,[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],[[74,"Bip001/wq",-1]],100]],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[62,"rw",[-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32],[[70,false,-18,[153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],[[74,"Bip001/wq",-17]],168]],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[84,"cj_all","acCxzGC1JETbj5vemli6dZ",[-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47],[1,-37.162,0,0]],[92,"rw",[[-49,-50,-51,-52,[20,"Dummy001",-53,[1,-1.1903839111328125,30,0.0000013113416343912832]],-54],1,1,1,1,4,1],[[95,-48,[182,183,184,185]]],[1,0.015,0.015,0.015]],[85,"mapItem",512,"a2Bd+FXlpN2KIqOVcUrzQH",[-55,-56,-57,-58,-59,-60,-61,-62,-63],[1,-92,0,0]],[36,"Bip001 Spine",[-64,-65,-66,-67,-68,-69,-70,-71],[1,0.060548603534698486,-0.00010151811147807166,8.410955842919066e-8],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[36,"Bip001 Spine",[-72,-73,-74,-75,-76,-77,-78,-79],[1,0.060548603534698486,-0.00010151811147807166,8.410955842919066e-8],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[3,"wq Socket",1,[-80,-81,-82,-83,-84],[1,-0.45527079215810984,0.49088358879089355,0.14228318992701297],[3,-6.689260759230734e-7,4.901121462273353e-7,-0.7071067811862235,0.7071067811863853],[1,0,0.00010840411088216077,-90]],[3,"wq Socket",2,[-85,-86,-87,-88,-89],[1,-0.45527079215810984,0.49088358879089355,0.14228318992701297],[3,-6.689260759230734e-7,4.901121462273353e-7,-0.7071067811862235,0.7071067811863853],[1,0,0.00010840411088216077,-90]],[35,"Bip001 Head",[[[20,"Bip001 HeadNub",-90,[1,0.6582919359207153,0,-2.117582368135751e-22]],-91,-92,-93,-94],4,1,1,1,1],[1,0.1118459701538086,6.938893903907228e-18,-1.7763566276420137e-15],[3,-4.654694850298449e-10,-7.488227101702271e-8,0.027002196106342854,0.9996353742267372],[1,1.7864358082929034e-7,-0.000008588831657647684,3.0945998817247413]],[35,"Bip001 Head",[[[20,"Bip001 HeadNub",-95,[1,0.6582919359207153,0,-2.117582368135751e-22]],-96,-97,-98,-99],4,1,1,1,1],[1,0.1118459701538086,6.938893903907228e-18,-1.7763566276420137e-15],[3,-4.654694850298449e-10,-7.488227101702271e-8,0.027002196106342854,0.9996353742267372],[1,1.7864358082929034e-7,-0.000008588831657647684,3.0945998817247413]],[35,"Bone005",[[-100,[12,"Bone019(mirrored)",-101,[1,4.760616302490234,9.058272361755371,31.149959564208984],[3,0.4808378277492308,0.8768095479666006,7.006887243733135e-8,4.267409588226241e-8],[1,-0.000008721939659527927,179.9999992059249,57.48027234003616]],[12,"Bone018(mirrored)",-102,[1,6.5336456298828125,9.267549514770508,31.16307830810547],[3,0.8653444300811386,0.5011108661879645,0.007078981230758757,-0.004099407351289525],[1,-178.3670687817308,-1.882799235089111,60.13590422948103]],[12,"Bone019",-103,[1,5.1049652099609375,-9.306666374206543,31.149959564208984],[3,-5.033540212190928e-8,-2.4550489883795225e-8,0.867641159523958,-0.4971909274111086],[1,179.9999895002075,179.9999873353014,-59.62865324568081]],[12,"Bone018",-104,[1,6.884586334228516,-9.449081420898438,31.16307830810547],[3,-0.0039657219305636645,-0.0071544633233520715,-0.4848003684563842,0.8745865820195726],[1,-1.4997446593466879,-1.768543898008821,-57.98864394343517]]],1,4,4,4,4],[1,25.13408851623535,9.5367431640625e-7,-0.0000017881393432617188],[3,0.00011612486099554937,-0.0032700701437965076,-0.0014150906679861884,0.9999936453171454],[1,0.012776629382471039,-0.3747053966003796,-0.16220014658872872]],[86,"mapNode",512,"5fQI1HjZJMfKRT+j52voUa",[-106,-107,-108,-109],[[101,2,2,-105]]],[102,"levelScene",[3,-110,5,13],[103,[104,25000,[4,20163786],[4,4286135380]],[105,true,1316.9,0.61,[4,4278190080]],[106],[107,2,true,0.15,60,[4,4279510077]]]],[87,"cameraLight","a7a+2Tlm1Dmp66BxLd4s3z",14,[-111,-112,-113,-114]],[36,"Bip001 L Hand",[-115,-116,-117,-118],[1,0.15429332852363586,-7.450580596923828e-9,1.1102230246251565e-16],[3,-0.7068252124052276,-5.266258212962952e-9,5.270453523821367e-9,0.7073882378922517],[1,-89.95437890588065,3.596954062703228e-14,8.537736822497861e-7]],[36,"Bip001 R Hand",[-119,-120,-121,-122],[1,0.15429335832595825,2.7755575615628914e-17,-5.960464477539063e-8],[3,0.7068252124052276,-5.274648390590563e-9,1.5802969949747272e-8,0.7073882378922517],[1,89.95437890588067,-0.0000017075473644709213,8.537736462802456e-7]],[36,"Bip001 L Hand",[-123,-124,-125,-126],[1,0.15429332852363586,-7.450580596923828e-9,1.1102230246251565e-16],[3,-0.7068252124052276,-5.266258212962952e-9,5.270453523821367e-9,0.7073882378922517],[1,-89.95437890588065,3.596954062703228e-14,8.537736822497861e-7]],[36,"Bip001 R Hand",[-127,-128,-129,-130],[1,0.15429335832595825,2.7755575615628914e-17,-5.960464477539063e-8],[3,0.7068252124052276,-5.274648390590563e-9,1.5802969949747272e-8,0.7073882378922517],[1,89.95437890588067,-0.0000017075473644709213,8.537736462802456e-7]],[16,["74ibesSy1V17EKlBAOSjFI"]],[43,"boss_1001",5,[-132],[[27,-131,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[16,["245Yv8agVeYq9cWl0ZBUPZ"]],[16,["f0l1SVqEBdE7x59A3aiLwt"]],[16,["df61Oe8wNaOqs3Ga6J5LJk"]],[16,["74ibesSy1V17EKlBAOSjFI"]],[16,["74ibesSy1V17EKlBAOSjFI"]],[16,["74ibesSy1V17EKlBAOSjFI"]],[49,"boss_1001",[-134],[[27,-133,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[16,["245Yv8agVeYq9cWl0ZBUPZ"]],[16,["32pL3TzbROT5a0KHXxUUbS"]],[16,["e3/YV2NxlFmJd6h+z6cxLr"]],[55,"dj4_2",3,[-135,-136,-137],[1,-0.092,0,-5.001]],[16,["7fr0MxCChJvZ8eG9U5hbsP"]],[51,"Bip001",1,[[[12,"Bip001 Footsteps",-138,[1,0,0,-0.5938893556594849],[3,-1.6881937713357192e-33,-7.027574812541318e-33,0.7071061851398384,0.7071073772327543],[1,0,-2.7358328087693375e-31,90]],-139,[12,"wq",-140,[1,0.1422824114561081,-0.45527106523513794,-0.10058164596557617],[3,3.161021942785041e-8,0.7071066917795763,-3.161021232242322e-8,0.7071068705935062],[1,0.000005122654759734163,89.99998551098113,-7.196936390788877e-14]]],4,1,4],[1,0,0.5914652347564697,0],[3,-0.5000004321335008,-0.49999956786612576,-0.49999956786612576,0.5000004321335008],[1,-90,-89.99990096225409,0]],[63,"Bip001 Neck",[-141,-142,10],[1,0.22189843654632568,-0.04308774694800377,-2.471540749837686e-10]],[51,"Bip001",2,[[[12,"Bip001 Footsteps",-143,[1,0,0,-0.5938893556594849],[3,-1.6881937713357192e-33,-7.027574812541318e-33,0.7071061851398384,0.7071073772327543],[1,0,-2.7358328087693375e-31,90]],-144,[12,"wq",-145,[1,0.1422824114561081,-0.45527106523513794,-0.10058164596557617],[3,3.161021942785041e-8,0.7071066917795763,-3.161021232242322e-8,0.7071068705935062],[1,0.000005122654759734163,89.99998551098113,-7.196936390788877e-14]]],4,1,4],[1,0,0.5914652347564697,0],[3,-0.5000004321335008,-0.49999956786612576,-0.49999956786612576,0.5000004321335008],[1,-90,-89.99990096225409,0]],[63,"Bip001 Neck",[-146,-147,11],[1,0.22189843654632568,-0.04308774694800377,-2.471540749837686e-10]],[88,"boss_1002",5,[-149],[[27,-148,[1,0,0.75,0],[1,1.5,1.5,1.5]]],[1,2,0,0]],[43,"boss_1007",5,[-151],[[27,-150,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[43,"boss_1004",5,[-153],[[27,-152,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[51,"Bone020",4,[[[12,"Bone016",-154,[1,-33.72551727294922,-6.7047624588012695,0.0000010294625099049881],[3,-1.3199816325522508e-12,5.609882965616802e-10,0.002352950799609091,0.9999972318074358],[1,-3.025200051447201e-10,6.428541326752632e-8,0.26962854923369406]],[12,"Bone017",-155,[1,-33.691349029541016,-17.635324478149414,0.000004128903128730599],[3,-1.420763988900313e-14,5.372255518871733e-16,-0.006554555924122852,0.9999785186675949],[1,-1.6277769891187452e-12,5.089325148711613e-14,-0.7511021603021816]],-156],4,4,1],[1,0,21.457637786865234,0.0000018269626025357866],[3,1.4106519635280836e-7,3.415097967236887e-11,-0.001562594624001247,0.9999987791482652],[1,0.000016164946094518598,2.9172707483042444e-8,-0.17906022695887233]],[89,"Bone002",41,[-157,-158,-159],[1,2.5403449535369873,-5.362619400024414,0.000007629393621755298],[3,0.043470329538503355,-0.0014250646018193543,0.03565729700133897,0.9984171757393063],[1,0.9477179646492004,0.9015430808067322,0.9269755482673645],[1,4.998233808964592,-0.34152858351381027,4.075895941095965]],[44,"boss_1006",5,[-161],[[27,-160,[1,0,0.75,0],[1,1.5,1.5,1.5]]],[1,2.018,0,0],[1,1.2,1.2,1.2]],[43,"boss_1005",5,[-163],[[27,-162,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[49,"boss_1002",[-165],[[27,-164,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[49,"boss_1002",[-167],[[27,-166,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[49,"boss_1002",[-169],[[27,-168,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[64,"map_player",512,false,15,[1],[[75,-170]],[1,-4.05,0,0],[1,1.3,1.3,1.3]],[35,"Bip001 L Forearm",[[16,[12,"Bone073",-171,[1,0.09876883029937744,0.028269343078136444,-0.026700496673583984],[3,0.5778544524885693,0.34647667286344647,0.06148846053350726,0.7363812301531263],[1,68.12327810821677,30.276120461381357,29.405282353144464]]],1,4],[1,0.20608657598495483,-1.862645149230957e-9,-1.1102230246251565e-16],[3,-1.3518791212289838e-17,2.700440255636357e-17,-0.14722636113700394,0.989102825082588],[1,-1.125459618891633e-15,2.961046304728982e-15,-16.932448334775405]],[35,"Bip001 R Forearm",[[17,[12,"Bone075",-172,[1,0.08323213458061218,-0.01467740535736084,0.011759698390960693],[3,0.7442156552095077,0.11324831660188238,0.3842126366931594,0.5345077428187671],[1,119.62672148989303,-33.57714829061615,35.400732876654395]]],1,4],[1,0.20608660578727722,-1.862645149230957e-9,-1.1102230246251565e-16],[3,-1.8966768078188408e-17,-8.618396653752036e-17,-0.14722636113700394,0.989102825082588],[1,-3.767054535978513e-15,-1.0545480768654256e-14,-16.932448334775405]],[64,"map_player",512,false,5,[2],[[75,-173]],[1,-4.05,0,0],[1,1.3,1.3,1.3]],[35,"Bip001 L Forearm",[[18,[12,"Bone073",-174,[1,0.09876883029937744,0.028269343078136444,-0.026700496673583984],[3,0.5778544524885693,0.34647667286344647,0.06148846053350726,0.7363812301531263],[1,68.12327810821677,30.276120461381357,29.405282353144464]]],1,4],[1,0.20608657598495483,-1.862645149230957e-9,-1.1102230246251565e-16],[3,-1.3518791212289838e-17,2.700440255636357e-17,-0.14722636113700394,0.989102825082588],[1,-1.125459618891633e-15,2.961046304728982e-15,-16.932448334775405]],[35,"Bip001 R Forearm",[[19,[12,"Bone075",-175,[1,0.08323213458061218,-0.01467740535736084,0.011759698390960693],[3,0.7442156552095077,0.11324831660188238,0.3842126366931594,0.5345077428187671],[1,119.62672148989303,-33.57714829061615,35.400732876654395]]],1,4],[1,0.20608660578727722,-1.862645149230957e-9,-1.1102230246251565e-16],[3,-1.8966768078188408e-17,-8.618396653752036e-17,-0.14722636113700394,0.989102825082588],[1,-3.767054535978513e-15,-1.0545480768654256e-14,-16.932448334775405]],[24,0,null,38,[23,"74ibesSy1V17EKlBAOSjFI",-180,[28,"f4G76Pv69A/Zy5klaPnuxz",38,[[19,"rw",["_name"],20],[9,["_lpos"],20,[1,0,0,0]],[9,["_lrot"],20,[3,0,0,0,1]],[9,["_euler"],20,[1,0,0,0]],[9,["_lscale"],20,[1,1.2,1.2,1.2]],[19,1,["_shadowCastingMode"],-176],[52,["_skinningRoot"],-178,-177],[19,0,["_shadowReceivingMode"],-179]]],169]],[16,["a7VObbAa1WTJnVfl5q1bIr"]],[43,"boss_1003",5,[4],[[27,-181,[1,0,0.75,0],[1,1.5,1.5,1.5]]]],[3,"Bone008(mirrored)",42,[-182,-183],[1,-30.240692138671875,-0.4671440124511719,2.220446049250313e-16],[3,0.7025704063220838,0.7116137425912068,0.0005650794704308798,-0.0006214506818523558],[1,-7.4725068848440435,-172.5229253472296,89.26094690319496]],[51,"Bone008",42,[[-184,[12,"Bone012(mirrored)",-185,[1,3.6231765747070312,-4.608406066894531,36.17649459838867],[3,0.49408165919222613,0.5058551563679495,0.502234770149121,-0.4977490436746956],[1,-89.58247626150694,-90.93157916077011,-0.006087283843465345]]],1,4],[1,30.242897033691406,-0.2781352996826172,1.1920928955078125e-7],[3,0.000546698124879563,-0.0005831471229015614,0.7064522706815767,0.707760235043929],[1,40.819619951642196,-40.82257336033443,89.85995142686637]],[44,"map_boss",13,[45],[[53,-186]],[1,-3.648,0,-15.234],[1,1.4,1.4,1.4]],[24,0,null,45,[23,"74ibesSy1V17EKlBAOSjFI",-191,[28,"f4G76Pv69A/Zy5klaPnuxz",45,[[19,"rw",["_name"],25],[9,["_lpos"],25,[1,0,0,0]],[9,["_lrot"],25,[3,0,0,0,1]],[9,["_euler"],25,[1,0,0,0]],[9,["_lscale"],25,[1,1.2,1.2,1.2]],[19,1,["_shadowCastingMode"],-187],[52,["_skinningRoot"],-189,-188],[19,0,["_shadowReceivingMode"],-190]]],188]],[16,["a7VObbAa1WTJnVfl5q1bIr"]],[44,"map_boss",13,[46],[[53,-192]],[1,3.66,0,-20.03],[1,1.4,1.4,1.4]],[24,0,null,46,[23,"74ibesSy1V17EKlBAOSjFI",-197,[28,"f4G76Pv69A/Zy5klaPnuxz",46,[[19,"rw",["_name"],26],[9,["_lpos"],26,[1,0,0,0]],[9,["_lrot"],26,[3,0,0,0,1]],[9,["_euler"],26,[1,0,0,0]],[9,["_lscale"],26,[1,1.2,1.2,1.2]],[19,1,["_shadowCastingMode"],-193],[52,["_skinningRoot"],-195,-194],[19,0,["_shadowReceivingMode"],-196]]],189]],[16,["a7VObbAa1WTJnVfl5q1bIr"]],[44,"map_boss",13,[47],[[53,-198]],[1,-2.028,0,-24.909],[1,1.4,1.4,1.4]],[24,0,null,47,[23,"74ibesSy1V17EKlBAOSjFI",-203,[28,"f4G76Pv69A/Zy5klaPnuxz",47,[[19,"rw",["_name"],27],[9,["_lpos"],27,[1,0,0,0]],[9,["_lrot"],27,[3,0,0,0,1]],[9,["_euler"],27,[1,0,0,0]],[9,["_lscale"],27,[1,1.2,1.2,1.2]],[19,1,["_shadowCastingMode"],-199],[52,["_skinningRoot"],-201,-200],[19,0,["_shadowReceivingMode"],-202]]],190]],[16,["a7VObbAa1WTJnVfl5q1bIr"]],[44,"map_boss",13,[28],[[108,2,-204]],[1,0.399,0,-38.201],[1,2.5,2.5,2.5]],[45,"dj3_a",3,[[21,-205,[0],[1],1]],[1,-1.887,0,-7.326],[1,1,0.8,1.2]],[45,"dj3_a-001",3,[[21,-206,[2],[1],3]],[1,0.733,0,-7.326],[1,1,0.8,1.2]],[45,"dj3_b",3,[[21,-207,[4],[1],5]],[1,-2.279,0,-3.915],[1,1,0.8,1.2]],[31,"dj1_blue",3,[[21,-208,[6],[1],7]],[1,0,0.5,-4.129]],[31,"dj1_gray",3,[[21,-209,[8],[1],9]],[1,0.596,0.5,-4.129]],[31,"dj1_red",3,[[21,-210,[10],[1],11]],[1,1.274,0.5,-4.129]],[31,"line_arrow",3,[[21,-211,[12],[1],13]],[1,0,0.5,-1.814]],[24,0,null,3,[23,"32pL3TzbROT5a0KHXxUUbS",-212,[58,"efw1txWeNGQ7wqD7IocILs",[[19,"line_circle",["_name"],30],[9,["_lpos"],30,[1,0,0.5,-3.406]],[9,["_lrot"],30,[3,0,0,0,1]],[9,["_euler"],30,[1,0,0,0]]]],14]],[24,0,null,3,[23,"7dKrrF6CJOVr6eOy6TlN5f",-213,[58,"08hJvQW+hK0b3A2syBZ4y7",[[19,"line_point",["_name"],31],[9,["_lpos"],31,[1,0,0.5,-2.734]],[9,["_lrot"],31,[3,0,0,0,1]],[9,["_euler"],31,[1,0,0,0]]]],15]],[45,"dj2_edge",3,[[21,-214,[16],[1],17]],[1,3.667,0,-0.002],[1,0.8,1,19.987]],[65,"dj4_a-002",32,[[21,-215,[18],[1],19]]],[31,"dj4_a-003",32,[[21,-216,[20],[1],21]],[1,1.306,0,0]],[90,"dj4_c",32,[[21,-217,[22],[1],23]],[1,1.25,1,1]],[45,"dj2_edge-001",3,[[21,-218,[24],[1],25]],[1,-3.667,0,-0.002],[1,0.8,1,19.987]],[31,"dj1_blue-001",3,[[21,-219,[26],[1],27]],[1,1.126,0.5,-3.351]],[31,"dj1_gray-001",3,[[21,-220,[28],[1],29]],[1,1.722,0.5,-3.351]],[31,"dj1_red-001",3,[[21,-221,[30],[1],31]],[1,2.4,0.5,-3.351]],[37,"Main Light",15,[[109,90000,-222,[110,true]]],[1,17.271,0,0],[3,-0.4966368433345813,-0.22420415586987277,0.02834118558328995,0.8380221474000995],[1,-58.358,-21.165,15.676]],[37,"Main Camera",15,[[111,60,1822425087,-223,[4,4294891703]]],[1,0.038,4.933,9.503],[3,-0.07693654946609595,0,0,0.9970359910034597],[1,-8.825,0,0]],[24,0,null,15,[23,"27KQVO/tVKSJ8POIqo2maP",-224,[58,"9ahLH/+/pGN7w6IWR/Wgeu",[[19,"map_ground",["_name"],33],[9,["_lpos"],33,[1,0,0,22.576]],[9,["_lrot"],33,[3,0,0,0,1]],[9,["_euler"],33,[1,0,0,0]]]],32]],[50,"Zomball_zj1_clothes",1,[[15,1,0,-225,[33],[1],1,34,35]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[50,"Zomball_zj1_head",1,[[15,1,0,-226,[36],[1],1,37,38]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[37,"Zomball_zj1_body",1,[[15,1,0,-227,[39,40],[1],1,41,42]],[1,0,-0.0003662109375,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[66,"Bip001 Pelvis",34,[6],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[55,"Bip001 Spine1",6,[35],[1,0.12752574682235718,-0.00017669209046289325,-4.90073537307012e-10]],[3,"Bip001 L Clavicle",35,[-228],[1,-0.040239155292510986,0.056717947125434875,0.05589336156845093],[3,0.6496861697470244,-0.0002597347532118824,0.7602024219292454,0.0003017784094035427],[1,179.95490681309104,-98.96410031078148,0.006951880377830523]],[3,"Bip001 L UpperArm",94,[49],[1,0.10765320062637329,0,-5.960464477539063e-8],[3,0.012104079273499189,0.32737976708031497,0.0117815054513369,0.9447418565410765],[1,0.8688274025358375,38.21217849287877,1.7298060031250913]],[3,"Bip001 L Finger0",16,[-229],[1,0.035690486431121826,0.030975759029388428,-0.045696429908275604],[3,0.5226427976131355,0.3724847481149801,0.08666117594495545,0.7619642111731184],[1,59.06373518926382,33.99145231254306,31.427441179822953]],[3,"Bip001 L Finger01",96,[-230],[1,0.03197759389877319,-2.9802322387695312e-8,-2.9802322387695312e-8],[3,3.839168717855296e-10,-7.754899525964813e-10,0.1164022464427092,0.9932021531506519],[1,5.55437895382281e-8,-9.59824988829723e-8,13.369022166737809]],[10,"Bip001 L Finger02",97,[[20,"Bip001 L Finger0Nub",-231,[1,0.026329755783081055,2.9802322387695312e-8,2.9802322387695312e-8]]],[1,0.02484738826751709,-2.9802322387695312e-8,2.9802322387695312e-8],[3,-6.305197490613693e-10,6.293763858766718e-10,0.11640225379233832,0.9932021522892831],[1,-8.238880573623004e-8,8.227072782562558e-8,13.369023014707635]],[3,"Bip001 L Finger1",16,[-232],[1,0.09245193004608154,0.01026904582977295,-0.025887295603752136],[3,-0.00039211273970238156,0.00006919419031848168,0.17376910339561336,0.9847863423935408],[1,-0.04855963356514913,0.01662008402644049,20.01406597295929]],[3,"Bip001 L Finger11",99,[-233],[1,0.0339202880859375,0,0],[3,-3.584511588295988e-9,1.458304859471115e-8,0.1164022464427092,0.9932021531506519],[1,-6.192630387156671e-7,0.0000017551088437917458,13.369022166737802]],[10,"Bip001 L Finger12",100,[[20,"Bip001 L Finger1Nub",-234,[1,0.026329755783081055,0,1.3877787807814457e-17]]],[1,0.022512376308441162,5.960464477539063e-8,0],[3,4.220189090046673e-9,7.996177059449988e-9,0.11640226849159643,0.9932021505665451],[1,3.84059493338052e-7,8.775544824728484e-7,13.369024710647283]],[3,"Bip001 L Finger2",16,[-235],[1,0.09938046336174011,0.004958033561706543,0.009929515421390533],[3,-0.000393877136037272,0.0000581877444558615,0.14616488291139706,0.9892601621810541],[1,-0.04766134920598197,0.01378225716435052,16.809477444686806]],[3,"Bip001 L Finger21",102,[-236],[1,0.0315956175327301,0,7.450580596923828e-9],[3,1.8499830601450768e-9,2.1681609338584974e-10,0.11640225379233832,0.9932021522892831],[1,2.1344339857521052e-7,1.5221434540906446e-15,13.369023014707635]],[10,"Bip001 L Finger22",103,[[20,"Bip001 L Finger2Nub",-237,[1,0.031595706939697266,2.9802322387695312e-8,-1.3877787807814457e-17]]],[1,0.029359936714172363,0,-1.3877787807814457e-17],[3,-1.7923410530588324e-9,1.479309030584848e-8,0.11640227584122548,0.9932021497051763],[1,-4.1248988321475923e-7,0.0000017551090104337245,13.3690255586171]],[3,"Bip001 L Finger3",16,[-238],[1,0.09447422623634338,0.010125577449798584,0.04568496719002724],[3,-0.00039447681354006306,0.00005402581924706252,0.13570210443242958,0.9907496052595048],[1,-0.04737033915053569,0.012736977875919517,15.598438442501003]],[3,"Bip001 L Finger31",105,[-239],[1,0.02632957696914673,-5.960464477539063e-8,-3.725290298461914e-9],[3,-1.0117179119157268e-8,6.315851856917785e-9,0.11640225379233832,0.9932021522892831],[1,-0.0000012701267677559948,8.775544104715353e-7,13.369023014707627]],[10,"Bip001 L Finger32",106,[[20,"Bip001 L Finger3Nub",-240,[1,0.02632969617843628,2.9802322387695312e-8,-3.725290298461914e-9]]],[1,0.026329785585403442,-1.1102230246251565e-16,1.862645149230957e-8],[3,-5.492222236424277e-9,6.857891592764623e-9,0.11640226849159643,0.9932021505665451],[1,-7.365183702349454e-7,8.775543808792929e-7,13.369024710647274]],[3,"Bip001 R Clavicle",35,[-241],[1,-0.040239155292510986,0.056718260049819946,-0.05589328706264496],[3,-0.6496861697470324,0.00025762696645964425,0.7602024219292546,0.00030357976191922823],[1,-179.95495632015647,98.96410019041957,0.007265722876583416]],[3,"Bip001 R UpperArm",108,[50],[1,0.10765321552753448,9.313225746154785e-10,5.960464477539063e-8],[3,-0.012103961938467429,-0.3273797673944442,0.011781544578190195,0.9447418574475802],[1,-0.8688132247363047,-38.21217870817359,1.729805838742258]],[3,"Bip001 R Finger0",17,[-242],[1,0.03569045662879944,0.030975818634033203,0.045696429908275604],[3,-0.52264280442732,-0.3724847231690902,0.08666115472309616,0.7619642211075608],[1,-59.06373699791648,-33.991450105954435,31.427437713882696]],[3,"Bip001 R Finger01",110,[-243],[1,0.03197765350341797,2.9802322387695312e-8,2.9802322387695312e-8],[3,-7.479477617551555e-10,3.8118971993882684e-10,0.1164022464427092,0.9932021531506519],[1,-9.272314929297244e-8,5.4847149691206036e-8,13.369022166737809]],[10,"Bip001 R Finger02",111,[[26,"Bip001 R Finger0Nub",-244,[1,0.026329636573791504,0,0],[3,1.1641532182693481e-10,2.0372681319713593e-10,1,-6.125605955178151e-17],[1,-1,-1,-1],[1,-179.99999997665464,-179.9999999866598,-7.0167096047110005e-15]]],[1,0.02484738826751709,0,-5.551115123125783e-17],[3,3.1796576587980925e-10,3.7265253506266515e-11,0.1164022464427092,0.9932021531506519],[1,3.6685575746672065e-8,6.829579565290905e-17,13.369022166737809]],[3,"Bip001 R Finger1",17,[-245],[1,0.09245190024375916,0.01026904582977295,0.025887303054332733],[3,0.0003921127105985555,-0.00006919418304252481,0.17376910339561544,0.9847863423935526],[1,0.04855962991554757,-0.01662008253581183,20.01406597296038]],[3,"Bip001 R Finger11",113,[-246],[1,0.0339202880859375,0,7.450580596923828e-9],[3,-7.399933572847939e-9,-8.672644845657016e-10,0.11640225379233832,0.9932021522892831],[1,-8.537737486309548e-7,-8.105403635526449e-16,13.369023014707635]],[10,"Bip001 R Finger12",114,[[26,"Bip001 R Finger1Nub",-247,[1,0.02632969617843628,5.960464477539063e-8,1.3877787807814457e-17],[3,7.450580596923828e-9,-1.4435499906539917e-8,1,3.725290298461914e-9],[1,-1,-1,-1],[1,179.99999834581357,-179.99999914622634,4.2688681080114753e-7]]],[1,0.022512346506118774,-5.960464477539063e-8,-7.450580596923828e-9],[3,-8.729693411158992e-9,6.47846443051859e-9,0.11640227584122548,0.9932021497051763],[1,-0.0000011100444372738283,8.775545222399783e-7,13.369025558617096]],[3,"Bip001 R Finger2",17,[-248],[1,0.09938046336174011,0.004958033561706543,-0.00992952287197113],[3,0.0003938844684858386,-0.00005818664917058425,0.14616491207660512,0.9892601578689892],[1,0.047662199205345805,-0.013782257345351618,16.809480823006606]],[3,"Bip001 R Finger21",116,[-249],[1,0.03159564733505249,0,0],[3,-8.38265190457278e-9,-8.48401260216918e-9,0.11640227584122548,0.9932021497051763],[1,-8.643072545172979e-7,-8.775543827477857e-7,13.369025558617112]],[10,"Bip001 R Finger22",117,[[26,"Bip001 R Finger2Nub",-250,[1,0.031595706939697266,5.551115123125783e-17,-1.4901161193847656e-8],[3,-7.4505797087454084e-9,2.3283067140944524e-10,1,1.5133988506832452e-9],[1,-1.0000001192092896,-1,-1],[1,-179.99999997331958,179.99999914622646,1.7342273352941416e-7]]],[1,0.029359936714172363,1.1102230246251565e-16,7.450580596923828e-9],[3,2.3731983506174404e-8,-1.222178625830669e-8,0.1164022684915964,0.9932021505665449],[1,0.0000029437951266748443,-0.0000017551089384462455,13.369024710647238]],[3,"Bip001 R Finger3",17,[-251],[1,0.094474196434021,0.01012563705444336,-0.045684974640607834],[3,0.00039448147094978944,-0.000054032698774181456,0.13570208980537427,0.9907496072607298],[1,0.04737099881156376,-0.012737863200062,15.598436750325732]],[3,"Bip001 R Finger31",119,[-252],[1,0.02632966637611389,-5.960464477539063e-8,1.862645149230957e-8],[3,2.7172475376410613e-9,-7.183115878705292e-9,0.11640227584122548,0.9932021497051763],[1,4.1635326795245306e-7,-8.775543985771266e-7,13.369025558617102]],[10,"Bip001 R Finger32",120,[[26,"Bip001 R Finger3Nub",-253,[1,0.02632969617843628,-5.551115123125783e-17,-1.3877787807814457e-17],[3,-7.450580596923828e-9,-3.02679858954491e-9,1,-9.31322685637781e-10],[1,-0.9999999403953552,-0.9999999403953552,-0.9999998807907104],[1,179.99999965315442,179.99999914622634,-1.067217159194671e-7]]],[1,0.026329785585403442,5.960464477539063e-8,-1.862645149230957e-8],[3,3.4109908314426983e-9,-7.1018093801214546e-9,0.11640225379233832,0.9932021522892831],[1,4.963944724587577e-7,-8.77554324796866e-7,13.369023014707633]],[3,"Bone060",10,[-254],[1,0.4965684413909912,0.10294882953166962,-0.3386384844779968],[3,-0.020163999601089368,0.658169558793834,0.7466465731073486,0.09447295837576852],[1,-96.69259050936967,171.05464258040598,6.576699162336489]],[10,"Bone061",122,[[12,"Bone062",-255,[1,0.17673373222351074,2.682209014892578e-7,0],[3,8.597037612974599e-8,1.6940420355061547e-8,0.15144444763587245,0.9884657704140584],[1,0.000009897886192630644,4.474097991821601e-7,17.42128738298568]]],[1,0.2072993516921997,1.7881393432617188e-7,1.4901161193847656e-8],[3,0.0033116055959070685,-0.04369227878278071,0.07550623870500757,0.996182124894724],[1,0.7647673713974719,-5.080477481170017,8.635419289841947]],[3,"Bone069",10,[-256],[1,0.6941497325897217,0.33708083629608154,-2.117582368135751e-22],[3,0.3826454655028143,0.9238952579865242,2.9160194121764977e-7,-2.518364162293586e-7],[1,-0.00005927129632950301,-179.9999442163818,44.99529089586368]],[10,"Bone070",124,[[12,"Bone071",-257,[1,0.14679455757141113,2.980232238769531e-7,2.24835616791097e-9],[3,1.4524277345147955e-14,-1.9014449854733756e-15,-0.3664151756073089,0.9304514598218785],[1,2.007940195504446e-12,5.565580112647613e-13,-42.98940201433063]]],[1,0.1452805995941162,-1.1920928955078125e-7,-3.0813538387519657e-9],[3,-1.4283650638344183e-14,1.2100774702216607e-14,-0.3084240900770092,0.9512489582964961],[1,-1.3946486256001427e-12,1.0055237347501672e-12,-35.92856896375318]],[3,"Bone056",10,[-258],[1,0.5282891988754272,0.16340160369873047,0.3022174835205078],[3,0.0879942094602762,0.8790298008209623,0.4549511323317619,-0.11217439797105311],[1,-55.15594041904179,-163.8793898597478,3.0169468014401213]],[10,"Bone057",126,[[12,"Bone058",-259,[1,0.18097984790802002,0.0000018477439880371094,1.4901161193847656e-8],[3,-0.013789279357816717,-0.0930269507625509,-0.1459772136761642,0.9848078468889034],[1,-3.248612801693218,-11.265300163790323,-16.55606679352561]]],[1,0.206010103225708,-5.960464477539063e-8,0],[3,-0.008928303840696757,-0.08003136725269983,-0.11051217011035781,0.9906070491893803],[1,-2.0771763297167523,-9.466489194186279,-12.56336420207262]],[3,"Bone064",10,[-260],[1,0.5276918411254883,-0.34571075439453125,0.016655920073390007],[3,-0.10212752353327867,0.9923935659197667,0.06719102796220101,-0.014503276160644394],[1,-7.655532614885439,-179.11832735429206,-11.809033080007438]],[3,"Bone065",128,[-261],[1,0.20729947090148926,2.384185791015625e-7,1.4901161193847656e-8],[3,0.0003327069248968898,-0.043816461747807754,0.1430750624814646,0.9887413885753595],[1,0.7883018691157447,-5.188681241964862,16.43332141832363]],[10,"Bone066",129,[[12,"Bone068",-262,[1,0.18840014934539795,2.9802322387695312e-8,7.450580596923828e-9],[3,1.3390391199823301e-7,3.2739887689750874e-8,0.2506105635775933,0.9680879843399058],[1,0.000015913257599217166,-2.441055837980478e-7,29.027290247885528]]],[1,0.17673397064208984,2.384185791015625e-7,7.450580596923828e-9],[3,9.499796312519695e-8,1.6439175021243923e-8,0.15144447675466524,0.9884657659527194],[1,0.000010978716914526626,2.2370492114829218e-7,17.42129075868969]],[3,"Bip001 L Thigh",6,[-263],[1,-0.06054854393005371,0.00014949528849683702,0.0954100713133812],[3,-0.020717808521553166,0.9987050671484855,-0.009176902271335939,-0.045549376798213116],[1,1.1594043944706223,-174.75376239453323,-2.3237491689971406]],[3,"Bip001 L Calf",131,[-264],[1,0.3032858967781067,-3.469446951953614e-18,0],[3,-1.4436270368294636e-18,4.0199017322471e-18,-0.07338205719559543,0.997303902369655],[1,-1.3260640531802277e-16,4.521348755772659e-16,-8.416529627531403]],[3,"Bip001 L Foot",132,[-265],[1,0.23395508527755737,1.3877787807814457e-17,1.4901161193847656e-8],[3,-0.00582938256008663,-0.04609780285091035,0.09434479268314055,0.9944546600850449],[1,-0.16894353871528303,-5.292036235461769,10.846629820869666]],[3,"Bip001 L Toe0",133,[-266],[1,0.055545106530189514,0.09213767945766449,-2.7755575615628914e-17],[3,1.5452139388247047e-8,1.545632093231856e-8,0.7071067811865474,0.7071067811865474],[1,0,0.000002504126377939086,90]],[69,"Bip001 L Toe01",134,[[26,"Bip001 L Toe0Nub",-267,[1,0.010256931185722351,-4.656612873077393e-10,0],[3,-6.040395912404115e-14,1.7746356684514297e-15,1,-7.166659369358015e-15],[1,-1,-0.9999999403953552,-0.9999999403953552],[1,-179.9999999999998,179.99999999999307,-8.212386701442171e-13]]],[1,0.042733967304229736,0,-2.7755575615628914e-17]],[3,"Bip001 R Thigh",6,[-268],[1,-0.06054854393005371,0.00015002454165369272,-0.0954100713133812],[3,-0.02071768248607345,0.9987050376427246,0.009179669507300378,0.045549523457299],[1,-1.1597210463082421,174.7537393197182,-2.323720053040234]],[3,"Bip001 R Calf",136,[-269],[1,0.3032859265804291,1.862645149230957e-9,0],[3,3.491917314544687e-18,1.7791646856018394e-19,-0.07338204237467587,0.9973039034601847],[1,4.049224680242887e-16,5.0237207577276846e-17,-8.416527924587824]],[3,"Bip001 R Foot",137,[-270],[1,0.23395508527755737,-1.3877787807814457e-17,-1.4901161193847656e-8],[3,0.005829376021122299,0.04609789210203969,0.0943447849136236,0.994454656723249],[1,0.1689418365278127,5.292046678746982,10.846628907908357]],[10,"Bip001 R Toe0",138,[[20,"Bip001 R Toe0Nub",-271,[1,0.04273395985364914,-8.673617379884035e-19,2.7755575615628914e-17]]],[1,0.055545106530189514,0.09213767945766449,-2.7755575615628914e-17],[3,-1.5448949051308884e-8,-1.545087817486949e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025036093617071823,90]],[3,"Bone082",6,[-272],[1,-0.011560916900634766,-0.037317514419555664,0.20182563364505768],[3,0.17950137289560894,-0.27410859373493407,0.9428266460185952,-0.061005340148016805],[1,149.55919743083558,-161.80643913208738,-12.324060219611198]],[3,"Bone083",140,[-273],[1,0.1288262903690338,-1.3877787807814457e-17,-2.9802322387695312e-8],[3,-0.000971410620767228,-0.011447291156559973,0.009638702721400064,0.9998875493256385],[1,-0.09867767087127471,-1.3109009486636494,1.1057326639740042]],[10,"Bone084",141,[[12,"Bone085",-274,[1,0.16063714027404785,1.4901161193847656e-8,0],[3,0.0001152095796813605,-0.0175390076571817,0.02688900205481196,0.9994845429048167],[1,0.0673346936495665,-2.0124631789469993,3.080917364001346]]],[1,0.12080413103103638,-4.842877388000488e-8,5.551115123125783e-17],[3,-0.00007664291312125187,0.024987652353259115,0.010009839912653614,0.999637641578517],[1,-0.037448863816738995,2.864190298583542,1.1464845698097306]],[3,"Bone077",6,[-275],[1,-0.04098105430603027,0.13633954524993896,0.16128873825073242],[3,0.06187198045044524,0.5901576382161342,0.8020712275260571,-0.06758377072299228],[1,-107.12619141129538,-169.6806890731162,-2.0278661403892078]],[3,"Bone078",143,[-276],[1,0.11217227578163147,0,0],[3,-0.00101804090731762,-0.008491445144231781,0.011691907161161438,0.999895073624732],[1,-0.1052987565516417,-0.9718945597403345,1.3407662556721676]],[10,"Bone079",144,[[12,"Bone080",-277,[1,0.1520831435918808,0,0],[3,-0.000001210832152373362,9.213934717558117e-7,0.026936373365621786,0.9996371500637582],[1,-0.00014175054533455519,0.00010944187099465833,3.0870544065423564]]],[1,0.1463828682899475,-7.450580596923828e-8,1.4901161193847656e-8],[3,0.000356314528977864,-0.017102517176973846,0.009404997335493845,0.9998094433297213],[1,0.059265287645762915,-1.9605434491791078,1.0768930349052228]],[3,"Bone097",6,[-278],[1,-0.05313706398010254,0.13311481475830078,-0.1635456085205078],[3,-0.054561258168047744,0.885378850659448,0.4508908159556673,0.09912029055096111],[1,-54.02328380261945,167.01321986669666,-0.4142469798107784]],[3,"Bone098",146,[-279],[1,0.11395341157913208,0.0026635080575942993,-0.000004231929779052734],[3,-0.00040114801833666215,0.0012248067612635298,-0.018815793038168403,0.9998221366128127],[1,-0.043349857205508255,0.13956158702494506,-2.1563128525033033]],[10,"Bone099",147,[[12,"Bone100",-280,[1,0.13152332603931427,0,0],[3,-0.00009010363521795529,-0.01565294009230588,0.03285750833854909,0.9993374612680063],[1,0.04872326076486637,-1.7963388869515278,3.7655703424096703]]],[1,0.135727196931839,-7.450580596923828e-8,0],[3,0.00021049341493902484,-0.0026128066835870082,0.004055620263929129,0.9999883403710421],[1,0.025335596763105987,-0.2995111390793309,0.46467650120643983]],[3,"Bone092",6,[-281],[1,-0.016277968883514404,-0.044812921434640884,-0.189912810921669],[3,-0.09467353543985392,0.9601083268256244,-0.2048438908819203,0.1651299573541239],[1,21.956162727038382,163.29864239280369,-14.444697751171795]],[3,"Bone093",149,[-282],[1,0.11395338177680969,0.002663496881723404,-0.00000426173210144043],[3,-0.0004784977265551678,-0.002883327139914657,-0.018817450501108186,0.9998186640692244],[1,-0.06108249937093116,-0.33161349248712196,-2.156280839244559]],[10,"Bone094",150,[[12,"Bone095",-283,[1,0.13152334094047546,7.450580596923828e-9,2.9802322387695312e-8],[3,-0.0005958124381135351,0.001066219966372877,-0.008285640532483984,0.9999649275567061],[1,-0.06726959684406585,0.12162661397968,-0.9495474281413622]]],[1,0.135727196931839,-5.587935447692871e-8,1.1102230246251565e-16],[3,0.00024000466311570413,-0.00988433501885233,0.004056859262242427,0.9999428904752127],[1,0.03209704244641989,-1.132819289747719,0.4645885254733225]],[3,"Bone087",6,[-284],[1,-0.004704833030700684,-0.12724639475345612,0.0032868385314941406],[3,0.14655160911268392,-0.6821682456571082,0.6975883845007359,-0.1629096568446444],[1,91.02753332592607,178.87204914651804,-25.292117321626083]],[3,"Bone088",152,[-285],[1,0.11395341157913208,0.0026634912937879562,-0.00000426173210144043],[3,-0.0006682663396173315,-0.012969338668003916,-0.018820232263502185,0.9997385400854375],[1,-0.10460192863313725,-1.4884499390787183,-2.1555911973239588]],[10,"Bone089",153,[[12,"Bone090",-286,[1,0.13152335584163666,-5.587935447692871e-9,0],[3,0.00021223348426977647,-0.02484139052437831,0.03284582864812609,0.9991516460548827],[1,0.11805348609593398,-2.8523216700881093,3.7627616294131903]]],[1,0.1357271671295166,-5.3085386753082275e-8,0],[3,0.00020037694325089107,-0.00010768367550176465,0.004055128807225562,0.9999917520578174],[1,0.023012113201679292,-0.01243305933989713,0.4646823209452444]],[22," Zomball_zj2_head",false,1,[[15,1,0,-287,[43],[1],1,44,45]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj3_clothes",false,1,[[15,1,0,-288,[46,47],[1],1,48,49]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj3_head",false,1,[[15,1,0,-289,[50],[1],1,51,52]],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[22,"Zomball_zj4_head",false,1,[[15,1,0,-290,[53],[1],1,54,55]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj5_head",false,1,[[15,1,0,-291,[56],[1],1,57,58]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj4_clothes",false,1,[[15,1,0,-292,[59,60],[1],1,61,62]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[38,"Zomball_zj6_head",false,1,[[15,1,0,-293,[63],[1],1,64,65]],[1,0,0,-0.09860992431640625],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[38,"Zomball_zj6_clothes",false,1,[[15,1,0,-294,[66,67,68],[1],1,69,70]],[1,2.0234773856486754e-9,2.0234773856486754e-9,-0.00238037109375],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj6_body",false,1,[[15,1,0,-295,[71,72],[1],1,73,74]],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[37,"Zomball_wp1",8,[[30,1,0,-296,[75],[1],76]],[1,0.3044475018978119,0.03417280316352844,-0.14228355884552002],[3,-0.49999907612759165,-0.5000000596042304,0.4999999701972633,0.5000008940692573],[1,0,-89.9997916792241,90]],[39,"Zomball_wp5",false,8,[[30,1,0,-297,[77],[1],78]],[1,0.004208475351333618,-0.049929797649383545,-0.003980517387390137],[3,0.7071077348599449,-6.4273764300531e-7,0.7071058275112795,6.427394051513249e-7],[1,-0.9999998807907104,-0.9999997615814209,-0.9999998807907104],[1,179.99989583976355,-89.99984545045882,2.3031677689913016e-12]],[39,"Zomball_wp3",false,8,[[30,1,0,-298,[79],[1],80]],[1,0.08837822079658508,0.02575540542602539,0.3122841715812683],[3,0.7070650283383743,0.007741487393457201,0.707063776640865,-0.007741500897634198],[1,-1,-1.0000001192092896,-0.9999999403953552],[1,-178.74541210803775,-89.99989857096672,1.6236031231094994e-8]],[39,"Zomball_wp4",false,8,[[30,1,0,-299,[81],[1],82]],[1,0.018603414297103882,0.057217299938201904,0.3496796786785126],[3,-0.02794469893751988,-4.542627963935217e-8,-6.876180071684273e-9,0.9996094706440558],[1,0.7219220995903015,0.721921980381012,0.7219220399856567],[1,-3.2026435373952515,-0.000005225454403340657,-6.421792342886193e-7]],[38,"Zomball_wp2",false,8,[[30,1,0,-300,[83],[1],84]],[1,-0.028623729944229126,0.02337297797203064,0.33707040548324585],[3,3.0556426312578465e-7,-0.7071061553374501,3.05563723113319e-7,0.707107407034959],[1,0.000049518764754437913,-89.99989857686789,7.187326640205281e-14]],[65,"map_boss",5,[[53,-301]]],[50,"Zomball_zj1_clothes",2,[[15,1,0,-302,[101],[1],2,102,103]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[50,"Zomball_zj1_head",2,[[15,1,0,-303,[104],[1],2,105,106]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[37,"Zomball_zj1_body",2,[[15,1,0,-304,[107,108],[1],2,109,110]],[1,0,-0.0003662109375,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[66,"Bip001 Pelvis",36,[7],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[55,"Bip001 Spine1",7,[37],[1,0.12752574682235718,-0.00017669209046289325,-4.90073537307012e-10]],[3,"Bip001 L Clavicle",37,[-305],[1,-0.040239155292510986,0.056717947125434875,0.05589336156845093],[3,0.6496861697470244,-0.0002597347532118824,0.7602024219292454,0.0003017784094035427],[1,179.95490681309104,-98.96410031078148,0.006951880377830523]],[3,"Bip001 L UpperArm",175,[52],[1,0.10765320062637329,0,-5.960464477539063e-8],[3,0.012104079273499189,0.32737976708031497,0.0117815054513369,0.9447418565410765],[1,0.8688274025358375,38.21217849287877,1.7298060031250913]],[3,"Bip001 L Finger0",18,[-306],[1,0.035690486431121826,0.030975759029388428,-0.045696429908275604],[3,0.5226427976131355,0.3724847481149801,0.08666117594495545,0.7619642111731184],[1,59.06373518926382,33.99145231254306,31.427441179822953]],[3,"Bip001 L Finger01",177,[-307],[1,0.03197759389877319,-2.9802322387695312e-8,-2.9802322387695312e-8],[3,3.839168717855296e-10,-7.754899525964813e-10,0.1164022464427092,0.9932021531506519],[1,5.55437895382281e-8,-9.59824988829723e-8,13.369022166737809]],[10,"Bip001 L Finger02",178,[[20,"Bip001 L Finger0Nub",-308,[1,0.026329755783081055,2.9802322387695312e-8,2.9802322387695312e-8]]],[1,0.02484738826751709,-2.9802322387695312e-8,2.9802322387695312e-8],[3,-6.305197490613693e-10,6.293763858766718e-10,0.11640225379233832,0.9932021522892831],[1,-8.238880573623004e-8,8.227072782562558e-8,13.369023014707635]],[3,"Bip001 L Finger1",18,[-309],[1,0.09245193004608154,0.01026904582977295,-0.025887295603752136],[3,-0.00039211273970238156,0.00006919419031848168,0.17376910339561336,0.9847863423935408],[1,-0.04855963356514913,0.01662008402644049,20.01406597295929]],[3,"Bip001 L Finger11",180,[-310],[1,0.0339202880859375,0,0],[3,-3.584511588295988e-9,1.458304859471115e-8,0.1164022464427092,0.9932021531506519],[1,-6.192630387156671e-7,0.0000017551088437917458,13.369022166737802]],[10,"Bip001 L Finger12",181,[[20,"Bip001 L Finger1Nub",-311,[1,0.026329755783081055,0,1.3877787807814457e-17]]],[1,0.022512376308441162,5.960464477539063e-8,0],[3,4.220189090046673e-9,7.996177059449988e-9,0.11640226849159643,0.9932021505665451],[1,3.84059493338052e-7,8.775544824728484e-7,13.369024710647283]],[3,"Bip001 L Finger2",18,[-312],[1,0.09938046336174011,0.004958033561706543,0.009929515421390533],[3,-0.000393877136037272,0.0000581877444558615,0.14616488291139706,0.9892601621810541],[1,-0.04766134920598197,0.01378225716435052,16.809477444686806]],[3,"Bip001 L Finger21",183,[-313],[1,0.0315956175327301,0,7.450580596923828e-9],[3,1.8499830601450768e-9,2.1681609338584974e-10,0.11640225379233832,0.9932021522892831],[1,2.1344339857521052e-7,1.5221434540906446e-15,13.369023014707635]],[10,"Bip001 L Finger22",184,[[20,"Bip001 L Finger2Nub",-314,[1,0.031595706939697266,2.9802322387695312e-8,-1.3877787807814457e-17]]],[1,0.029359936714172363,0,-1.3877787807814457e-17],[3,-1.7923410530588324e-9,1.479309030584848e-8,0.11640227584122548,0.9932021497051763],[1,-4.1248988321475923e-7,0.0000017551090104337245,13.3690255586171]],[3,"Bip001 L Finger3",18,[-315],[1,0.09447422623634338,0.010125577449798584,0.04568496719002724],[3,-0.00039447681354006306,0.00005402581924706252,0.13570210443242958,0.9907496052595048],[1,-0.04737033915053569,0.012736977875919517,15.598438442501003]],[3,"Bip001 L Finger31",186,[-316],[1,0.02632957696914673,-5.960464477539063e-8,-3.725290298461914e-9],[3,-1.0117179119157268e-8,6.315851856917785e-9,0.11640225379233832,0.9932021522892831],[1,-0.0000012701267677559948,8.775544104715353e-7,13.369023014707627]],[10,"Bip001 L Finger32",187,[[20,"Bip001 L Finger3Nub",-317,[1,0.02632969617843628,2.9802322387695312e-8,-3.725290298461914e-9]]],[1,0.026329785585403442,-1.1102230246251565e-16,1.862645149230957e-8],[3,-5.492222236424277e-9,6.857891592764623e-9,0.11640226849159643,0.9932021505665451],[1,-7.365183702349454e-7,8.775543808792929e-7,13.369024710647274]],[3,"Bip001 R Clavicle",37,[-318],[1,-0.040239155292510986,0.056718260049819946,-0.05589328706264496],[3,-0.6496861697470324,0.00025762696645964425,0.7602024219292546,0.00030357976191922823],[1,-179.95495632015647,98.96410019041957,0.007265722876583416]],[3,"Bip001 R UpperArm",189,[53],[1,0.10765321552753448,9.313225746154785e-10,5.960464477539063e-8],[3,-0.012103961938467429,-0.3273797673944442,0.011781544578190195,0.9447418574475802],[1,-0.8688132247363047,-38.21217870817359,1.729805838742258]],[3,"Bip001 R Finger0",19,[-319],[1,0.03569045662879944,0.030975818634033203,0.045696429908275604],[3,-0.52264280442732,-0.3724847231690902,0.08666115472309616,0.7619642211075608],[1,-59.06373699791648,-33.991450105954435,31.427437713882696]],[3,"Bip001 R Finger01",191,[-320],[1,0.03197765350341797,2.9802322387695312e-8,2.9802322387695312e-8],[3,-7.479477617551555e-10,3.8118971993882684e-10,0.1164022464427092,0.9932021531506519],[1,-9.272314929297244e-8,5.4847149691206036e-8,13.369022166737809]],[10,"Bip001 R Finger02",192,[[26,"Bip001 R Finger0Nub",-321,[1,0.026329636573791504,0,0],[3,1.1641532182693481e-10,2.0372681319713593e-10,1,-6.125605955178151e-17],[1,-1,-1,-1],[1,-179.99999997665464,-179.9999999866598,-7.0167096047110005e-15]]],[1,0.02484738826751709,0,-5.551115123125783e-17],[3,3.1796576587980925e-10,3.7265253506266515e-11,0.1164022464427092,0.9932021531506519],[1,3.6685575746672065e-8,6.829579565290905e-17,13.369022166737809]],[3,"Bip001 R Finger1",19,[-322],[1,0.09245190024375916,0.01026904582977295,0.025887303054332733],[3,0.0003921127105985555,-0.00006919418304252481,0.17376910339561544,0.9847863423935526],[1,0.04855962991554757,-0.01662008253581183,20.01406597296038]],[3,"Bip001 R Finger11",194,[-323],[1,0.0339202880859375,0,7.450580596923828e-9],[3,-7.399933572847939e-9,-8.672644845657016e-10,0.11640225379233832,0.9932021522892831],[1,-8.537737486309548e-7,-8.105403635526449e-16,13.369023014707635]],[10,"Bip001 R Finger12",195,[[26,"Bip001 R Finger1Nub",-324,[1,0.02632969617843628,5.960464477539063e-8,1.3877787807814457e-17],[3,7.450580596923828e-9,-1.4435499906539917e-8,1,3.725290298461914e-9],[1,-1,-1,-1],[1,179.99999834581357,-179.99999914622634,4.2688681080114753e-7]]],[1,0.022512346506118774,-5.960464477539063e-8,-7.450580596923828e-9],[3,-8.729693411158992e-9,6.47846443051859e-9,0.11640227584122548,0.9932021497051763],[1,-0.0000011100444372738283,8.775545222399783e-7,13.369025558617096]],[3,"Bip001 R Finger2",19,[-325],[1,0.09938046336174011,0.004958033561706543,-0.00992952287197113],[3,0.0003938844684858386,-0.00005818664917058425,0.14616491207660512,0.9892601578689892],[1,0.047662199205345805,-0.013782257345351618,16.809480823006606]],[3,"Bip001 R Finger21",197,[-326],[1,0.03159564733505249,0,0],[3,-8.38265190457278e-9,-8.48401260216918e-9,0.11640227584122548,0.9932021497051763],[1,-8.643072545172979e-7,-8.775543827477857e-7,13.369025558617112]],[10,"Bip001 R Finger22",198,[[26,"Bip001 R Finger2Nub",-327,[1,0.031595706939697266,5.551115123125783e-17,-1.4901161193847656e-8],[3,-7.4505797087454084e-9,2.3283067140944524e-10,1,1.5133988506832452e-9],[1,-1.0000001192092896,-1,-1],[1,-179.99999997331958,179.99999914622646,1.7342273352941416e-7]]],[1,0.029359936714172363,1.1102230246251565e-16,7.450580596923828e-9],[3,2.3731983506174404e-8,-1.222178625830669e-8,0.1164022684915964,0.9932021505665449],[1,0.0000029437951266748443,-0.0000017551089384462455,13.369024710647238]],[3,"Bip001 R Finger3",19,[-328],[1,0.094474196434021,0.01012563705444336,-0.045684974640607834],[3,0.00039448147094978944,-0.000054032698774181456,0.13570208980537427,0.9907496072607298],[1,0.04737099881156376,-0.012737863200062,15.598436750325732]],[3,"Bip001 R Finger31",200,[-329],[1,0.02632966637611389,-5.960464477539063e-8,1.862645149230957e-8],[3,2.7172475376410613e-9,-7.183115878705292e-9,0.11640227584122548,0.9932021497051763],[1,4.1635326795245306e-7,-8.775543985771266e-7,13.369025558617102]],[10,"Bip001 R Finger32",201,[[26,"Bip001 R Finger3Nub",-330,[1,0.02632969617843628,-5.551115123125783e-17,-1.3877787807814457e-17],[3,-7.450580596923828e-9,-3.02679858954491e-9,1,-9.31322685637781e-10],[1,-0.9999999403953552,-0.9999999403953552,-0.9999998807907104],[1,179.99999965315442,179.99999914622634,-1.067217159194671e-7]]],[1,0.026329785585403442,5.960464477539063e-8,-1.862645149230957e-8],[3,3.4109908314426983e-9,-7.1018093801214546e-9,0.11640225379233832,0.9932021522892831],[1,4.963944724587577e-7,-8.77554324796866e-7,13.369023014707633]],[3,"Bone060",11,[-331],[1,0.4965684413909912,0.10294882953166962,-0.3386384844779968],[3,-0.020163999601089368,0.658169558793834,0.7466465731073486,0.09447295837576852],[1,-96.69259050936967,171.05464258040598,6.576699162336489]],[10,"Bone061",203,[[12,"Bone062",-332,[1,0.17673373222351074,2.682209014892578e-7,0],[3,8.597037612974599e-8,1.6940420355061547e-8,0.15144444763587245,0.9884657704140584],[1,0.000009897886192630644,4.474097991821601e-7,17.42128738298568]]],[1,0.2072993516921997,1.7881393432617188e-7,1.4901161193847656e-8],[3,0.0033116055959070685,-0.04369227878278071,0.07550623870500757,0.996182124894724],[1,0.7647673713974719,-5.080477481170017,8.635419289841947]],[3,"Bone069",11,[-333],[1,0.6941497325897217,0.33708083629608154,-2.117582368135751e-22],[3,0.3826454655028143,0.9238952579865242,2.9160194121764977e-7,-2.518364162293586e-7],[1,-0.00005927129632950301,-179.9999442163818,44.99529089586368]],[10,"Bone070",205,[[12,"Bone071",-334,[1,0.14679455757141113,2.980232238769531e-7,2.24835616791097e-9],[3,1.4524277345147955e-14,-1.9014449854733756e-15,-0.3664151756073089,0.9304514598218785],[1,2.007940195504446e-12,5.565580112647613e-13,-42.98940201433063]]],[1,0.1452805995941162,-1.1920928955078125e-7,-3.0813538387519657e-9],[3,-1.4283650638344183e-14,1.2100774702216607e-14,-0.3084240900770092,0.9512489582964961],[1,-1.3946486256001427e-12,1.0055237347501672e-12,-35.92856896375318]],[3,"Bone056",11,[-335],[1,0.5282891988754272,0.16340160369873047,0.3022174835205078],[3,0.0879942094602762,0.8790298008209623,0.4549511323317619,-0.11217439797105311],[1,-55.15594041904179,-163.8793898597478,3.0169468014401213]],[10,"Bone057",207,[[12,"Bone058",-336,[1,0.18097984790802002,0.0000018477439880371094,1.4901161193847656e-8],[3,-0.013789279357816717,-0.0930269507625509,-0.1459772136761642,0.9848078468889034],[1,-3.248612801693218,-11.265300163790323,-16.55606679352561]]],[1,0.206010103225708,-5.960464477539063e-8,0],[3,-0.008928303840696757,-0.08003136725269983,-0.11051217011035781,0.9906070491893803],[1,-2.0771763297167523,-9.466489194186279,-12.56336420207262]],[3,"Bone064",11,[-337],[1,0.5276918411254883,-0.34571075439453125,0.016655920073390007],[3,-0.10212752353327867,0.9923935659197667,0.06719102796220101,-0.014503276160644394],[1,-7.655532614885439,-179.11832735429206,-11.809033080007438]],[3,"Bone065",209,[-338],[1,0.20729947090148926,2.384185791015625e-7,1.4901161193847656e-8],[3,0.0003327069248968898,-0.043816461747807754,0.1430750624814646,0.9887413885753595],[1,0.7883018691157447,-5.188681241964862,16.43332141832363]],[10,"Bone066",210,[[12,"Bone068",-339,[1,0.18840014934539795,2.9802322387695312e-8,7.450580596923828e-9],[3,1.3390391199823301e-7,3.2739887689750874e-8,0.2506105635775933,0.9680879843399058],[1,0.000015913257599217166,-2.441055837980478e-7,29.027290247885528]]],[1,0.17673397064208984,2.384185791015625e-7,7.450580596923828e-9],[3,9.499796312519695e-8,1.6439175021243923e-8,0.15144447675466524,0.9884657659527194],[1,0.000010978716914526626,2.2370492114829218e-7,17.42129075868969]],[3,"Bip001 L Thigh",7,[-340],[1,-0.06054854393005371,0.00014949528849683702,0.0954100713133812],[3,-0.020717808521553166,0.9987050671484855,-0.009176902271335939,-0.045549376798213116],[1,1.1594043944706223,-174.75376239453323,-2.3237491689971406]],[3,"Bip001 L Calf",212,[-341],[1,0.3032858967781067,-3.469446951953614e-18,0],[3,-1.4436270368294636e-18,4.0199017322471e-18,-0.07338205719559543,0.997303902369655],[1,-1.3260640531802277e-16,4.521348755772659e-16,-8.416529627531403]],[3,"Bip001 L Foot",213,[-342],[1,0.23395508527755737,1.3877787807814457e-17,1.4901161193847656e-8],[3,-0.00582938256008663,-0.04609780285091035,0.09434479268314055,0.9944546600850449],[1,-0.16894353871528303,-5.292036235461769,10.846629820869666]],[3,"Bip001 L Toe0",214,[-343],[1,0.055545106530189514,0.09213767945766449,-2.7755575615628914e-17],[3,1.5452139388247047e-8,1.545632093231856e-8,0.7071067811865474,0.7071067811865474],[1,0,0.000002504126377939086,90]],[69,"Bip001 L Toe01",215,[[26,"Bip001 L Toe0Nub",-344,[1,0.010256931185722351,-4.656612873077393e-10,0],[3,-6.040395912404115e-14,1.7746356684514297e-15,1,-7.166659369358015e-15],[1,-1,-0.9999999403953552,-0.9999999403953552],[1,-179.9999999999998,179.99999999999307,-8.212386701442171e-13]]],[1,0.042733967304229736,0,-2.7755575615628914e-17]],[3,"Bip001 R Thigh",7,[-345],[1,-0.06054854393005371,0.00015002454165369272,-0.0954100713133812],[3,-0.02071768248607345,0.9987050376427246,0.009179669507300378,0.045549523457299],[1,-1.1597210463082421,174.7537393197182,-2.323720053040234]],[3,"Bip001 R Calf",217,[-346],[1,0.3032859265804291,1.862645149230957e-9,0],[3,3.491917314544687e-18,1.7791646856018394e-19,-0.07338204237467587,0.9973039034601847],[1,4.049224680242887e-16,5.0237207577276846e-17,-8.416527924587824]],[3,"Bip001 R Foot",218,[-347],[1,0.23395508527755737,-1.3877787807814457e-17,-1.4901161193847656e-8],[3,0.005829376021122299,0.04609789210203969,0.0943447849136236,0.994454656723249],[1,0.1689418365278127,5.292046678746982,10.846628907908357]],[10,"Bip001 R Toe0",219,[[20,"Bip001 R Toe0Nub",-348,[1,0.04273395985364914,-8.673617379884035e-19,2.7755575615628914e-17]]],[1,0.055545106530189514,0.09213767945766449,-2.7755575615628914e-17],[3,-1.5448949051308884e-8,-1.545087817486949e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025036093617071823,90]],[3,"Bone082",7,[-349],[1,-0.011560916900634766,-0.037317514419555664,0.20182563364505768],[3,0.17950137289560894,-0.27410859373493407,0.9428266460185952,-0.061005340148016805],[1,149.55919743083558,-161.80643913208738,-12.324060219611198]],[3,"Bone083",221,[-350],[1,0.1288262903690338,-1.3877787807814457e-17,-2.9802322387695312e-8],[3,-0.000971410620767228,-0.011447291156559973,0.009638702721400064,0.9998875493256385],[1,-0.09867767087127471,-1.3109009486636494,1.1057326639740042]],[10,"Bone084",222,[[12,"Bone085",-351,[1,0.16063714027404785,1.4901161193847656e-8,0],[3,0.0001152095796813605,-0.0175390076571817,0.02688900205481196,0.9994845429048167],[1,0.0673346936495665,-2.0124631789469993,3.080917364001346]]],[1,0.12080413103103638,-4.842877388000488e-8,5.551115123125783e-17],[3,-0.00007664291312125187,0.024987652353259115,0.010009839912653614,0.999637641578517],[1,-0.037448863816738995,2.864190298583542,1.1464845698097306]],[3,"Bone077",7,[-352],[1,-0.04098105430603027,0.13633954524993896,0.16128873825073242],[3,0.06187198045044524,0.5901576382161342,0.8020712275260571,-0.06758377072299228],[1,-107.12619141129538,-169.6806890731162,-2.0278661403892078]],[3,"Bone078",224,[-353],[1,0.11217227578163147,0,0],[3,-0.00101804090731762,-0.008491445144231781,0.011691907161161438,0.999895073624732],[1,-0.1052987565516417,-0.9718945597403345,1.3407662556721676]],[10,"Bone079",225,[[12,"Bone080",-354,[1,0.1520831435918808,0,0],[3,-0.000001210832152373362,9.213934717558117e-7,0.026936373365621786,0.9996371500637582],[1,-0.00014175054533455519,0.00010944187099465833,3.0870544065423564]]],[1,0.1463828682899475,-7.450580596923828e-8,1.4901161193847656e-8],[3,0.000356314528977864,-0.017102517176973846,0.009404997335493845,0.9998094433297213],[1,0.059265287645762915,-1.9605434491791078,1.0768930349052228]],[3,"Bone097",7,[-355],[1,-0.05313706398010254,0.13311481475830078,-0.1635456085205078],[3,-0.054561258168047744,0.885378850659448,0.4508908159556673,0.09912029055096111],[1,-54.02328380261945,167.01321986669666,-0.4142469798107784]],[3,"Bone098",227,[-356],[1,0.11395341157913208,0.0026635080575942993,-0.000004231929779052734],[3,-0.00040114801833666215,0.0012248067612635298,-0.018815793038168403,0.9998221366128127],[1,-0.043349857205508255,0.13956158702494506,-2.1563128525033033]],[10,"Bone099",228,[[12,"Bone100",-357,[1,0.13152332603931427,0,0],[3,-0.00009010363521795529,-0.01565294009230588,0.03285750833854909,0.9993374612680063],[1,0.04872326076486637,-1.7963388869515278,3.7655703424096703]]],[1,0.135727196931839,-7.450580596923828e-8,0],[3,0.00021049341493902484,-0.0026128066835870082,0.004055620263929129,0.9999883403710421],[1,0.025335596763105987,-0.2995111390793309,0.46467650120643983]],[3,"Bone092",7,[-358],[1,-0.016277968883514404,-0.044812921434640884,-0.189912810921669],[3,-0.09467353543985392,0.9601083268256244,-0.2048438908819203,0.1651299573541239],[1,21.956162727038382,163.29864239280369,-14.444697751171795]],[3,"Bone093",230,[-359],[1,0.11395338177680969,0.002663496881723404,-0.00000426173210144043],[3,-0.0004784977265551678,-0.002883327139914657,-0.018817450501108186,0.9998186640692244],[1,-0.06108249937093116,-0.33161349248712196,-2.156280839244559]],[10,"Bone094",231,[[12,"Bone095",-360,[1,0.13152334094047546,7.450580596923828e-9,2.9802322387695312e-8],[3,-0.0005958124381135351,0.001066219966372877,-0.008285640532483984,0.9999649275567061],[1,-0.06726959684406585,0.12162661397968,-0.9495474281413622]]],[1,0.135727196931839,-5.587935447692871e-8,1.1102230246251565e-16],[3,0.00024000466311570413,-0.00988433501885233,0.004056859262242427,0.9999428904752127],[1,0.03209704244641989,-1.132819289747719,0.4645885254733225]],[3,"Bone087",7,[-361],[1,-0.004704833030700684,-0.12724639475345612,0.0032868385314941406],[3,0.14655160911268392,-0.6821682456571082,0.6975883845007359,-0.1629096568446444],[1,91.02753332592607,178.87204914651804,-25.292117321626083]],[3,"Bone088",233,[-362],[1,0.11395341157913208,0.0026634912937879562,-0.00000426173210144043],[3,-0.0006682663396173315,-0.012969338668003916,-0.018820232263502185,0.9997385400854375],[1,-0.10460192863313725,-1.4884499390787183,-2.1555911973239588]],[10,"Bone089",234,[[12,"Bone090",-363,[1,0.13152335584163666,-5.587935447692871e-9,0],[3,0.00021223348426977647,-0.02484139052437831,0.03284582864812609,0.9991516460548827],[1,0.11805348609593398,-2.8523216700881093,3.7627616294131903]]],[1,0.1357271671295166,-5.3085386753082275e-8,0],[3,0.00020037694325089107,-0.00010768367550176465,0.004055128807225562,0.9999917520578174],[1,0.023012113201679292,-0.01243305933989713,0.4646823209452444]],[22," Zomball_zj2_head",false,2,[[15,1,0,-364,[111],[1],2,112,113]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj3_clothes",false,2,[[15,1,0,-365,[114,115],[1],2,116,117]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj3_head",false,2,[[15,1,0,-366,[118],[1],2,119,120]],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[22,"Zomball_zj4_head",false,2,[[15,1,0,-367,[121],[1],2,122,123]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj5_head",false,2,[[15,1,0,-368,[124],[1],2,125,126]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj4_clothes",false,2,[[15,1,0,-369,[127,128],[1],2,129,130]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[38,"Zomball_zj6_head",false,2,[[15,1,0,-370,[131],[1],2,132,133]],[1,0,0,-0.09860992431640625],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[38,"Zomball_zj6_clothes",false,2,[[15,1,0,-371,[134,135,136],[1],2,137,138]],[1,2.0234773856486754e-9,2.0234773856486754e-9,-0.00238037109375],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[22,"Zomball_zj6_body",false,2,[[15,1,0,-372,[139,140],[1],2,141,142]],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[37,"Zomball_wp1",9,[[30,1,0,-373,[143],[1],144]],[1,0.3044475018978119,0.03417280316352844,-0.14228355884552002],[3,-0.49999907612759165,-0.5000000596042304,0.4999999701972633,0.5000008940692573],[1,0,-89.9997916792241,90]],[39,"Zomball_wp5",false,9,[[30,1,0,-374,[145],[1],146]],[1,0.004208475351333618,-0.049929797649383545,-0.003980517387390137],[3,0.7071077348599449,-6.4273764300531e-7,0.7071058275112795,6.427394051513249e-7],[1,-0.9999998807907104,-0.9999997615814209,-0.9999998807907104],[1,179.99989583976355,-89.99984545045882,2.3031677689913016e-12]],[39,"Zomball_wp3",false,9,[[30,1,0,-375,[147],[1],148]],[1,0.08837822079658508,0.02575540542602539,0.3122841715812683],[3,0.7070650283383743,0.007741487393457201,0.707063776640865,-0.007741500897634198],[1,-1,-1.0000001192092896,-0.9999999403953552],[1,-178.74541210803775,-89.99989857096672,1.6236031231094994e-8]],[39,"Zomball_wp4",false,9,[[30,1,0,-376,[149],[1],150]],[1,0.018603414297103882,0.057217299938201904,0.3496796786785126],[3,-0.02794469893751988,-4.542627963935217e-8,-6.876180071684273e-9,0.9996094706440558],[1,0.7219220995903015,0.721921980381012,0.7219220399856567],[1,-3.2026435373952515,-0.000005225454403340657,-6.421792342886193e-7]],[38,"Zomball_wp2",false,9,[[30,1,0,-377,[151],[1],152]],[1,-0.028623729944229126,0.02337297797203064,0.33707040548324585],[3,3.0556426312578465e-7,-0.7071061553374501,3.05563723113319e-7,0.707107407034959],[1,0.000049518764754437913,-89.99989857686789,7.187326640205281e-14]],[68,0,21,[23,"245Yv8agVeYq9cWl0ZBUPZ",-378,[28,"86lpJKc2ZOcI30EVnb9EyI",21,[[19,"rw",["_name"],22],[9,["_lpos"],22,[1,0,0,0]],[9,["_lrot"],22,[3,0,0,0,1]],[9,["_euler"],22,[1,0,0,0]],[9,["_lscale"],22,[1,1.2,1.2,1.2]]]],170],[{},"mountedRoot",1,21]],[24,0,null,39,[23,"f0l1SVqEBdE7x59A3aiLwt",-379,[28,"28Utruc/dJIZH8URaoZiRp",39,[[19,"rw",["_name"],23],[9,["_lpos"],23,[1,0,0,0]],[9,["_lrot"],23,[3,0,0,0,1]],[9,["_euler"],23,[1,0,0,0]],[9,["_lscale"],23,[1,1.4,1.4,1.4]]]],171]],[24,0,null,40,[23,"df61Oe8wNaOqs3Ga6J5LJk",-380,[28,"17BPWTKGZFEIr0LMyUOIB2",40,[[19,"rw",["_name"],24],[9,["_lpos"],24,[1,0,0,0]],[9,["_lrot"],24,[3,0,0,0,1]],[9,["_euler"],24,[1,0,0,0]],[9,["_lscale"],24,[1,1.2,1.2,1.2]]]],172]],[56,"boss2",4,[[15,1,0,-381,[173],[1],4,174,175]],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,100,100,100],[1,-90.00000000000003,0,0]],[94,"Bone001",4,[[26,"Bone021",-382,[1,-51.53325653076172,80.49423217773438,47.381526947021484],[3,-0.6680792516667426,-0.23166832142506777,-0.23762385357060706,0.6659840888150044],[1,0.008376382291316986,0.008376381359994411,0.008376381359994411],[1,-90.32029080839537,-38.7624658556548,-0.3988857578721814]]],[3,2.1855475425826725e-8,9.756675921919528e-11,0.004464134993506943,0.9999900356997361],[1,0.000002504477957676761,-6.432800274553515e-16,0.5115538877025262]],[56,"Object001",4,[[15,1,0,-383,[176],[1],4,177,178]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,100,100,100],[1,-90.00000000000003,0,0]],[56,"Object002",4,[[15,1,0,-384,[179],[1],4,180,181]],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,100,100,100],[1,-90.00000000000003,0,0]],[3,"Bone004",42,[12],[1,-0.39857959747314453,-0.3738861083984375,1.1920928955078125e-7],[3,0.0005600079172473352,-0.0005991745707317007,0.7064564648103393,0.7077560248480009],[1,41.730759514116166,-41.73393313046893,89.85889497991492]],[10,"Bone006",12,[[20,"Bone007",-385,[1,28.138099670410156,-9.5367431640625e-7,0.0000019073486328125]]],[1,23.452205657958984,-4.76837158203125e-7,4.76837158203125e-7],[3,0.00011333646521425446,-0.006632763964485871,0.014515712083656087,0.9998726357390434],[1,0.024028667460935068,-0.7604932343558393,1.6633136994882889]],[3,"Bone009(mirrored)",57,[-386],[1,25.13408660888672,0.0000019073486328125,0.0000036954879760742188],[3,-0.000001692855182445204,0.0033701557357486574,-0.010166810591901308,0.9999426373596836],[1,0.0037331307659293224,0.3862500475945693,-1.165044783353274]],[10,"Bone010(mirrored)",259,[[20,"Bone011(mirrored)",-387,[1,28.138099670410156,0.000003814697265625,-0.000008106231689453125]]],[1,23.45220947265625,7.105427357601002e-15,0.000007033348083496094],[3,0.00008797914135175618,0.006845614472176262,-0.0011789922248699486,0.9999758696086135],[1,0.011006314348068532,0.7844692795442264,-0.13503040684125361]],[3,"Bone012",57,[-388],[1,3.623180389404297,-4.609075546264648,-36.17643356323242],[3,0.49407963777288855,0.5058510183960578,-0.5022384405662345,0.4977515520251838],[1,89.5826698510102,90.93152190729266,-0.006792453911064695]],[3,"Bone013",261,[-389],[1,4.940879821777344,6.503299713134766,0.7350025177001953],[3,0.09749002385245457,-0.07541197083869439,0.6198663950373594,0.7749673426711994],[1,49.01327920740854,-47.19962415060287,71.09349837335239]],[10,"Bone014",262,[[20,"Bone015",-390,[1,28.268035888671875,0.000003814697265625,-0.000003814697265625]]],[1,34.38059997558594,-0.000003814697265625,-0.0000019073486328125],[3,-2.2865936163058503e-7,-2.4421146535383214e-7,0.02500041220730127,0.9996874408480649],[1,-0.000025526526285992043,-0.00002735494890721925,2.8651347253848094]],[3,"Bone009",58,[-391],[1,25.13408851623535,0.000003814697265625,-0.0000016689300537109375],[3,-0.00009636605693133673,-0.003172967353671875,-0.0014422404363175878,0.9999939214486654],[1,-0.011567109564524107,-0.36361294468509703,-0.1652327662813241]],[10,"Bone010",264,[[20,"Bone011",-392,[1,28.138107299804688,0,0.00000286102294921875]]],[1,23.452220916748047,-7.105427357601002e-15,4.76837158203125e-7],[3,0.00021161105012044992,-0.00643057918835899,0.014431272271974464,0.9998751628341799],[1,0.03489460780187202,-0.7374755045627258,1.6535691477037155]],[24,0,null,43,[23,"e4VdEIGxlVvKNcU74A69uk",-393,[28,"e6MRWsbfVEh7Y8UUnY7XyQ",43,[[73,"rw",["_name"],[16,["e4VdEIGxlVvKNcU74A69uk"]]],[32,["_lpos"],[16,["e4VdEIGxlVvKNcU74A69uk"]],[1,0,0,0]],[32,["_lrot"],[16,["e4VdEIGxlVvKNcU74A69uk"]],[3,0,0,0,1]],[32,["_euler"],[16,["e4VdEIGxlVvKNcU74A69uk"]],[1,0,0,0]],[32,["_lscale"],[16,["e4VdEIGxlVvKNcU74A69uk"]],[1,1,1,1]]]],186]],[24,0,null,44,[23,"dbMe+tZgBVI7rMjDzUZIuA",-394,[28,"30JWmVFthOX48QODcRdgj3",44,[[32,["_lpos"],[16,["dbMe+tZgBVI7rMjDzUZIuA"]],[1,0,0,0]],[73,"rw",["_name"],[16,["dbMe+tZgBVI7rMjDzUZIuA"]]],[32,["_lrot"],[16,["dbMe+tZgBVI7rMjDzUZIuA"]],[3,0,0,0,1]],[32,["_euler"],[16,["dbMe+tZgBVI7rMjDzUZIuA"]],[1,0,0,0]],[32,["_lscale"],[16,["dbMe+tZgBVI7rMjDzUZIuA"]],[1,1,1,1]]]],187]],[68,0,28,[23,"245Yv8agVeYq9cWl0ZBUPZ",-395,[28,"86lpJKc2ZOcI30EVnb9EyI",28,[[19,"rw",["_name"],29],[9,["_lpos"],29,[1,0,0,0]],[9,["_lrot"],29,[3,0,0,0,1]],[9,["_euler"],29,[1,0,0,0]],[9,["_lscale"],29,[1,1.2,1.2,1.2]]]],191],[{},"mountedRoot",1,28]]],0,[0,14,8,0,1,1,0,-1,89,0,-2,90,0,-3,91,0,-4,34,0,-5,155,0,-6,156,0,-7,157,0,-8,158,0,-9,159,0,-10,160,0,-11,161,0,-12,162,0,-13,163,0,-14,8,0,14,9,0,1,2,0,-1,170,0,-2,171,0,-3,172,0,-4,36,0,-5,236,0,-6,237,0,-7,238,0,-8,239,0,-9,240,0,-10,241,0,-11,242,0,-12,243,0,-13,244,0,-14,9,0,-1,69,0,-2,70,0,-3,71,0,-4,72,0,-5,73,0,-6,74,0,-7,75,0,-8,76,0,-9,77,0,-10,78,0,-11,32,0,-12,82,0,-13,83,0,-14,84,0,-15,85,0,1,4,0,-1,253,0,-2,254,0,-3,255,0,-4,256,0,0,4,0,-6,41,0,-1,169,0,-2,51,0,-3,38,0,-4,21,0,-5,39,0,-6,40,0,-7,56,0,-8,43,0,-9,44,0,-1,93,0,-2,131,0,-3,136,0,-4,140,0,-5,143,0,-6,146,0,-7,149,0,-8,152,0,-1,174,0,-2,212,0,-3,217,0,-4,221,0,-5,224,0,-6,227,0,-7,230,0,-8,233,0,-1,164,0,-2,165,0,-3,166,0,-4,167,0,-5,168,0,-1,245,0,-2,246,0,-3,247,0,-4,248,0,-5,249,0,0,10,0,-2,122,0,-3,124,0,-4,126,0,-5,128,0,0,11,0,-2,203,0,-3,205,0,-4,207,0,-5,209,0,-1,258,0,0,12,0,0,12,0,0,12,0,0,12,0,1,13,0,-1,59,0,-2,62,0,-3,65,0,-4,68,0,-2,15,0,-1,86,0,-2,87,0,-3,88,0,-4,48,0,-1,96,0,-2,99,0,-3,102,0,-4,105,0,-1,110,0,-2,113,0,-3,116,0,-4,119,0,-1,177,0,-2,180,0,-3,183,0,-4,186,0,-1,191,0,-2,194,0,-3,197,0,-4,200,0,1,21,0,-1,250,0,1,28,0,-1,268,0,-1,79,0,-2,80,0,-3,81,0,0,34,0,-2,92,0,0,34,0,-1,94,0,-2,108,0,0,36,0,-2,173,0,0,36,0,-1,175,0,-2,189,0,1,38,0,-1,54,0,1,39,0,-1,251,0,1,40,0,-1,252,0,0,41,0,0,41,0,-3,42,0,-1,257,0,-2,57,0,-3,58,0,1,43,0,-1,266,0,1,44,0,-1,267,0,1,45,0,-1,60,0,1,46,0,-1,63,0,1,47,0,-1,66,0,1,48,0,0,49,0,0,50,0,1,51,0,0,52,0,0,53,0,10,55,0,13,54,0,10,55,0,10,55,0,3,54,0,1,56,0,-1,259,0,-2,261,0,-1,264,0,0,58,0,1,59,0,10,61,0,13,60,0,10,61,0,10,61,0,3,60,0,1,62,0,10,64,0,13,63,0,10,64,0,10,64,0,3,63,0,1,65,0,10,67,0,13,66,0,10,67,0,10,67,0,3,66,0,1,68,0,1,69,0,1,70,0,1,71,0,1,72,0,1,73,0,1,74,0,1,75,0,3,76,0,3,77,0,1,78,0,1,79,0,1,80,0,1,81,0,1,82,0,1,83,0,1,84,0,1,85,0,1,86,0,1,87,0,3,88,0,1,89,0,1,90,0,1,91,0,-1,95,0,-1,97,0,-1,98,0,0,98,0,-1,100,0,-1,101,0,0,101,0,-1,103,0,-1,104,0,0,104,0,-1,106,0,-1,107,0,0,107,0,-1,109,0,-1,111,0,-1,112,0,0,112,0,-1,114,0,-1,115,0,0,115,0,-1,117,0,-1,118,0,0,118,0,-1,120,0,-1,121,0,0,121,0,-1,123,0,0,123,0,-1,125,0,0,125,0,-1,127,0,0,127,0,-1,129,0,-1,130,0,0,130,0,-1,132,0,-1,133,0,-1,134,0,-1,135,0,0,135,0,-1,137,0,-1,138,0,-1,139,0,0,139,0,-1,141,0,-1,142,0,0,142,0,-1,144,0,-1,145,0,0,145,0,-1,147,0,-1,148,0,0,148,0,-1,150,0,-1,151,0,0,151,0,-1,153,0,-1,154,0,0,154,0,1,155,0,1,156,0,1,157,0,1,158,0,1,159,0,1,160,0,1,161,0,1,162,0,1,163,0,1,164,0,1,165,0,1,166,0,1,167,0,1,168,0,1,169,0,1,170,0,1,171,0,1,172,0,-1,176,0,-1,178,0,-1,179,0,0,179,0,-1,181,0,-1,182,0,0,182,0,-1,184,0,-1,185,0,0,185,0,-1,187,0,-1,188,0,0,188,0,-1,190,0,-1,192,0,-1,193,0,0,193,0,-1,195,0,-1,196,0,0,196,0,-1,198,0,-1,199,0,0,199,0,-1,201,0,-1,202,0,0,202,0,-1,204,0,0,204,0,-1,206,0,0,206,0,-1,208,0,0,208,0,-1,210,0,-1,211,0,0,211,0,-1,213,0,-1,214,0,-1,215,0,-1,216,0,0,216,0,-1,218,0,-1,219,0,-1,220,0,0,220,0,-1,222,0,-1,223,0,0,223,0,-1,225,0,-1,226,0,0,226,0,-1,228,0,-1,229,0,0,229,0,-1,231,0,-1,232,0,0,232,0,-1,234,0,-1,235,0,0,235,0,1,236,0,1,237,0,1,238,0,1,239,0,1,240,0,1,241,0,1,242,0,1,243,0,1,244,0,1,245,0,1,246,0,1,247,0,1,248,0,1,249,0,3,250,0,3,251,0,3,252,0,1,253,0,0,254,0,1,255,0,1,256,0,0,258,0,-1,260,0,0,260,0,-1,262,0,-1,263,0,0,263,0,-1,265,0,0,265,0,3,266,0,3,267,0,3,268,0,15,14,1,0,48,2,0,51,3,0,14,4,0,56,5,0,14,6,0,92,7,0,173,10,0,35,11,0,37,12,0,257,13,0,14,16,0,49,17,0,50,18,0,52,19,0,53,28,0,68,35,0,93,37,0,174,45,0,59,46,0,62,47,0,65,49,0,95,50,0,109,52,0,176,53,0,190,395],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,9,9,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,9,-1,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,-2,-3,2,5,-1,-2,2,5,-1,2,-1,2,-1,2,-1,2,-1,2,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,12,-1,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,2,5,-1,2,5,-1,-2,2,5,-1,2,5,-1,-2,-3,2,5,-1,-2,2,5,-1,2,-1,2,-1,2,-1,2,-1,2,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,12,9,9,9,9,-1,2,5,-1,2,5,-1,2,5,-1,-2,-3,-4,9,9,9,9,9,9],[2,62,2,62,2,178,179,63,180,64,181,65,2,182,183,184,2,8,2,66,2,66,185,186,2,8,2,63,2,64,2,65,187,67,68,69,70,71,72,12,12,73,74,75,76,77,13,13,78,79,80,81,82,83,84,85,86,87,88,14,14,89,90,91,92,93,7,7,7,94,95,15,15,96,97,98,99,100,101,102,103,104,105,106,107,16,108,109,110,111,112,113,114,115,116,117,118,119,120,121,16,67,68,69,70,71,72,12,12,73,74,75,76,77,13,13,78,79,80,81,82,83,84,85,86,87,88,14,14,89,90,91,92,93,7,7,7,94,95,15,15,96,97,98,99,100,101,102,103,104,105,106,107,16,108,109,110,111,112,113,114,115,116,117,118,119,120,121,16,17,122,188,189,48,190,191,48,192,193,48,194,195,196,197,198,199,200,201,17,17,17,122]],[[[6,".bin",3182171762,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28608,"length":2832,"count":708,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28608,"count":596,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.29701530933380127,-0.16009321808815002,-0.00023259222507476807],"maxPosition",8,[1,0.044693946838378906,0.18325988948345184,1.0329567193984985]]],-1],0,0,[],[],[]],[[[6,".bin",2790344572,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":52608,"length":5088,"count":1272,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":52608,"count":1096,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24287986755371094,-0.1455877125263214,-0.000203743577003479],"maxPosition",8,[1,0.24288010597229004,0.14558765292167664,1.2469428777694702]]],-1],0,0,[],[],[]],[[[14,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4294625840],"mainTexture",6,0]],11]]],0,0,[0,0],[6,4],[4,50]],[[[6,".bin",2922829287,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8064,"length":1584,"count":396,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8064,"count":168,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3714997172355652,-0.3792099356651306,0],"maxPosition",8,[1,0.3714997172355652,0.44974616169929504,2.9424357414245605]]],-1],0,0,[],[],[]]]]
